package ib.approve.web;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import egovframework.rte.psl.dataaccess.util.EgovMap;
import ib.approve.service.ApproveService;
import ib.approve.service.ApproveSetService;
import ib.cmm.util.sim.service.AjaxResponse;
import ib.common.util.DateUtil;
import ib.personnel.service.ManagementService;


/**
 * <pre>
 * package	: ibiss.approve.web
 * filename	: ApproveSetController.java
 * </pre>
 *
 * 전자결재 서식세팅 컨트롤러
 *
 * @author :  Inhee
 * @date : 2017. 7. 24.
 * @version :
 *
 */
@Controller
public class ApproveSetController {

	protected static final Log logger = LogFactory
			.getLog(ApproveSetController.class);

	@Resource(name="approveSetService")
	private ApproveSetService approveSetService;

	@Resource(name = "managementService")
	private ManagementService managementService;

	@Resource(name = "approveService")
	private ApproveService approveService;

	// new아이콘
	String newIcon = "<span class=\"icon_new\"><em>new</em></span>";

	// 카운트 prefix
	String prefix = "<span class=\"menuRipple\">(";
	// 카운트 suffix
	String suffix = ")</span>";

	Date nowDate = new Date();

	// 메뉴의 new갯수를 조회하기위한 맵
	Map<String, Object> contentMarkRuleMap = new HashMap<String, Object>();

	@ModelAttribute
	public void common(Model model, HttpServletRequest request, HttpSession session) {
		Map<String, String> menuMap = new HashMap<String, String>();

		///////////////// ajax조회면 실행하지 않는다 : S
		String ajaxHeader = request.getHeader("X-Requested-With");

		String winId = request.getParameter("winID");	//AxisModal

		if ((ajaxHeader != null && ajaxHeader.equals("XMLHttpRequest"))||winId!=null)
			return;
		///////////////// ajax조회면 실행하지 않는다 : E

		try {
			// 기본정보 셋팅
			Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");


			String orgId = baseUserLoginInfo.get("orgId").toString();
			String applyOrgId = baseUserLoginInfo.get("applyOrgId").toString();

			contentMarkRuleMap.put("orgId",applyOrgId);
			contentMarkRuleMap.put("applyOrgId",applyOrgId);

			if(!orgId.equals(applyOrgId)){
				contentMarkRuleMap.put("searchApplyOrgId", "Y");
			}
			contentMarkRuleMap.put("userId", baseUserLoginInfo.get("userId"));
			contentMarkRuleMap.put("useYn", "Y");

			//////////////////////// 기본서식 new조회 :S
			SimpleDateFormat sdfmt = new SimpleDateFormat("yyyyMMdd");
			Date productEndDate = sdfmt.parse("20170901");

			Integer productDateCnt = DateUtil.getDiffDayCountTwoDate(nowDate, productEndDate);

			if (productDateCnt > 0)
				menuMap.put("MENU_APPROVE_PRODUCT", newIcon);
			//////////////////////// 기본서식 new조회 :E

			/////////////////////// 사내서식 new 조회:S
			contentMarkRuleMap.put("newContentMarkClass", "APPV");
			contentMarkRuleMap.put("newContentMarkType", "COMPANY");

			// 조회 후 사용하는 조건이 있을때 Y로 바꾼다.
			contentMarkRuleMap.put("ruleUseYn", "N");

			List<EgovMap> markRuleList = managementService.markRuleListList(contentMarkRuleMap);

			if (markRuleList != null && markRuleList.size() == 1) {

				EgovMap ruleMap = markRuleList.get(0);
				contentMarkRuleMap.put("ruleUseYn", "Y");
				contentMarkRuleMap.put("readTimeYn", ruleMap.get("readTimeYn"));
				contentMarkRuleMap.put("markDayCnt", ruleMap.get("markDayCnt"));
			}

			Integer menuApproveCompanyCnt = approveService.getMenuApproveCompanyCnt(contentMarkRuleMap);
			if (menuApproveCompanyCnt > 0)
				menuMap.put("MENU_APPROVE_COMPANY", newIcon);
			/////////////////////// 사내서식 new 조회:E

			/////////////////////// 임시저장 new 조회:S

			contentMarkRuleMap.put("approveDraftIngYn", "N");
			Integer menuMenuApproveTemp = approveService.getMenuMenuApproveTemp(contentMarkRuleMap);
			if (menuMenuApproveTemp > 0)
				menuMap.put("MENU_APPROVE_TEMP", prefix + menuMenuApproveTemp + suffix);

			contentMarkRuleMap.put("approveDraftIngYn", "Y");
			Integer menuMenuApproveDraft = approveService.getMenuMenuApproveTemp(contentMarkRuleMap);
			if (menuMenuApproveDraft > 0)
				menuMap.put("MENU_APPROVE_DRFDOC", prefix + menuMenuApproveDraft + suffix);
			/////////////////////// 임시저장 new 조회:E

			/////////////////////// 기결 new 조회:S
			contentMarkRuleMap.put("listType", "reqList");
			Integer menuApproveReq = approveService.getMenuApproveReqList(contentMarkRuleMap);
			if (menuApproveReq > 0)
				menuMap.put("MENU_APPROVE_REQ_PRODUCT", prefix + menuApproveReq + suffix);
			/////////////////////// 기결 new 조회:E

			/////////////////////// 미결 new 조회:S
			contentMarkRuleMap.put("listType", "pendList");

			contentMarkRuleMap.put("newContentMarkClass", "APPV");
			contentMarkRuleMap.put("newContentMarkType", "APPROVER");

			// 조회 후 사용하는 조건이 있을때 Y로 바꾼다.
			contentMarkRuleMap.put("ruleUseYn", "N");

			markRuleList = managementService.markRuleListList(contentMarkRuleMap);

			if (markRuleList != null && markRuleList.size() == 1) {

				EgovMap ruleMap = markRuleList.get(0);
				contentMarkRuleMap.put("ruleUseYn", "Y");
				contentMarkRuleMap.put("readTimeYn", ruleMap.get("readTimeYn"));
				contentMarkRuleMap.put("markDayCnt", ruleMap.get("markDayCnt"));
			}

			Integer menuApprovePending = approveService.getMenuApproveReqList(contentMarkRuleMap);
			if (menuApprovePending > 0)
				menuMap.put("MENU_APPROVE_PENDING", prefix + menuApprovePending + suffix);

			contentMarkRuleMap.put("listType", "nextList");
			Integer menuApproveNext = approveService.getMenuApproveReqList(contentMarkRuleMap);
			if (menuApproveNext > 0)
				menuMap.put("MENU_APPROVE_NEXT", prefix + menuApproveNext + suffix);
			/////////////////////// 미결 new 조회:E

			/////////////////////// 선열 new 조회:S
			contentMarkRuleMap.put("listType", "previous");

			contentMarkRuleMap.put("newContentMarkClass", "APPV");
			contentMarkRuleMap.put("newContentMarkType", "PREVIOUS");
			// PREVIOUS
			// 조회 후 사용하는 조건이 있을때 Y로 바꾼다.
			contentMarkRuleMap.put("ruleUseYn", "N");

			markRuleList = managementService.markRuleListList(contentMarkRuleMap);

			if (markRuleList != null && markRuleList.size() == 1) {

				EgovMap ruleMap = markRuleList.get(0);
				contentMarkRuleMap.put("ruleUseYn", "Y");
				contentMarkRuleMap.put("readTimeYn", ruleMap.get("readTimeYn"));
				contentMarkRuleMap.put("markDayCnt", ruleMap.get("markDayCnt"));
			}

			Integer menuApprovePrevious = approveService.getMenuApproveReqList(contentMarkRuleMap);
			if (menuApprovePrevious > 0)
				menuMap.put("MENU_APPROVE_PREVIOUS", prefix + menuApprovePrevious + suffix);
			/////////////////////// 선열 new 조회:E

			contentMarkRuleMap.put("ruleUseYn", "N");

			contentMarkRuleMap.put("listType", "proxyList");
			Integer menuApproveProxy = approveService.getMenuApproveReqList(contentMarkRuleMap);
			if (menuApproveProxy > 0)
				menuMap.put("MENU_APPROVE_PROXY", prefix + menuApproveProxy + suffix);

			/////////////////////// 참조문서 new 조회:S
			contentMarkRuleMap.put("newContentMarkClass", "APPV");
			contentMarkRuleMap.put("newContentMarkType", "REFERENTIAL");

			// 조회 후 사용하는 조건이 있을때 Y로 바꾼다.
			contentMarkRuleMap.put("ruleUseYn", "N");

			markRuleList = managementService.markRuleListList(contentMarkRuleMap);
			if (markRuleList != null && markRuleList.size() == 1) {

				EgovMap ruleMap = markRuleList.get(0);
				contentMarkRuleMap.put("ruleUseYn", "Y");
				contentMarkRuleMap.put("readTimeYn", ruleMap.get("readTimeYn"));
				contentMarkRuleMap.put("markDayCnt", ruleMap.get("markDayCnt"));

			}
			Integer menuApproveReference = approveService.getMenuApproveReference(contentMarkRuleMap);
			if (menuApproveReference > 0)
				menuMap.put("MENU_APPROVE_REFERENCE", prefix + menuApproveReference + suffix);

			// 수신문서 NEW :S
			contentMarkRuleMap.put("newContentMarkClass", "APPV");
			contentMarkRuleMap.put("newContentMarkType", "RECEIVER");
			// 조회 후 사용하는 조건이 있을때 Y로 바꾼다.
			contentMarkRuleMap.put("ruleUseYn", "N");
			markRuleList = managementService.markRuleListList(contentMarkRuleMap);
			if (markRuleList != null && markRuleList.size() == 1) {

				EgovMap ruleMap = markRuleList.get(0);
				contentMarkRuleMap.put("ruleUseYn", "Y");
				contentMarkRuleMap.put("readTimeYn", ruleMap.get("readTimeYn"));
				contentMarkRuleMap.put("markDayCnt", ruleMap.get("markDayCnt"));

			}
			Integer menuApproveReceived = approveService.getMenuApproveReceived(contentMarkRuleMap);
			if (menuApproveReceived > 0)
				menuMap.put("MENU_APPROVE_RECEIVED", prefix + menuApproveReceived + suffix);

			// 지출문서 NEW : S
			Integer menuApproveExpense = approveService.getMenuApproveExpense(contentMarkRuleMap);
			if (menuApproveExpense > 0)
				menuMap.put("MENU_APPROVE_EXPENSE", prefix + menuApproveExpense + suffix);

			model.addAttribute("menuSummaryMap", menuMap);

		} catch (Exception e) {
			logger.info(
					"=========================================Approve좌측메뉴 새글알림 조회도중 오류발생=============================== ");
			e.printStackTrace();
		}
	}
	/**
	 *
	 * 서식셋팅 화면
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	 * @author :  Inhee
     * @date : 2017. 7. 24.
	 */
	@RequestMapping("/approve/approveSetting.do")
	public String approveSetting(@RequestParam Map<String,Object> map
			,Model model, HttpSession session) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());

		List<EgovMap> appvReceiverSetupList = approveSetService.getAppvReceiverSetupList(map);

		model.addAttribute("appvReceiverSetupList", appvReceiverSetupList);
		model.addAttribute("actionType","receiver");  //초기값 필수 수신/참조자 세팅

		return "approveSet/approveSetting";
	}

	/**
	 *
	 * 필수수신참조자설정 저장
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	  * @author :  Inhee
     * @date : 2017. 7. 24.
	 */
	@RequestMapping(value = "/approve/processAppvReceiverSetup.do")
	public void processAppvReceiverSetup(HttpSession session
			, @RequestParam Map<String,Object> paramMap
			, @RequestParam(value= "arrUserId",required=false) String[] arrUserId
			, HttpServletResponse response
			) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		paramMap.put("sessionUserId", baseUserLoginInfo.get("userId").toString());

		if(arrUserId != null) paramMap.put("arrUserId", arrUserId);

		approveSetService.processAppvReceiverSetup(paramMap);

		//return obj
		Map<String,Object> obj = new HashMap<String,Object>();

		obj.put("result", "SUCCESS");

		AjaxResponse.responseAjaxObject(response, obj);		//"SUCCESS" 전달
	}

	/**
	 *
	 * 필수수신참조자설정 조회
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	 * @author :  Park
	 * @date : 2016. 10. 20.
	 */
	@RequestMapping("/approve/getAppvReceiverSetupAjax.do")
	public String getAppvReceiverSetupAjax(HttpSession session,Model model) throws Exception{

		Map<String,Object> map = new HashMap<String, Object>();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		List<EgovMap> appvReceiverSetupList = approveSetService.getAppvReceiverSetupList(map);

		model.addAttribute("appvReceiverSetupList", appvReceiverSetupList);

		return "approveSet/include/approveSetting_receiver_INC/inc";
	}

	/**
	 *
	 * 종결전 문서열람 세팅 조회
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	 * @author :  Park
	 * @date : 2016. 10. 20.
	 */
	@RequestMapping("/approve/getAppvReadSetupAjax.do")
	public String getAppvReadSetupAjax(HttpSession session,Model model) throws Exception{

		Map<String,Object> map = new HashMap<String, Object>();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		List<EgovMap> appvReadSetupList = approveSetService.getAppvReadSetupList(map);

		model.addAttribute("appvReadSetupList", appvReadSetupList);

		return "approveSet/include/approveSetting_read_INC/inc";
	}

	/**
	 *
	 * 지출결의서 설정 조회
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	 * @author :  Park
	 * @date : 2016. 10. 20.
	 */
	@RequestMapping("/approve/getAppvExpenseSetupAjax.do")
	public String getAppvExpenseSetupAjax(HttpSession session,Model model) throws Exception{

		Map<String,Object> map = new HashMap<String, Object>();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		//지출결의서설정
		EgovMap appvReceiverSetup = approveSetService.getAppvExpenseSetupDetail(map);

		//지출담당자설정 목록
		List<EgovMap> appvManagerSetupList = approveSetService.getAppvManagerSetupList(map);

		//지출일설정 목록
		List<EgovMap> appvDaySetupList = approveSetService.getAppvDaySetupList(map);

		model.addAttribute("appvReceiverSetup", appvReceiverSetup);
		model.addAttribute("appvManagerSetupList", appvManagerSetupList);
		model.addAttribute("appvDaySetupList", appvDaySetupList);

		return "approveSet/include/approveSetting_expense_INC/inc";
	}

	/**
	 *
	 * 지출결의서 설정 조회
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	 * @author :  Park
	 * @date : 2016. 10. 20.
	 */
	@RequestMapping("/approve/getPendAlarmAjax.do")
	public String getPendAlarmAjax(HttpSession session,Model model, @RequestParam Map<String, Object> map) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		List<EgovMap> appvAlarmSetupList = approveSetService.appvAlarmSetupList(map);

		model.addAttribute("appvAlarmSetupList", appvAlarmSetupList);

		return "approveSet/include/approveSetting_pend_INC/inc";
	}

	/**
	 *
	 * 종결전 문서열람 세팅
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	  * @author :  Inhee
   * @date : 2017. 7. 24.
	 */
	@RequestMapping(value = "/approve/processAppvReadSetup.do")
	public void processAppvReadSetup(HttpSession session
			, @RequestParam Map<String,Object> paramMap
			, HttpServletResponse response
			) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		paramMap.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		approveSetService.processAppvReadSetup(paramMap);

		//return obj
		Map<String,Object> obj = new HashMap<String,Object>();

		obj.put("result", "SUCCESS");

		AjaxResponse.responseAjaxObject(response, obj);		//"SUCCESS" 전달
	}

	/**
	 *
	 * 지출결의서설정 저장
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	  * @author :  Inhee
    * @date : 2017. 7. 24.
	 */
	@RequestMapping(value = "/approve/processAppvExpenseSetup.do")
	public void processAppvExpenseSetup(HttpSession session
			, @RequestParam Map<String,Object> paramMap
			, @RequestParam(value= "arrUserId",required=false) String[] arrUserId
			, @RequestParam(value= "arrExpenseDay",required=false) String[] arrExpenseDay
			, HttpServletResponse response
			) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		paramMap.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		if(arrUserId != null) paramMap.put("arrUserId", arrUserId);
		if(arrExpenseDay != null) paramMap.put("arrExpenseDay", arrExpenseDay);

		approveSetService.processAppvExpenseSetup(paramMap);

		//return obj
		Map<String,Object> obj = new HashMap<String,Object>();

		obj.put("result", "SUCCESS");

		AjaxResponse.responseAjaxObject(response, obj);		//"SUCCESS" 전달
	}

	/**
	 *
	 * 미결알림 세팅 저장
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	  * @author :  psj
	  * @date : 2017. 11. 02.
	 */
	@RequestMapping(value = "/approve/processAppvAlarmSetup.do")
	public void processAppvAlarmSetup(HttpSession session
			, @RequestParam Map<String,Object> paramMap
			, @RequestParam(value= "appvAlarmSetupType",required=true) String[] appvAlarmSetupTypeArr
			, HttpServletResponse response
			) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		paramMap.put("userId", baseUserLoginInfo.get("userId").toString());

		paramMap.put("appvAlarmSetupTypeArr", appvAlarmSetupTypeArr);

		approveSetService.processAppvAlarmSetup(paramMap);

		//return obj
		Map<String,Object> obj = new HashMap<String,Object>();

		obj.put("result", "SUCCESS");

		AjaxResponse.responseAjaxObject(response, obj);		//"SUCCESS" 전달
	}


}