package ib.board.service.impl;

import ib.cmm.service.impl.ComAbstractDAO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Repository;




import ib.schedule.service.impl.ScheduleVO;


@Repository("boardDAO")
public class BoardDAO extends ComAbstractDAO {

	protected static final Log LOG = LogFactory.getLog(BoardDAO.class);

	/** 관리자 **/
	// 게시판 그룹&카테고리 리스트 받아오기
	@SuppressWarnings("rawtypes")
	public List getGrpCateList() throws Exception {
		return list("boardDAO.getGrpCateList", "");
	}

	// 게시판 그룹 등록을 위한 그룹코드 받아오기
	public String getGrpCd() throws Exception {
		return (String)selectByPk("boardDAO.getGrpCd", "");
	}

	// 게시판 그룹 등록/수정/삭제 완료
	public void grpProcEnd(BoardVO vo) throws Exception {
		insert("boardDAO.grpProcEnd", vo);
	}

	// 게시판 그룹 등록/수정에 따른 순서 업데이트 (기존값 > 변경값)
	public void grpOrderUpEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.grpOrderUpEditEnd", vo);
	}

	// 게시판 그룹 등록/수정에 따른 순서 업데이트 (기존값 < 변경값)
	public void grpOrderDownEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.grpOrderDownEditEnd", vo);
	}

	// 게시판 그룹 삭제에 따른 순서 업데이트
	public void grpOrderEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.grpOrderEditEnd", vo);
	}

	// 게시판 그룹 삭제에 따른 카테고리 삭제
	public void grpCateDelEnd(BoardVO vo) throws Exception {
		update("boardDAO.grpCateDelEnd", vo);
	}

	// 게시판 공개자&수신자 리스트 받아오기
	@SuppressWarnings("rawtypes")
	public List getCateOptPerList() throws Exception {
		return list("boardDAO.getCateOptPerList", "");
	}

	// 게시판 카테고리 등록을 위한 카테고리코드 받아오기
	public String getCateCd(BoardVO vo) throws Exception {
		return (String)selectByPk("boardDAO.getCateCd", vo);
	}

	// 게시판 카테고리 등록/수정/삭제 완료
	public void cateProcEnd(BoardVO vo) throws Exception {
		insert("boardDAO.cateProcEnd", vo);
	}

	// 게시판 공개자&수신자 등록/수정 완료
	@SuppressWarnings("rawtypes")
	public void cateOptProcEnd(List list) throws Exception {
		insert("boardDAO.cateOptProcEnd", list);
	}

	// 그룹 등록/수정에 따른 순서 업데이트 (기존값 > 변경값)
	public void cateOrderUpEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.cateOrderUpEditEnd", vo);
	}

	// 그룹 등록/수정에 따른 순서 업데이트 (기존값 < 변경값)
	public void cateOrderDownEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.cateOrderDownEditEnd", vo);
	}

	// 그룹 삭제에 따른 순서 업데이트
	public void cateOrderEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.cateOrderEditEnd", vo);
	}
	/** 관리자 **/

	/** 타이틀 **/

	// 게시판 리스트 불러오기(카테고리)
	@SuppressWarnings("rawtypes")
	public List getBoardCateList(BoardVO vo) throws Exception {
		return list("boardDAO.getBoardCateList", vo);
	}

	// 선택된 게시판 그룹 정보 받아오기
	public BoardVO getGrpInfo(BoardVO vo) throws Exception {
		return (BoardVO)selectByPk("boardDAO.getGrpInfo", vo);
	}
	/** 타이틀 **/

	/** 게시물 **/
	// 결재진행중 문서 리스트 받아오기
	@SuppressWarnings("rawtypes")
	public List getConfirmIngList(Map<String,Object>map) throws Exception {
		return list("boardDAO.getConfirmIngList", map);
	}

	// 반송된 문서 리스트 받아오기
	@SuppressWarnings("rawtypes")
	public List getReturnList(Map<String,Object>map) throws Exception {
		return list("boardDAO.getReturnList", map);
	}

	// 기간 휴가 등록시 일정시퀀스 프로시저
	public void setScheSeq() throws Exception {
		selectByPk("boardDAO.setScheSeq", "");
	}

	//게시판 리스트 총 건수
	public int getBoardListTotalCount(BoardVO vo) throws Exception {
		return (Integer)selectByPk("boardDAO.selectBoardListTotalCount", vo);
	}

	@SuppressWarnings("rawtypes")
	public List getBoardList(BoardVO vo) throws Exception {
		return list("boardDAO.getBoardList", vo);
	}

	// 게시물 등록을 위한 게시물 코드 받아오기
	public String getWriteCd(BoardVO vo) throws Exception {
		return (String)selectByPk("boardDAO.getWriteCd", vo);
	}

	// 게시물 등록/수정/삭제 완료
	public void boardProcEnd(BoardVO vo) throws Exception {
		insert("boardDAO.boardProcEnd", vo);
	}

	// 게시물 요청관련 담당자&참조인 등록/수정 완료
	@SuppressWarnings("rawtypes")
	public void boardConfirmOptProcEnd(List list) throws Exception {
		insert("boardDAO.boardConfirmOptProcEnd", list);
	}

	// 게시물 요청관련 담당자&참조인 삭제 완료
	public void boardConfirmOptDelEnd(BoardVO vo) throws Exception {
		delete("boardDAO.boardConfirmOptDelEnd", vo);
	}

	// 게시물 파일코드 받아오기
	public int getBoardFileSeq(BoardVO vo) throws Exception {
		return (Integer)selectByPk("boardDAO.getBoardFileSeq", vo);
	}

	// 게시물 파일 등록 완료
	@SuppressWarnings("rawtypes")
	public void boardFileAddEnd(List list) throws Exception {
		insert("boardDAO.boardFileAddEnd", list);
	}

	// 게시물 보고완료처리 완료
	public void boardWriteEnd(BoardVO vo) throws Exception {
		update("boardDAO.boardWriteEnd", vo);
	}

	// 보고서 승인/반송 정보 등록
	public void boardConfirmInfoAddEnd(BoardVO vo) throws Exception {
		insert("boardDAO.boardConfirmInfoAddEnd", vo);
	}

	// 보고서 승인/반송 처리 완료
	public void boardConfirmEnd(BoardVO vo) throws Exception {
//		insert("boardDAO.boardConfirmInfoAddEnd", vo);
//		if(vo.getWriteStatus().equals("return")) update("boardDAO.boardConfirmEnd", vo);
//		if(vo.getConfirmPerSabun().equals(vo.getRegPerSabun())) update("boardDAO.boardConfirmEnd", vo);
		update("boardDAO.boardConfirmEnd", vo);
	}

	// 게시물 정보 받아오기
	public BoardVO getBoardInfo(BoardVO vo) throws Exception {
		return (BoardVO)selectByPk("boardDAO.getBoardInfo", vo);
	}

	// 게시물 요청관련 담당자&참조인 리스트 받아오기
	@SuppressWarnings("rawtypes")
	public List getBoardConfirmOptPerList(BoardVO vo) throws Exception {
		return list("boardDAO.getBoardConfirmOptPerList", vo);
	}

	// 게시물 파일 리스트 받아오기
	@SuppressWarnings("rawtypes")
	public List getBoardFileList(BoardVO vo) throws Exception {
		return list("boardDAO.getBoardFileList", vo);
	}

	// 게시물 파일 정보 받아오기
	public BoardVO getBoardFileInfo(BoardVO vo) throws Exception {
		return (BoardVO)selectByPk("boardDAO.getBoardFileInfo", vo);
	}

	// 게시물 파일 삭제 완료
	public void boardFileDelEnd(BoardVO vo) throws Exception {
		update("boardDAO.boardFileDelEnd", vo);
	}

	// 게시물 조회 정보 등록 완료
	public void boardReadAddEnd(BoardVO vo) throws Exception {
		insert("boardDAO.boardReadAddEnd", vo);
	}

	// 게시물 조회수 업데이트 완료
	public void boardHitEditEnd(BoardVO vo) throws Exception {
		update("boardDAO.boardHitEditEnd", vo);
	}

	// 게시물 조회로그 리스트 불러오기
	@SuppressWarnings("rawtypes")
	public List getBoardReadLogList(BoardVO vo) throws Exception {
		return list("boardDAO.getBoardReadLogList", vo);
	}

	// 게시물 이동 완료
	public void boardMoveEnd(BoardVO vo) throws Exception {
		update("boardDAO.boardMoveEnd", vo);
		update("boardDAO.boardFileMoveEnd", vo);
		update("boardDAO.replyMoveEnd", vo);
		update("boardDAO.replyFileMoveEnd", vo);
		update("boardDAO.readLogMoveEnd", vo);
		update("boardDAO.replyReadLogMoveEnd", vo);
		update("boardDAO.confirmMoveEnd", vo);
		update("boardDAO.confirmInfoMoveEnd", vo);
	}

	// 휴가 취소 보고를 위한 신청한 휴가내역 불러오기
	@SuppressWarnings("rawtypes")
	public List getHoliList(BoardVO vo) throws Exception {
		return list("boardDAO.getHoliList", vo);
	}

	/** 게시물 **/

	/** 댓글 **/
	// 댓글 리스트
	@SuppressWarnings("rawtypes")
	public List getReplyList(BoardVO vo) throws Exception {
		return list("boardDAO.getReplyList", vo);
	}

	// 댓글 파일 리스트
	@SuppressWarnings("rawtypes")
	public List getReplyFileList(BoardVO vo) throws Exception {
		return list("boardDAO.getReplyFileList", vo);
	}

	// 댓글 코드 받아오기
	public String getReplyCd(BoardVO vo) throws Exception {
		return (String)selectByPk("boardDAO.getReplyCd", vo);
	}

	// 댓글 등록/수정/삭제 완료
	public void replyProcEnd(BoardVO vo) throws Exception {
		insert("boardDAO.replyProcEnd", vo);
	}

	// 댓글 파일코드 받아오기
	public int getReplyFileSeq(BoardVO vo) throws Exception {
		return (Integer)selectByPk("boardDAO.getReplyFileSeq", vo);
	}

	// 댓글 파일 등록 완료
	@SuppressWarnings("rawtypes")
	public void replyFileAddEnd(List list) throws Exception {
		insert("boardDAO.replyFileAddEnd", list);
	}

	// 댓글 파일 삭제 완료
	public void replyFileDelEnd(BoardVO vo) throws Exception {
		update("boardDAO.replyFileDelEnd", vo);
	}

	// 댓글 조회 정보 등록 완료
	@SuppressWarnings("rawtypes")
	public void replyReadAddEnd(List list) throws Exception {
		insert("boardDAO.replyReadAddEnd", list);
	}
	/** 댓글 **/

	/*=======================신규 게시판 구현==========================*/

	//게시판 그룹
	public List<Map<String,String>> getBoardGroupList(Map<String, Object> param) throws Exception{
		return list("board.getBoardGroupList", param);
	}

	//게시판 그룹 안에 카테 리스트 ( 및 상세정보)
	public List<Map> getBoardCateList(Map<String, Object> param) throws Exception{
		return list("board.getBoardCateList", param);
	}

	//그룹 Uid 중복검사
	public int countChkGroupUid(Map<String, Object> param) throws Exception{
		return Integer.parseInt(selectByPk("board.countChkGroupUid", param).toString());
	}

	//그룹등록
	public String insertBoardGroup(Map<String, Object> param) throws Exception{
		return insert("board.insertBoardGroup", param).toString();
	}

	//그룹수정
	public void updateBoardGroup(Map<String, Object> param) throws Exception{
		update("board.updateBoardGroup", param);
	}

	//게시판 카테고리 Uid 중복검사
	public int countChkCboardUid(Map<String, Object> param) throws Exception{
		return Integer.parseInt(selectByPk("board.countChkCboardUid", param).toString());
	}

	//게시판 카테고리 등록
	public String insertBoardCate(Map<String, Object> param) throws Exception{
		return insert("board.insertBoardCate", param).toString();
	}

	//게시판 카테고리 수정
	public void updateBoardCate(Map<String, Object> param) throws Exception{
		update("board.updateBoardCate", param);
	}

	//게시판 글 전체 갯수
	public int getBoardContentListCount(Map<String, Object> param) throws Exception{
		return Integer.parseInt(selectByPk("board.getBoardContentListCount", param).toString());
	}

	//게시판 글 리스트
	public List<Map> getBoardContentList(Map<String, Object> param) throws Exception{
		return list("board.getBoardContentList",param);
	}

	//게시판 글 정보
	public List<Map> getBoardContent(Map<String, Object> param) throws Exception{
		return list("board.getBoardContent",param);
	}

	/*//게시판 글 파일리스트
	public List<Map> getBoardContentFileList(Map<String, Object> param) throws Exception{
		return list("board.getBoardContentFileList",param);
	}*/

	//게시판 이전글 정보
	public Object getBoardContentPrev(Map<String, Object> param) throws Exception{
		return selectByPk("board.getBoardContentPrevNext",param);
	}

	//게시판 다음글 정보
	public Object getBoardContentNext(Map<String, Object> param) throws Exception{
		return selectByPk("board.getBoardContentPrevNext",param);
	}

	//게시판 글 등록
	public int insertBoardContent(Map<String, Object> param)throws Exception{
		return Integer.parseInt(insert("board.insertBoardContent", param).toString());
	}

	//게시판 글 수정
	public void updateBoardContent(Map<String, Object> param)throws Exception{
		update("board.updateBoardContent", param);
	}

	//게시판 글 삭제
	public void updateBoardContentDelFlag(Map<String, Object> param)throws Exception{
		update("board.updateBoardContentDelFlag", param);
	}

	//게시판 글 등록
	public int insertBoardComment(Map<String, Object> param)throws Exception{
		return Integer.parseInt(insert("board.insertBoardComment", param).toString());
	}

	//게시판 댓글 리스트
	public List<Map> getBoardCommentList(Map<String, Object> param) throws Exception{
		return list("board.getBoardCommentList",param);
	}

	//게시 댓글 수정
	public void updateBoardComment(Map<String, Object> param)throws Exception{
		update("board.updateBoardComment", param);
	}

	//게시판 글 삭제
	public void updateBoardCommentDelFlag(Map<String, Object> param)throws Exception{
		update("board.updateBoardCommentDelFlag", param);
	}

	//게시판 조회수 올리기
	public void updateViewCount(Map<String, Object> param)throws Exception{
		update("board.updateViewCount", param);
	}

	//공지게시판
	public List<Map> noticeAllForMain(Map<String, Object> param) {
		// TODO Auto-generated method stub
		return list("board.noticeAllForMain",param);
	}


	//업무게시판, 사내게시판
	public List<Map> generalListForMain(Map<String, Object> param) {
		// TODO Auto-generated method stub
		return list("board.generalListForMain", param);
	}

	//유저 열람정보 저장
	public Integer updateReadUserId(Map<String, Object> param) {
		// TODO Auto-generated method stub
		return update("board.updateReadUserId", param);
	}

}