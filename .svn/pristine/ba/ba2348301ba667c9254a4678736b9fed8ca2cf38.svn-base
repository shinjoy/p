package ib.user.service.impl;


import ib.cmm.service.impl.ComAbstractDAO;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import egovframework.rte.psl.dataaccess.util.EgovMap;


/**
 * <pre>
 * package	: ibiss.user.service.impl
 * filename	: UserDAO.java
 * </pre>
 *
 *
 *
 * @author	: oys
 * @date	: 2015. 8. 17.
 * @version :
 *
 */
@Repository("userDAO")
public class UserDAO extends ComAbstractDAO{




	/**
	 * 로그인시 사용자 정보
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2016. 9. 20.
	 */
	public Map<String, Object> getUserLoginInfo(Map<String, Object> map) throws Exception{
        return (Map) getSqlMapClientTemplate().queryForObject("login.selectUserLoginInfo", map);
	}

	/**
	 * 로그인시 사용자 정보
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2016. 9. 20.
	 */
	public Map<String, Object> getBaseUserInfo(Map<String, Object> map) throws Exception{

		List<Map<String,Object>> users = list("login.selectBaseUserInfo", map);

		return users.size()>0?users.get(0):null;
	}



	/**
	 * 사용자 리스트
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @param param
	 * @date		: 2015. 6. 10.
	 */
	@SuppressWarnings("unchecked")
	public List<Map> getUserList(Map<String, Object> param) throws Exception{
		return list("user.selectUserList", param);
	}


	/**
	 * 회사 코드
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 8. 19.
	 */
	public List<Map> getCompanyCode(Map<String, String> param) throws Exception{
		return list("user.selectCompanyCode", param);
	}


	/**
	 * 사용자등록(신규)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 20.
	 */
	public int insertUser(Map<String, Object> map) throws Exception{
		int key = -1;
		Object rslt = insert("user.insertUser", map);
		if(rslt != null)
			key = Integer.parseInt(rslt.toString());

		return key;
	}


	/**
	 * 사용자 대표부서 초기화(없애기)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 23.
	 */
	public void updateDeptMainInit(Map<String, Object> map) throws Exception{
		update("user.updateDeptMainInit", map);
	}


	/**
	 * 사용자 부서장 초기화(없애기)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2016. 10. 10.
	 */
	public void updateDeptManagerInit(Map<String, Object> map) {
		update("user.updateDeptManagerInit", map);
	}


	/**
	 * 부서(직책) 정보 등록
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 17.
	 */
	public void mergeDeptInchargeInfo(Map map) throws Exception{

		update("user.mergeDeptInchargeInfo", map);
	}


	/**
	 * 부서장 정보 등록
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2016. 6. 29.
	 */
	public void mergeDeptManagerInfo(Map map) throws Exception{

		update("user.mergeDeptManagerInfo", map);
	}


	/**
	 * 사용자수정
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 6. 16.
	 */
	public int updateUser(Map<String, Object> map) throws Exception{
		return update("user.updateUser", map);
	}


	/**
	 * 신규 사용자 사번 생성
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 8. 21.
	 */
	public String getNewUserNo(String orgId) throws Exception{

		return selectByPk("user.selectNewEmpNo", orgId).toString();
	}


	/**
	 * 비밀번호 초기화
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 6. 16.
	 */
	public int doInitPwd(Map<String, Object> map) throws Exception{
		return update("user.updateInitPwd", map);
	}

	/**
	 * 접속 유저별 조회 가능한 관계사 리스트
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: psj
	 * @date		: 2016. 10. 12.
	 */
	public List<Map> getAccessOrgIdList(Map baseInfo) throws Exception{
		return list("user.getAccessOrgIdList", baseInfo);
	}

	/**
	 * 전체 관계사 목록
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: psj
	 * @date		: 2016. 10. 12.
	 */
	public List<Map> getOrgIdList(String userId) throws Exception{
		return list("user.getOrgIdList", userId);
	}

	/**
	 * 요청 orgId 의 권한이 있는지 체크
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: psj
	 * @date		: 2016. 10. 12.
	 */
	public Integer getAccessOrgIdCnt(Map<String, Object> map) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("user.getAccessOrgIdCnt", map);
	}

	/**
	 * 소속 관계사의 관계서 접근 설정 값 입력.
	 * @param map
	 */
	public void insertBsRelationCompanyAccessAuth(Map<String, Object> map) {
		// TODO Auto-generated method stub
		insert("user.insertBsRelationCompanyAccessAuth", map);
	}

	/**
	 * 소속 관계사의 접근 권한값 삭제.
	 * @param map
	 */
	public void deleteBsRelationCompanyAccessAuth(Map<String, Object> map){
		delete("user.deleteBsRelationCompanyAccessAuth",map);
	}

	/**
	 * 소속 관계사 접근 권한값있는지 체크
	 * @param map
	 * @return
	 */
	public int selectBsRelationCompanyAccessAuth(Map<String,Object> map){
		return (Integer) getSqlMapClientTemplate().queryForObject("user.selectBsRelationCompanyAccessAuth", map);
	}


	/**
	 * 부서 테이블 데이터 삭제로 업데이트
	 * @param map
	 */
	public void updateUserDepartment(Map<String, Object> map) {
		// TODO Auto-generated method stub
		update("user.updateUserDepartment",map);
	}


	/**
	 * 사용자 등록시 사용자 로그인 아이디 생성
	 * @param param
	 * @return
	 */
	public int getOrgPersabun(Map param){
		return (Integer) super.getSqlMapClientTemplate().queryForObject("user.getOrgPersabun", param);
	}

	/**
	 *  관계사 코드 체크
	 * @param param
	 * @return
	 */
	public Map getOrgCode(Map param){
		return (Map) super.getSqlMapClientTemplate().queryForObject("user.getOrgCode", param);
	}

	/**
	 * 관계사 세부 정보 반환
	 * @param param
	 * @return
	 */
	public Map getOrgInfoForGrouping(Map param){
		return (Map) super.getSqlMapClientTemplate().queryForObject("user.getOrgInfoForGrouping", param);
	}

	/**
	 * 관계사에 속한 그룹핑된 소속회사 리스트 반환.
	 * @param param
	 * @return
	 */
	public List<Map> getGroupingCompanyList(Map param){
		return list("user.getGroupingCompanyList", param);
	}

	/**
	 * 관계사에 속한 그룹핑된 소속회사 갯수 반환
	 * @param param
	 * @return
	 */
	public int getGroupingCompanyListCnt(Map param){
		return (Integer) super.getSqlMapClientTemplate().queryForObject("user.getGroupingCompanyListCnt", param);
	}

	/**
	 * 사용자 등록 - 사용자가 접근 가능한 소속 관계사 리스트 반환.
	 * @param param
	 * @return
	 */
	public List<Map> getAccessOrgInfoList(Map param){
		return list("user.getAccessOrgInfoList", param);
	}

	/**
	 * 사용자 등록 - 사용자가 접근 가능한 소속 관계사 리스트 갯수 반환
	 * @param param
	 * @return
	 */
	public int getAccessOrgInfoListCnt(Map<String, Object> param) {
		// TODO Auto-generated method stub
		return (Integer) super.getSqlMapClientTemplate().queryForObject("user.getAccessOrgInfoListCnt", param);
	}

	/**
	 * 사용자 메인화면 모듈리스트
	 * @param param
	 * @return
	 */
	public List<EgovMap> getModuleList(Map<String,Object> map) throws Exception{
		return list("user.getModuleList",map);
	}



	/**
	 * 소속회사(bs_user_master.company) 를 수정
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2016. 11. 23.
	 */
	public void updateCusCpnByUserModify(Map map) throws Exception{
		update("user.updateCusCpnByUserModify", map);
	}

	//로그인 출근 연동여부를 판단하여 출근처리한다.
	public Integer getUserAttendCnt(Map<String,Object> map) throws Exception{
		return (Integer) super.getSqlMapClientTemplate().queryForObject("user.getUserAttendCnt", map);
	}
	//유저 그룹관리 팝업에서 관계사 or 부서별 유저 조회
	public List<Map> getOrgOrDeptUserList(Map map ) throws Exception{
		return list("user.getOrgOrDeptUserList",map);
	}

	//유저 그룹 생성
	public Integer createUserGroup(Map<String, Object> map) throws Exception{
		int key = -1;
		Object rslt =(Integer)insert("user.createUserGroup", map);
		if(rslt != null)
			key = Integer.parseInt(rslt.toString());
		return key;
	}
	//유저 그룹 수정
	public Integer modifyUserGroup(Map<String,Object> map) throws Exception{
		return (Integer)update("user.modifyUserGroup", map);
	}
	//유저그룹 조회
	public List<Map> getUserGroupList(Map map ) throws Exception{
		return list("user.getUserGroupList",map);
	}
	//유저 그룹별 사용자 리스트 조회
	public List<Map> getGroupDetailUserList(Map map ) throws Exception{
		return list("user.getGroupDetailUserList",map);
	}
	//유저 그룹 삭제
	public Integer deleteUserGroup(Map<String,Object> map) throws Exception{
		return (Integer)delete("user.deleteUserGroup", map);
	}
	//유저 그룹 내역 삭제
	public Integer deleteUserGroupDetail(Map<String,Object> map) throws Exception{
		return (Integer)delete("user.deleteUserGroupDetail", map);
	}
	//유저 그룹 유저 저장
	public Integer insertUserGroupUserList(Map<String, Object> map) throws Exception{
		return (Integer)insert("user.insertUserGroupUserList", map);
	}
	//유저 그룹 복사
	public Integer insertCopyUserGroup(Map<String, Object> map) throws Exception{
		int key = -1;
		Object rslt =(Integer)insert("user.insertCopyUserGroup", map);
		if(rslt != null)
			key = Integer.parseInt(rslt.toString());
		return key;
	}
	//유저 그룹 유저 복사
	public Integer insertCopyUserGroupDetail(Map<String, Object> map) throws Exception{
		return (Integer)insert("user.insertCopyUserGroupDetail", map);
	}
	//유저 그룹 순서변경
	public Integer procUserGroupSortOrder(Map<String,Object> map) throws Exception{
		return (Integer)update("user.procUserGroupSortOrder", map);
	}
	//그룹 삭제시 순서변경
	public Integer updateUserGroupForDelete(Map<String,Object> map) throws Exception{
		return (Integer)update("user.updateUserGroupForDelete", map);
	}
	//유저 프로필박스
	public EgovMap getUserProfile(Map map ) throws Exception{
		return (EgovMap) super.getSqlMapClientTemplate().queryForObject("user.getUserProfile", map);
	}
}