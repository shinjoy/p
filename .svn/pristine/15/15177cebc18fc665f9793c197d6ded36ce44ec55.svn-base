<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="approve">
	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="approveVo" type="ib.approve.service.ApproveVo"/>
	<!-- 연차정보 조회 -->
	<select id="approve.getUserHolidaySum" parameterClass="HashMap" resultClass="egovMap">
		SELECT   LEAVE_ID
				,ORG_ID
				,USER_ID
				,(ANNUAL_LEAVE_DAY+WORK_ANNUAL_LEAVE_DAY+USER_ANNUAL_LEAVE_DAY) AS LEAVE_DAY
				,USED_DAY
				,OVER_USED_DAY
				,CREATED_BY
				,CREATE_DATE
				,UPDATED_BY
				,UPDATE_DATE
		  FROM BS_USER_LEAVE_H
		 WHERE USER_ID = #userId#
         AND   ORG_ID = #orgId#
         AND   YEAR = #year#
	</select>
	<!-- 베이스 정보 인서트 -->
	<insert id = "approve.insertApproveDoc" parameterClass = "HashMap">
		INSERT INTO BS_APPV_DOC
			(
				 ORG_ID
				,PROJECT_ID
				,ACTIVITY_ID
				,APPV_DOC_CLASS
				,APPV_DOC_TYPE
				,APPV_DOC_TYPE_ETC
				,APPV_HEADER_ID
				,USER_ID
				,DOC_TITLE
				,WHY
				,ALL_HALF
				,DATE_FROM
				,DATE_TO
				,MEMO
				,AMOUNT
				,WORK_AGENCY_ID
				,APPV_AGENCY_ID
				,APPROVE_CC_TYPE
				,APPROVE_RC_TYPE
				,SITE_URL
				,APPV_BEFORE_CC_READ_YN
				,APPV_BEFORE_APPROVE_READ_YN
                ,APPV_BEFORE_RECEIVE_READ_YN
				,ATTACH_YN
				,DOC_STATUS
				,SCHE_SEQ
				,INDIVIDUAL_YN
				,WRITER_ID
				,APPV_COMPANY_FORM_ID
				,COMPANY_FILE_USE_YN
				,COMPANY_FILE_USE_TYPE
				,CREATED_BY
				,CREATE_DATE
				,UPDATED_BY
				,UPDATE_DATE
			) VALUES (
				 #orgId#
				,#projectId#
				,#activityId#
				,#appvDocClass#
				,#appvDocType#
				,#appvDocTypeEtc#
				,#appvHeaderId#
				,IF(#selectStaffId# IS NULL , #userId#,#selectStaffId#)
				,CASE WHEN #appvDocClass# ='VACATION' OR #appvDocClass# ='REST'     THEN
                            CONCAT(
                            		(
										CASE WHEN #appvDocType#='ANNUAL' THEN '휴가신청 _ '
										 WHEN #appvDocType#='SICK' THEN '병가신청 _ '
										 WHEN #appvDocType#='REST' THEN '휴직신청 _ '
										 WHEN #appvDocType#='ETC' THEN CONCAT('기타휴가 _ ',(
											                                                 SELECT  Y.VALUE_MEAN_KOR
											                                            	   FROM    BS_CODE_GV Y
											                                           		   WHERE   Y.CODE_NAME = 'APPV_DOC_TYPE_VACATION_ETC'
											                                              		 AND   Y.CODE_VALUE = #appvDocTypeEtc# AND Y.ORG_ID = #orgId#
                                               												),' _ '
                                               									)
										 ELSE '' END
									)
                            		, DATE_FORMAT(STR_TO_DATE(#dateFrom# , '%Y-%m-%d'), '%Y/%m/%d') , '(', CASE DAYOFWEEK(STR_TO_DATE(#dateFrom# , '%Y-%m-%d'))
                                                                                                   WHEN '1' THEN '일'
                                                                                                   WHEN '2' THEN '월'
                                                                                                   WHEN '3' THEN '화'
                                                                                                   WHEN '4' THEN '수'
                                                                                                   WHEN '5' THEN '목'
                                                                                                   WHEN '6' THEN '금'
                                                                                                   WHEN '7' THEN '토' END ,')'
                                                     , IF(#allHalf# = 'ALL',CONCAT(' ~ ',DATE_FORMAT(STR_TO_DATE(#dateTo# , '%Y-%m-%d'), '%Y/%m/%d') , '(', CASE DAYOFWEEK(STR_TO_DATE(#dateTo# , '%Y-%m-%d'))
                                                                                                   WHEN '1' THEN '일'
                                                                                                   WHEN '2' THEN '월'
                                                                                                   WHEN '3' THEN '화'
                                                                                                   WHEN '4' THEN '수'
                                                                                                   WHEN '5' THEN '목'
                                                                                                   WHEN '6' THEN '금'
                                                                                                   WHEN '7' THEN '토' END, ')'
                                                                                    ),
                                               IFNULL((SELECT CONCAT(' ', G.VALUE_MEAN_KOR)
                                                       FROM   BS_CODE_GV G
                                                       WHERE  G.ORG_ID = #orgId#
                                                       AND    G.CODE_NAME = 'ALL_HALF'
                                                       AND    G.CODE_VALUE = #allHalf#
                                                       AND    #allHalf# != 'ALL'), ''))
                                         )
                      WHEN #appvDocClass# ='BUY'    THEN
                                  CONCAT('구매신청 _ ', #why#)
                      WHEN #appvDocClass# ='EDUCATION'    THEN
                                  CONCAT('교육신청 _ ',  #eduName#)
                      WHEN #appvDocClass# ='TRIP'    THEN
                                  CONCAT('출장신청 _ ', #why#)
                      WHEN #appvDocClass# ='EVENT'    THEN
                                  CONCAT('경조신청 _ ', (
                                                 SELECT  Y.VALUE_MEAN_KOR
                                            FROM    BS_FAMILY_EVENT X
                                            INNER JOIN BS_CODE_GV Y ON Y.CODE_NAME = X.CODE_SET_NAME AND Y.CODE_VALUE = X.EVENT_CODE AND Y.ORG_ID = X.ORG_ID
                                            WHERE   X.FAMILY_EVENTS_ID = #familyEventsId#
                                                  AND     X.ORG_ID = #orgId#
                                               )
                                          )
                      WHEN #appvDocClass# ='BASIC' OR #appvDocClass# ='REPORT'    THEN #docTitle#
                      WHEN #appvDocClass# ='EXPENSE'    THEN  CONCAT('지출결의서 _ ', #why#)
                      WHEN #appvDocClass# ='COMPANY'  THEN IFNULL(#why#,#appvDocType#)
                      END
				,#why#
				,#allHalf#
				,#dateFrom#
				,#dateTo#
				,#memo#
				,#amount#
				,#workAgencyId#
				,#appvAgencyId#
				,#approveCcType#
				,#approveRcType#
				,#siteUrl#
				, IFNULL(#appvBeforeCcReadYn#,'N')
				, IFNULL(#appvBeforeApproveReadYn#,'N')
                , IFNULL(#appvBeforeReceiveReadYn#,'N')
				,#attachYn#
				,'WORKING'
				,#scheSeq#
				, IFNULL(#individualYn#,'N')
				,#userId#
				,#appvCompanyFormId#
				,#companyFileUseYn#
				,#companyFileUseType#
				,#userId#
				,NOW()
				,#userId#
				,NOW()
			)
		<selectKey resultClass="int" type="post" keyProperty="appvDocId">
		SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 출장신청 저장 -->
	<insert id="approve.insertTripApprove" parameterClass = "HashMap">
		<![CDATA[
			INSERT INTO BS_APPV_TRIP_DOC
				  (
				     APPV_DOC_ID
					,CST_ID
					,CPN_ID
					,TRIP_LOC
					,TRIP_CAR
					,REPORT_YN
					,ATTEND_YN
		 ) VALUES (
				     #appvDocId#
					,#cstId#
					,#cpnId#
					,#tripLoc#
					,#tripCar#
					,#reportYn#
					,#attendYn#
				  )
		]]>
	</insert>
	<!-- 출장품의서 수정 -->
	<update id = "approve.updateTripApprove" parameterClass = "HashMap">
		UPDATE BS_APPV_TRIP_DOC
	   	   SET 		CST_ID 					= #cstId#
					,CPN_ID					= #cpnId#
					,TRIP_LOC				= #tripLoc#
					,TRIP_CAR				= #tripCar#
					,REPORT_YN				= #reportYn#
					,ATTEND_YN				= #attendYn#
		WHERE APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 품의서 베이스정보 업데이트 -->
	<update id="approve.updateApproveDoc" parameterClass = "HashMap">
		UPDATE BS_APPV_DOC
		   SET   ORG_ID				= #orgId#
		   		,PROJECT_ID			= #projectId#
		   		,ACTIVITY_ID		= #activityId#
				,APPV_DOC_CLASS		= #appvDocClass#
				,APPV_DOC_TYPE		= #appvDocType#
				,APPV_DOC_TYPE_ETC  = #appvDocTypeEtc#
				,APPV_HEADER_ID		= #appvHeaderId#
				,USER_ID			= IF(#selectStaffId# IS NULL , #userId#,#selectStaffId#)
				,DOC_TITLE			= CASE WHEN #appvDocClass# ='VACATION' OR #appvDocClass# ='REST'     THEN
                            CONCAT(
                            		(
										CASE WHEN #appvDocType#='ANNUAL' THEN '휴가신청 _ '
										 WHEN #appvDocType#='SICK' THEN '병가신청 _ '
										 WHEN #appvDocType#='REST' THEN '휴직신청 _ '
										 WHEN #appvDocType#='ETC' THEN CONCAT('기타휴가 _ ',(
											                                                 SELECT  Y.VALUE_MEAN_KOR
											                                            	   FROM    BS_CODE_GV Y
											                                           		   WHERE   Y.CODE_NAME = 'APPV_DOC_TYPE_VACATION_ETC'
											                                              		 AND   Y.CODE_VALUE = #appvDocTypeEtc# AND Y.ORG_ID = #orgId#
                                               												),' _ '
                                               									)
										 ELSE '' END
									)
                            		, DATE_FORMAT(STR_TO_DATE(#dateFrom# , '%Y-%m-%d'), '%Y/%m/%d') , '(', CASE DAYOFWEEK(STR_TO_DATE(#dateFrom# , '%Y-%m-%d'))
                                                                                                   WHEN '1' THEN '일'
                                                                                                   WHEN '2' THEN '월'
                                                                                                   WHEN '3' THEN '화'
                                                                                                   WHEN '4' THEN '수'
                                                                                                   WHEN '5' THEN '목'
                                                                                                   WHEN '6' THEN '금'
                                                                                                   WHEN '7' THEN '토' END ,')'
                                                     , IF(#allHalf# = 'ALL',CONCAT(' ~ ',DATE_FORMAT(STR_TO_DATE(#dateTo# , '%Y-%m-%d'), '%Y/%m/%d') , '(', CASE DAYOFWEEK(STR_TO_DATE(#dateTo# , '%Y-%m-%d'))
                                                                                                   WHEN '1' THEN '일'
                                                                                                   WHEN '2' THEN '월'
                                                                                                   WHEN '3' THEN '화'
                                                                                                   WHEN '4' THEN '수'
                                                                                                   WHEN '5' THEN '목'
                                                                                                   WHEN '6' THEN '금'
                                                                                                   WHEN '7' THEN '토' END, ')'
                                                                                    ),
                                               IFNULL((SELECT CONCAT(' ', G.VALUE_MEAN_KOR)
                                                       FROM   BS_CODE_GV G
                                                       WHERE  G.ORG_ID = #orgId#
                                                       AND    G.CODE_NAME = 'ALL_HALF'
                                                       AND    G.CODE_VALUE = #allHalf#
                                                       AND    #allHalf# != 'ALL'), ''))
                                         )
                      WHEN #appvDocClass# ='BUY'    THEN
                                  CONCAT('구매신청 _ ', #why#)
                      WHEN #appvDocClass# ='EDUCATION'    THEN
                                  CONCAT('교육신청 _ ',  #eduName#)
                      WHEN #appvDocClass# ='TRIP'    THEN
                                  CONCAT('출장신청 _ ', #why#)
                      WHEN #appvDocClass# ='EVENT'    THEN
                                  CONCAT('경조신청 _ ', (
                                                 SELECT  Y.VALUE_MEAN_KOR
                                            FROM    BS_FAMILY_EVENT X
                                            INNER JOIN BS_CODE_GV Y ON Y.CODE_NAME = X.CODE_SET_NAME AND Y.CODE_VALUE = X.EVENT_CODE AND Y.ORG_ID = X.ORG_ID
                                            WHERE   X.FAMILY_EVENTS_ID = #familyEventsId#
                                                  AND     X.ORG_ID = #orgId#
                                               )
                                          )
                      WHEN #appvDocClass# ='BASIC' OR #appvDocClass# ='REPORT'    THEN #docTitle#
                      WHEN #appvDocClass# ='EXPENSE'    THEN  CONCAT('지출결의서 _ ', #why#)
                      WHEN #appvDocClass# ='COMPANY'  THEN IFNULL(#why#,#appvDocType#)
                      END
				,WHY                    =  #why#
				,ALL_HALF               =  #allHalf#
				,DATE_FROM              =  #dateFrom#
				,DATE_TO                =  #dateTo#
				,MEMO                   =  #memo#
				,AMOUNT                 =  #amount#
				,WORK_AGENCY_ID         =  #workAgencyId#
				,APPV_AGENCY_ID         =  #appvAgencyId#
				,APPROVE_CC_TYPE        =  #approveCcType#
				,APPROVE_RC_TYPE        =  #approveRcType#
				,SITE_URL               =  #siteUrl#
				,APPV_BEFORE_CC_READ_YN =  IFNULL(#appvBeforeCcReadYn#,'N')
				,APPV_BEFORE_APPROVE_READ_YN =  IFNULL(#appvBeforeApproveReadYn#,'N')
                ,APPV_BEFORE_RECEIVE_READ_YN =  IFNULL(#appvBeforeReceiveReadYn#,'N')
				,ATTACH_YN              =  #attachYn#
				,SCHE_SEQ				=  #scheSeq#
				,INDIVIDUAL_YN			=  IFNULL(#individualYn#,'N')
				,WRITER_ID              =  #userId#
				,APPV_COMPANY_FORM_ID   =  #appvCompanyFormId#
				,COMPANY_FILE_USE_YN    =  #companyFileUseYn#
				,COMPANY_FILE_USE_TYPE  =  #companyFileUseType#
				,UPDATED_BY             =  #userId#
				,UPDATE_DATE            =  NOW()
		WHERE APPV_DOC_ID = #appvDocId#
	</update>

	<!-- 경조사신청 저장 -->
	<insert id="approve.insertEventApprove" parameterClass = "HashMap">
		<![CDATA[
			INSERT INTO BS_APPV_EVENT_DOC
				  (
				         APPV_DOC_ID
						,FAMILY_EVENTS_ID
						,EVENT_DATE
						,HOLIDAY
		 ) VALUES (
				    	 #appvDocId#
						,#familyEventsId#
						,#eventDate#
						,#holidayYn#
				  )
		]]>
	</insert>
	<!-- 경조사 업데이트 -->
	<update id = "approve.modifyEventApprove" parameterClass = "HashMap">
		UPDATE BS_APPV_EVENT_DOC
		   SET
				 FAMILY_EVENTS_ID = #familyEventsId#
				,EVENT_DATE = #eventDate#
				,HOLIDAY = #holidayYn#
		 WHERE  APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 교육품의서 저장 -->
	<insert id = "approve.insertEducationApprove" parameterClass = "HashMap">
		INSERT INTO BS_APPV_EDUCATION_DOC
			(
				 APPV_DOC_ID
				,EDU_NAME
				,EDU_AGENCY
				,HOUR_FROM
				,HOUR_TO
				,MINUTE_FROM
				,MINUTE_TO
				,EDU_DAY
				,EDU_TIME
				,REPORT_YN
				,ATTEND_YN
			) VALUES (
			   		 #appvDocId#
					,#eduName#
					,#eduAgency#
					,#hourFrom#
					,#hourTo#
					,#minuteFrom#
					,#minuteTo#
					,#eduDay#
					,#eduTime#
					,#reportYn#
					,#attendYn#

			)
	</insert>
	<!-- 교육품의서 수정 -->
	<update id = "approve.modifyEducationApprove" parameterClass = "HashMap">
		UPDATE BS_APPV_EDUCATION_DOC
		   SET   EDU_NAME     =#eduName#
				,EDU_AGENCY   =#eduAgency#
				,HOUR_FROM    =#hourFrom#
				,HOUR_TO      =#hourTo#
				,MINUTE_FROM  =#minuteFrom#
				,MINUTE_TO    =#minuteTo#
				,EDU_DAY      =#eduDay#
				,EDU_TIME     =#eduTime#
				,REPORT_YN    =#reportYn#
				,ATTEND_YN    =#attendYn#
		  WHERE APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 품의참가자 삭제 -->
	<delete id = "approve.deleteEntryWorker" parameterClass = "HashMap">
		DELETE FROM BS_APPV_ENTRY_WORKER
		 WHERE APPV_DOC_ID = #appvDocId#
	</delete>
	<!-- 품의 참조인 삭제 -->
	<delete id = "approve.deleteApproveCc" parameterClass = "HashMap">
		DELETE FROM BS_APPV_CC
		 WHERE APPV_DOC_ID = #appvDocId#
		   AND APPV_DOC_CLASS = #appvDocClass#
	</delete>
	<!-- 품의 수신인 삭제 -->
	<delete id = "approve.deleteApproveRc" parameterClass = "HashMap">
		DELETE FROM BS_APPV_RECEIVER
		 WHERE APPV_DOC_ID = #appvDocId#
		   AND APPV_DOC_CLASS = #appvDocClass#
	</delete>

	<!-- 출장비내역 삭제 -->
	<delete id = "approve.deleteApproveTripList" parameterClass = "HashMap">
		DELETE FROM BS_APPV_TRIP_LIST
		 WHERE APPV_DOC_ID = #appvDocId#
	</delete>

	<!-- 구매물품 삭제 -->
	<delete id = "approve.deleteBuyList" parameterClass = "HashMap">
		DELETE FROM BS_APPV_BUY_LIST
		 WHERE APPV_DOC_ID = #appvDocId#
	</delete>
	<!-- 품의 참조인 저장 -->
	<insert id = "approve.insertApproveCc" parameterClass = "HashMap">
		INSERT INTO BS_APPV_CC
				  (
				      ORG_ID
					 ,APPV_DOC_ID
					 ,APPV_DOC_CLASS
					 ,USER_ID
					)
					<isEqual property="approveCcType" compareValue="MY_ORG_ALL">
					SELECT ORG_ID
						   ,#appvDocId#
						   ,#appvDocClass#
						   ,USER_ID
				     FROM BS_USER_MASTER
				     WHERE  ORG_ID = #orgId#
				      AND   USER_STATUS IN ('W','H')
				      AND   USER_ID != #userId#
					</isEqual>
					<isEqual property="approveCcType" compareValue="MY_TEAM">
					SELECT B.ORG_ID
						   ,#appvDocId#
						   ,#appvDocClass#
						   ,A.USER_ID
				     FROM BS_USER_DEPARTMENT A , BS_USER_MASTER B
				     WHERE  A.DEPT_ID = #deptId#
				      AND A.MAIN_YN = 'Y'
				      AND A.ENABLE = 'Y'
				      AND A.DELETE_FLAG = 'N'
				      AND A.USER_ID != #userId#
				      AND A.USER_ID = B.USER_ID
				      AND B.USER_STATUS IN ('W','H')
					</isEqual>
					<isEqual property="approveCcType" compareValue="SELECT">
						VALUES
						<iterate property="approveCcId" conjunction=",">
							(
								(SELECT X.ORG_ID FROM BS_USER_MASTER X WHERE X.USER_ID = #approveCcId[]#)
							   ,#appvDocId#
							   ,#appvDocClass#
				               ,#approveCcId[]#
				               )
				        </iterate>
					</isEqual>
	</insert>
	<!-- 품의 수신인 저장 -->
	<insert id = "approve.insertApproveRc" parameterClass = "HashMap">
		INSERT INTO BS_APPV_RECEIVER
				  (
				      ORG_ID
					 ,APPV_DOC_ID
					 ,APPV_DOC_CLASS
					 ,USER_ID
					)
					<isEqual property="approveRcType" compareValue="MY_ORG_ALL">
					SELECT ORG_ID
						   ,#appvDocId#
						   ,#appvDocClass#
						   ,USER_ID
				     FROM BS_USER_MASTER
				     WHERE  ORG_ID = #orgId#
				      AND   USER_STATUS IN ('W','H')
				      AND   USER_ID != #userId#
					</isEqual>
					<isEqual property="approveRcType" compareValue="MY_TEAM">
					SELECT B.ORG_ID
						   ,#appvDocId#
						   ,#appvDocClass#
						   ,A.USER_ID
				     FROM BS_USER_DEPARTMENT A , BS_USER_MASTER B
				     WHERE  A.DEPT_ID = #deptId#
				      AND A.MAIN_YN = 'Y'
				      AND A.ENABLE = 'Y'
				      AND A.DELETE_FLAG = 'N'
				      AND A.USER_ID != #userId#
				      AND A.USER_ID = B.USER_ID
				      AND B.USER_STATUS IN ('W','H')
					</isEqual>
					<isEqual property="approveRcType" compareValue="SELECT">
						VALUES
						<iterate property="approveRcId" conjunction=",">
							(
								(SELECT X.ORG_ID FROM BS_USER_MASTER X WHERE X.USER_ID = #approveRcId[]#)
							   ,#appvDocId#
							   ,#appvDocClass#
				               ,#approveRcId[]#
				               )
				        </iterate>
					</isEqual>
	</insert>
	<!-- 품의 참가자 저장 -->
	<insert id = "approve.insertEntryWorker" parameterClass = "HashMap">
		INSERT INTO BS_APPV_ENTRY_WORKER(
								APPV_DOC_ID
								,ORG_ID
								,USER_ID
							)VALUES
						<iterate property="entryId" conjunction=",">
							(
							    #appvDocId#
							   ,(SELECT ORG_ID FROM BS_USER_MASTER WHERE USER_ID = #entryId[]#)
				               ,#entryId[]#
				               )
				        </iterate>
	</insert>

	<!-- 구매신청품의목록저장 -->
	<insert id = "approve.insertBuyList" parameterClass = "HashMap">
		INSERT INTO BS_APPV_BUY_LIST
				  (
				     APPV_DOC_ID
					,ITEM_NM
					,PRICE
					,QTY
					,MEMO
					)
				VALUES
				(
					#appvDocId#
	               ,#itemNm#
	               ,#price#
	               ,#qty#
	               ,#memo#
	               )
	</insert>
	<!-- 지출결의서 지출 품의리스트 저장 -->
	<insert id = "approve.insertExpenseList" parameterClass = "HashMap">
		INSERT INTO BS_APPV_EXPENSE_LIST
				  (
				     APPV_DOC_ID
					,EXPENSE_DATE
					,EXPENSE_CODE_SET_NAME
					,EXPENSE_TYPE
					,PAYMENT_TYPE
					,SUMMARY
					,AMOUNT
					,COMMENT
					,CREATED_BY
					,CREATE_DATE
					,UPDATED_BY
					,UPDATE_DATE
					)
				VALUES
				(
					#appvDocId#
	               ,#expenseDate#
	               ,#expenseCodeSetName#
	               ,#expenseType#
	               ,#paymentType#
	               ,#summary#
	               ,#expenseAmount#
	               ,#comment#
	               ,#userId#
	               ,NOW()
	               ,#userId#
	               ,NOW()
	               )
	</insert>
	<!-- 지출결의서 지출 품의리스트 삭제 -->
	<delete id = "approve.deleteExpenseList" parameterClass = "HashMap">
		DELETE FROM BS_APPV_EXPENSE_LIST WHERE APPV_DOC_ID = #appvDocId#
	</delete>
	<!-- 출장비목록저장 -->
	<insert id = "approve.insertTripList" parameterClass = "HashMap">
		INSERT INTO BS_APPV_TRIP_LIST
				  (
					 APPV_DOC_ID
					,TRIP_TYPE
					,MEMO
					,PRICE
					)
				VALUES
				(
					#appvDocId#
	               ,#tripType#
	               ,#tripMemo#
	               ,#price#
	               )
	</insert>
	<!-- 휴가일수를 차감한다 -->
	<update id = "approve.updateUserHoliSum"  parameterClass="HashMap">
		UPDATE BS_USER_LEAVE_H
		  SET USED_DAY = (USED_DAY + #diffDay#)
		 <isNotEmpty property="overUsedDay">
		 	,OVER_USED_DAY = #overUsedDay#
		 </isNotEmpty>
		 	, UPDATED_BY = #sessionUserId#
		 	, UPDATE_DATE = NOW()
		 WHERE USER_ID = #userId#
		   AND YEAR = #year#
	</update>
	<!-- 휴가이력을저장한다 -->
	<insert id = "approve.insertUserHoliSumHist" parameterClass="HashMap">
		INSERT
		  INTO BS_USER_LEAVE_D (
								     ORG_ID
									,USER_ID
									,DATE_FROM
									,DATE_TO
									,HALF_YN
									,USED_DAY
									,HOLIDAY_CODE
									,OVER_USE_YN
									,CANCEL_YN
									,MEMO
									,CREATED_BY
									,CREATE_DATE
									,UPDATED_BY
									,UPDATE_DATE
		  						) VALUES (
		  							 #orgId#
									,#userId#
									,#dateFrom#
									,#dateTo#
									,#halfYn#
									,#diffDay#
									,#holidayCode#
									,#overUseYn#
									,#cancelYn#
									,#memo#
									,#sessionUserId#
									,NOW()
									,#sessionUserId#
									,NOW()

		  						)
	</insert>

	<!-- 품의서 BASE조회 -->
	<select id = "approve.getApproveDocDetail" parameterClass = "HashMap" resultClass = "egovMap">
		SELECT   A.APPV_DOC_ID
				,A.PROJECT_ID
				,A.ACTIVITY_ID
				,(SELECT NAME FROM BS_PROJECT X WHERE X.PROJECT_ID = A.PROJECT_ID) AS PROJECT_NM
				,(SELECT PROJECT_CODE FROM BS_PROJECT X WHERE X.PROJECT_ID = A.PROJECT_ID) AS PROJECT_CODE
				,(SELECT NAME FROM BS_ACTIVITY Y WHERE Y.ACTIVITY_ID = A.ACTIVITY_ID) AS ACTIVITY_NM
				,A.ORG_ID
				,A.APPV_DOC_CLASS
				,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = A.ORG_ID AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
				,A.APPV_DOC_TYPE
				,(SELECT X.VALUE_MEAN_KOR
		            FROM BS_CODE_GV X
		           WHERE X.ORG_ID =  A.ORG_ID
		             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
		             AND X.CODE_VALUE = A.APPV_DOC_TYPE) AS APPV_DOC_TYPE_NM
		        ,A.APPV_DOC_TYPE_ETC
		        ,(SELECT Y.VALUE_MEAN_KOR
              	    FROM    BS_CODE_GV Y
             		WHERE   Y.CODE_NAME = 'APPV_DOC_TYPE_VACATION_ETC'
                	  AND   Y.CODE_VALUE = A.APPV_DOC_TYPE_ETC AND Y.ORG_ID = A.ORG_ID) AS APPV_DOC_TYPE_ETC_NM
		        ,A.APPV_HEADER_ID
		        ,(SELECT X.APPV_DOC_TYPE FROM BS_APPROVE_HEADER X WHERE X.APPV_HEADER_ID = A.APPV_HEADER_ID) AS APPV_DOC_TYPE_SELECT
				,A.USER_ID
				,A.DOC_TITLE AS TITLE
				,A.WHY
				,A.ALL_HALF
				,A.DATE_FROM
				,A.DATE_TO
				,A.MEMO
				,A.AMOUNT
				,A.WORK_AGENCY_ID
				,A.APPV_AGENCY_ID
				,A.APPROVE_CC_TYPE
				,A.APPROVE_RC_TYPE
				,A.SITE_URL
				,A.APPV_BEFORE_CC_READ_YN
				,A.APPV_BEFORE_APPROVE_READ_YN
                ,A.APPV_BEFORE_RECEIVE_READ_YN
				,A.ATTACH_YN
				,A.DOC_STATUS
				,A.APPV_DOC_NUM
				,A.INDIVIDUAL_YN
				,A.SUBMIT_DATE
				,(SELECT COUNT(*) FROM BS_APPV_RECEIVER RC WHERE RC.APPV_DOC_ID=A.APPV_DOC_ID) AS TOT_RECEIPT_CNT
				,(SELECT COUNT(*) FROM BS_APPV_RECEIVER RC WHERE RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.READ_DATE IS NOT NULL) AS RC_RECEIPT_CNT
				,(SELECT X.NAME FROM BS_APPV_RECEIVER RC , BS_USER_MASTER X
				   WHERE RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.RECEIPT_YN ='Y' AND RC.USER_ID = X.USER_ID) AS RC_RECEIPT_NAME
				,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
				,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE =A.DOC_STATUS) AS DOC_STATUS_NM
				,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID =  A.ORG_ID
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
                ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                              FROM   BS_USER_DEPARTMENT Y
                                                                              WHERE  Y.USER_ID = A.USER_ID
                                                                              AND    Y.MAIN_YN = 'Y'
                                                                              AND    Y.ENABLE = 'Y'
                                                                              AND    Y.DELETE_FLAG = 'N'
                                                                              )
                ) AS USER_DEPT_NM
                ,(SELECT X.MOBILE_TEL FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS MOBILE_TEL
                /* APPV_AGENCY */
				,A.APPV_AGENCY_ID
               ,(SELECT X.NAME      FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_AGENCY_ID) APPV_AGENCY_NM
               ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                             FROM   BS_USER_DEPARTMENT Y
                                                                             WHERE  Y.USER_ID = A.APPV_AGENCY_ID
                                                                             AND    Y.MAIN_YN = 'Y'
                                                                             AND    Y.ENABLE = 'Y'
                                                                             AND    Y.DELETE_FLAG = 'N'
                                                                             )
                ) AS APPV_AGENCY_DEPT_NM
               ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID =  A.ORG_ID
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_AGENCY_ID)) AS APPV_AGENCY_RANK_NM
                /* APPV_AGENCY */
                /* WORK_AGENCY */
				,A.WORK_AGENCY_ID
               ,(SELECT X.NAME      FROM BS_USER_MASTER X WHERE X.USER_ID = A.WORK_AGENCY_ID) WORK_AGENCY_NM
               ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                             FROM   BS_USER_DEPARTMENT Y
                                                                             WHERE  Y.USER_ID = A.WORK_AGENCY_ID
                                                                             AND    Y.MAIN_YN = 'Y'
                                                                             AND    Y.ENABLE = 'Y'
                                                                             AND    Y.DELETE_FLAG = 'N'
                                                                             )
                ) AS WORK_AGENCY_DEPT_NM
               ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID =  A.ORG_ID
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.WORK_AGENCY_ID)) AS WORK_AGENCY_RANK_NM
                /* WORK_AGENCY */
                 /* =============================================== Common */
                ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID =  A.ORG_ID
                 AND    G.CODE_NAME = 'ALL_HALF'
                 AND    G.CODE_VALUE = A.ALL_HALF) AS ALL_HALF_NM
                ,DATEDIFF(A.DATE_TO,A.DATE_FROM)+1 as DIFF_DAY
                ,A.APPV_CANCEL_MEMO
                ,A.SCHE_SEQ
                ,IF(A.SCHE_SEQ IS NOT NULL ,
                	(SELECT CONCAT (E.SCHE_E_MONTH,'/',E.SCHE_E_DAY,' ',E.SCHE_E_TIME,' ',E.SCHE_TITLE) AS SCHE_TITLE
						FROM  ERP_SCHEDULE AS E
					   WHERE  E.SCHE_SEQ = A.SCHE_SEQ)
                	,''
                ) AS SCHE_TITLE
				,A.CREATED_BY
				,(SELECT NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) CREATED_NM
				,A.CREATE_DATE
				,A.UPDATED_BY
				,A.UPDATE_DATE
				,A.WRITER_ID
				,(SELECT NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) WRITER_NM
				,A.APPV_COMPANY_FORM_ID
				,A.COMPANY_FILE_USE_YN
				,A.COMPANY_FILE_USE_TYPE
				,(SELECT X.CST_NM FROM IB_CUSTOMER X WHERE X.S_NB = B.CST_ID) AS CST_NM
                ,B.CPN_ID
                ,(SELECT X.CPN_NM FROM IB_COMPANY X WHERE X.CPN_ID = B.CPN_ID) AS CPN_NM
				,B.TRIP_LOC
				,B.TRIP_CAR
				,B.REPORT_YN AS REPORT_TRIP_YN
				,B.ATTEND_YN as ATTEND_TRIP_YN
				,C.EDU_NAME
				,C.EDU_AGENCY
				,C.HOUR_FROM
				,C.HOUR_TO
				,C.MINUTE_FROM
				,C.MINUTE_TO
				,C.EDU_DAY
				,C.EDU_TIME
				,C.REPORT_YN
				,C.ATTEND_YN
				,D.FAMILY_EVENTS_ID
				,(
                    SELECT  Y.VALUE_MEAN_KOR
                    FROM    BS_FAMILY_EVENT X
                    INNER JOIN BS_CODE_GV Y ON Y.CODE_NAME = X.CODE_SET_NAME AND Y.CODE_VALUE = X.EVENT_CODE AND Y.ORG_ID = X.ORG_ID
                    WHERE   X.FAMILY_EVENTS_ID = D.FAMILY_EVENTS_ID
                    AND     X.ORG_ID = A.ORG_ID
                  ) AS FAMILY_EVENTS_NM
                ,E.HOLIDAY AS FAMILY_EVENTS_HOLIDAY
                ,E.PERIOD AS FAMILY_EVENT_PERIOD
                ,E.AMOUNT AS FAMILY_EVENTS_AMOUNT
                ,D.EVENT_DATE
                ,D.HOLIDAY
                ,P.NAME AS projectNm
            	,Q.NAME AS activityNm
                ,DATE_FORMAT(Q.START_DATE, '%Y-%m-%d')  AS activityStartDate
            	,DATE_FORMAT(IF(Q.END_DATE <![CDATA[<=]]> P.CLOSE_DATE, Q.END_DATE, P.CLOSE_DATE),'%Y-%m-%d')  AS activityEndDate
            	,DATE_FORMAT(P.START_DATE,'%Y-%m-%d') AS projectStartDate
            	,DATE_FORMAT(IF(P.END_DATE <![CDATA[<=]]> P.CLOSE_DATE, P.END_DATE, P.CLOSE_DATE),'%Y-%m-%d') AS lastDate
            	,(SELECT MIN(X.APPV_PROCESS_ID)
            	    FROM BS_APPROVAL_LINE_FLOW_V  X
            	   WHERE X.ORG_ID         =  A.ORG_ID
            	   	 AND A.APPV_DOC_ID   = X.APPV_DOC_ID
		             AND (X.NOW_APPV_ASSIGN_ID = #userId#)
		             AND X.APPV_STATUS NOT IN ('APPROVE','REJECT')
		            ) AS APPV_PROCESS_ID
		        ,F.CHARGE_TYPE
		        ,F.EXPENSE_YN
		        ,F.EXPENSE_DAY
		        ,F.ADVANCE_WISH_YN
		        ,F.ADVANCE_WISH_DATE
		        ,F.ADVANCE_WISH_REASON
		        ,F.TAX_BILL_ISSUE_DATE
		        ,(SELECT X.APPV_STATUS
		        	FROM BS_APPROVAL_LINE_FLOW_V X
		           WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		             AND X.APPV_STATUS NOT IN ('WAIT','REQ')
		           ORDER BY APPV_PROCESS_ID DESC
		           LIMIT 1
		         ) AS LAST_APPV_STATUS																									/*마지막 결재자 승인,반려상태*/
		        ,IF(F.EXPENSE_YN = 'Y' ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = F.EXPENSE_PAY_USER_ID),'')  AS EXPENSE_USER_NM	/*지출처리자이름*/
		        ,IF((SELECT COUNT(*)
		        	FROM BS_APPV_RECEIVER X
		        	WHERE A.APPV_DOC_ID = X.APPV_DOC_ID
		        	  AND X.USER_ID = #userId#) >0 , 'Y' , 'N') AS RECEIVER_USER_YN
		        ,(SELECT COUNT(*)
					FROM BS_APPROVAL_LINE_FLOW_V X
				   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
				     AND X.NOW_APPV_ASSIGN_ID = #userId#
				     AND X.APPV_ASSIGN_ID!=#userId#
				     AND X.APPV_STATUS NOT IN ('APPROVE','REJECT')
				  ) AS DUP_ASSIGN_CNT

		 FROM   BS_APPV_DOC A
		LEFT OUTER JOIN BS_APPV_TRIP_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
		LEFT OUTER JOIN BS_APPV_EDUCATION_DOC C ON A.APPV_DOC_ID = C.APPV_DOC_ID
		LEFT OUTER JOIN BS_APPV_EVENT_DOC D ON A.APPV_DOC_ID = D.APPV_DOC_ID
		LEFT OUTER JOIN BS_FAMILY_EVENT E ON E.FAMILY_EVENTS_ID = D.FAMILY_EVENTS_ID AND     E.ORG_ID = A.ORG_ID
		LEFT OUTER JOIN BS_APPV_EXPENSE_DOC F ON F.APPV_DOC_ID = A.APPV_DOC_ID
		LEFT OUTER JOIN BS_ACTIVITY Q ON A.ACTIVITY_ID = Q.ACTIVITY_ID
		LEFT OUTER JOIN BS_PROJECT P ON A.PROJECT_ID = P.PROJECT_ID
		WHERE   A.APPV_DOC_ID = #appvDocId#
	</select>

	<!--기안문서 summary -->
	<select id = "approve.getDraftSummary" parameterClass="HashMap" resultClass="egovMap">
		SELECT   Z.WORKING_CNT
		        ,Z.SUBMIT_CNT
		        ,Z.APPROVE_CNT
		        ,Z.REJECT_CNT
		        ,Z.COMMIT_CNT
		        ,Z.CNL_SUBMIT_CNT
		        ,Z.CNL_REJECT_CNT
		        ,Z.CNL_COMMIT_CNT
		        ,(SELECT COUNT(*)
	        		FROM BS_APPV_RECEIVER X,BS_APPV_DOC A
	           		WHERE A.ORG_ID = #orgId#
					  AND A.USER_ID =#userId#
                	  AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
				 	  AND A.APPROVE_RC_TYPE='SELECT'
	             	  AND A.APPV_DOC_ID = X.APPV_DOC_ID
	             	  AND X.RECEIPT_YN = 'Y') RECEIVER_CONFIRM_CNT
				,(SELECT COUNT(*)
	        	    FROM (
				        	SELECT GROUP_CONCAT(X.RECEIPT_YN SEPARATOR ',') AS CONCAT_STR
				        	  FROM BS_APPV_RECEIVER X,BS_APPV_DOC A
				        	 WHERE 	 A.ORG_ID = #orgId#
							   AND   A.USER_ID =#userId#
                 			   AND   A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
							   AND	 A.APPROVE_RC_TYPE='SELECT'
			        	   	   AND 	 A.APPV_DOC_ID = X.APPV_DOC_ID
			        	 ) Y
			     WHERE Y.CONCAT_STR NOT LIKE '%Y%'
	        ) RECEIVER_NOT_CONFIRM_CNT
	   FROM (
		SELECT   /* Approved List Summary */
	         IFNULL(SUM(IF(A.DOC_STATUS = 'WORKING', 1, 0)), 0) 	WORKING_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'SUBMIT' , 1, 0)), 0) 	SUBMIT_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'APPROVE', 1, 0)), 0) 	APPROVE_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'REJECT' , 1, 0)), 0) 	REJECT_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'COMMIT' , 1, 0)), 0) 	COMMIT_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'CNL_SUBMIT' , 1, 0)), 0) CNL_SUBMIT_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'CNL_REJECT' , 1, 0)), 0) CNL_REJECT_CNT
	        ,IFNULL(SUM(IF(A.DOC_STATUS = 'CNL_COMMIT' , 1, 0)), 0) CNL_COMMIT_CNT
		FROM   BS_APPV_DOC A
		WHERE   A.ORG_ID = #orgId#
          AND   A.USER_ID = #userId#
         ) Z
	</select>

	<!--결재문서 summary -->
	<select id = "approve.getReqSummary" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* Approve Target List Summary */
		         IFNULL(SUM(IF(APPV_STATUS = 'REQ'         , 1, 0)), 0) REQ_CNT
		        ,IFNULL(SUM(IF(APPV_STATUS = 'REQ_ACENCY'  , 1, 0)), 0) REQ_ACENCY_CNT /*결재대행*/
		        ,IFNULL(SUM(IF(APPV_STATUS = 'APPROVE'     , 1, 0)), 0) APPROVE_CNT
		        ,IFNULL(SUM(IF(APPV_STATUS = 'REJECT'      , 1, 0)), 0) REJECT_CNT
		        ,IFNULL(SUM(IF(APPV_STATUS = 'ENTRUST'     , 1, 0)), 0) ENTRUST_CNT
		FROM    (
		            SELECT  /* Approval Line Flow */
		                    A.APPV_ASSIGN_ID        /* 원결재자 */
		                   ,A.APPV_EMP_ID           /* 실졀재자 */
		                   ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                   ,IF(A.APPV_ASSIGN_ID = A.NOW_APPV_ASSIGN_ID, A.APPV_STATUS   /* 내결제건이면서 결재라인이 나로 되어 있는 경우 */
		                                                              , IF(A.APPV_ASSIGN_ID = #userId#, 'ENTRUST'  /* 내 결재건인데 결재라인이 다른사람으로 되어 있는 경우 대행요청한건임 */
		                                                                                              , IF(A.APPV_STATUS = 'REQ', 'REQ_ACENCY', A.APPV_STATUS) /* 내 결재건이 아닌데 나한테 요청이 와 있는 경우 대행, 나머지는 유지*/
		                                                                  )
		                      ) APPV_STATUS
		            FROM    BS_APPROVAL_LINE_FLOW_V  A
		            WHERE   A.ORG_ID         = #orgId#
		            AND     (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)
		            AND     A.APPV_STATUS != 'WAIT' /* 대기 제외 */
		        )  A
	</select>

	<!--기안문서총개수 -->
	<select id = "approve.getDraftDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* Approved List Cnt..*/
	         COUNT(*)
		FROM  BS_APPV_DOC A
		WHERE   1=1
		AND   IF(A.APPV_DOC_CLASS = 'COMPANY',EXISTS (SELECT X.APPV_COMPANY_FORM_ID
		  												  FROM BS_APPV_COMPANY_FORM X
		  												 WHERE   X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_FORM_ID
		  												 AND X.OPEN_YN = 'Y'
						  								 AND X.DELETE_FLAG = 'N'),1=1)
        <isNotEmpty property="secretYn">
            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                AND A.ORG_ID = #orgId#
                AND IF(A.DOC_STATUS = 'WORKING' , CREATED_BY = #userId# , A.USER_ID = #userId# OR A.WRITER_ID = #userId#)
            </isEqual>
            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
                AND A.ORG_ID = #applyOrgId#
            </isEqual>
       </isNotEmpty>
       <isEmpty property="secretYn">
          AND A.ORG_ID = #orgId#
          AND IF(A.DOC_STATUS = 'WORKING' , A.CREATED_BY = #userId# , A.USER_ID = #userId# OR A.WRITER_ID = #userId#)
        </isEmpty>
		<isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS = #searchDocStatus#            /* 검색조건으로 온다면 */
		</isNotEmpty>
		<isNotEmpty property="searchRcStatus">
			<isEqual property="searchRcStatus" compareValue="RECEIVER_CONFIRM">
				AND (SELECT COUNT(*)
	        		FROM BS_APPV_RECEIVER X
	           		WHERE A.APPV_DOC_ID =X.APPV_DOC_ID
                	  AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
	             	  AND X.RECEIPT_YN = 'Y') >0
			</isEqual>
			<isEqual property="searchRcStatus" compareValue="RECEIVER_NOT_CONFIRM">
				AND (SELECT COUNT(*)
	        	       FROM (
				        	SELECT GROUP_CONCAT(X.RECEIPT_YN SEPARATOR ',') AS CONCAT_STR
				        	  FROM BS_APPV_RECEIVER X,BS_APPV_DOC A
				        	 WHERE 	 A.APPV_DOC_ID = X.APPV_DOC_ID
                 			   AND   A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
			        	 ) Y
			     	 WHERE Y.CONCAT_STR NOT LIKE '%Y%') >0
			</isEqual>
		</isNotEmpty>

		<isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR  EXISTS (
										SELECT Y.NAME
										  FROM BS_APPV_CC X
										INNER JOIN BS_USER_MASTER Y
										  	    ON X.USER_ID = Y.USER_ID
										 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
										   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
										SELECT Y.NAME
										  FROM BS_APPV_EXPENSE_MANAGER_SETUP X
										INNER JOIN BS_USER_MASTER Y
										  	    ON X.USER_ID = Y.USER_ID
										 WHERE  X.ORG_ID = A.ORG_ID
										   AND  Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCCC"> <!-- 수신인 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPV_CC X
							INNER JOIN BS_USER_MASTER Y
							  	    ON X.USER_ID = Y.USER_ID
							 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
						)
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCEXPENSEUSER"> <!-- 지급인 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPV_EXPENSE_MANAGER_SETUP X
							INNER JOIN BS_USER_MASTER Y
							  	    ON X.USER_ID = Y.USER_ID
							 WHERE Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							   AND X.ORG_ID = A.ORG_ID
						)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
		</isNotEmpty>
		<isEqual property="approveDraftIngYn" compareValue="Y">
			AND A.DOC_STATUS !='WORKING'
		</isEqual>
		<isEqual property="approveDraftIngYn" compareValue="N">
			AND A.DOC_STATUS ='WORKING'
		</isEqual>
		<isEqual property="searchMainCnt" compareValue="Y">
			AND A.DOC_STATUS IN ('SUBMIT','APPROVE','CNL_SUBMIT')
		</isEqual>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.ORG_ID = #applyOrgId#
		</isEqual>


	</select>

	<!--기안문서 List -->
	<select id = "approve.getDraftDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* Approved List */
	         A.APPV_DOC_ID
	        ,A.ORG_ID
	        ,A.APPV_DOC_CLASS
	        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
	        ,A.APPV_DOC_TYPE
	        ,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
													            FROM BS_CODE_GV X
													           WHERE X.ORG_ID = #orgId#
													             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
													             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
				) AS APPV_DOC_TYPE_NM
	        ,A.DOC_STATUS
	        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
	        ,A.USER_ID
	        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
	        ,IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) AS CREATE_DATE
	        ,A.DOC_TITLE AS TITLE
	       ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT
		    ,A.APPV_DOC_NUM
		    ,A.USER_ID
		    ,A.WRITER_ID
		    ,(SELECT X.APPV_HEADER_NAME FROM BS_APPROVE_HEADER X WHERE X.APPV_HEADER_ID = A.APPV_HEADER_ID) AS APPV_HEADER_ID_NM
		    ,A.INDIVIDUAL_YN
		    ,A.PROJECT_ID
		    ,A.ACTIVITY_ID
		    ,A.APPV_HEADER_ID
		    ,A.SUBMIT_DATE
		    ,(SELECT FAMILY_EVENTS_ID FROM BS_APPV_EVENT_DOC X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID) AS FAMILY_EVENTS_ID
		    ,IF(A.DOC_STATUS IN ('COMMIT','REJECT','CNL_COMMIT','CNL_REJECT') , A.UPDATE_DATE , NULL) AS APPV_END_DATE
		    ,B.EXPENSE_YN
		    ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = B.EXPENSE_PAY_USER_ID) AS EXPENSE_USER_NM
		    ,(SELECT X.NAME FROM  BS_USER_MASTER X
				   WHERE  RC.USER_ID = X.USER_ID) AS RC_RECEIPT_NAME
			,(SELECT COUNT(*) FROM BS_APPV_RECEIVER X WHERE X.APPV_DOC_ID=A.APPV_DOC_ID ) RECEIVER_CNT
			,RC.USER_ID AS RC_RECEIPT_ID
			<isEqual property="approveDraftIngYn" compareValue="Y">
			,IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>3,'Y','N') AS NEW_YN
			</isEqual>
			<isEqual property="approveDraftIngYn" compareValue="N">
			,'Y' AS NEW_YN
			</isEqual>
		FROM    BS_APPV_DOC A
		LEFT OUTER JOIN BS_APPV_EXPENSE_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
		LEFT OUTER JOIN BS_APPV_RECEIVER RC ON  RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.RECEIPT_YN ='Y'
		WHERE   1=1
		  AND   IF(A.APPV_DOC_CLASS = 'COMPANY',EXISTS (SELECT X.APPV_COMPANY_FORM_ID
		  												  FROM BS_APPV_COMPANY_FORM X
		  												 WHERE   X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_FORM_ID
		  												 AND X.OPEN_YN = 'Y'
						  								 AND X.DELETE_FLAG = 'N'),1=1)
		<isNotEmpty property="secretYn">
            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                AND A.ORG_ID = #orgId#
                AND IF(A.DOC_STATUS = 'WORKING' , A.CREATED_BY = #userId# , A.USER_ID = #userId# OR A.WRITER_ID = #userId#)
            </isEqual>
            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
                AND A.ORG_ID = #applyOrgId#
            </isEqual>
       </isNotEmpty>
       <isEmpty property="secretYn">
          AND A.ORG_ID = #orgId#
          AND IF(A.DOC_STATUS = 'WORKING' , A.CREATED_BY = #userId# , A.USER_ID = #userId# OR A.WRITER_ID = #userId#)
        </isEmpty>
		<isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS = #searchDocStatus#            /* 검색조건으로 온다면 */
		</isNotEmpty>


		<isNotEmpty property="searchRcStatus">
			<isEqual property="searchRcStatus" compareValue="RECEIVER_CONFIRM">
				AND (SELECT COUNT(*)
	        		FROM BS_APPV_RECEIVER X
	           		WHERE A.APPV_DOC_ID =X.APPV_DOC_ID
                	  AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
	             	  AND X.RECEIPT_YN = 'Y') >0
			</isEqual>
			<isEqual property="searchRcStatus" compareValue="RECEIVER_NOT_CONFIRM">
				AND (SELECT COUNT(*)
	        	       FROM (
				        	SELECT GROUP_CONCAT(X.RECEIPT_YN SEPARATOR ',') AS CONCAT_STR
				        	  FROM BS_APPV_RECEIVER X,BS_APPV_DOC A
				        	 WHERE 	 A.APPV_DOC_ID = X.APPV_DOC_ID
                 			   AND   A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
			        	 ) Y
			     	 WHERE Y.CONCAT_STR NOT LIKE '%Y%') >0
			</isEqual>
		</isNotEmpty>



		<isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR  EXISTS (
										SELECT Y.NAME
										  FROM BS_APPV_CC X
										INNER JOIN BS_USER_MASTER Y
										  	    ON X.USER_ID = Y.USER_ID
										 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
										   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
										SELECT Y.NAME
										  FROM BS_APPV_EXPENSE_MANAGER_SETUP X
										INNER JOIN BS_USER_MASTER Y
										  	    ON X.USER_ID = Y.USER_ID
										 WHERE  X.ORG_ID = A.ORG_ID
										   AND  Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCCC"> <!-- 수신인 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPV_CC X
							INNER JOIN BS_USER_MASTER Y
							  	    ON X.USER_ID = Y.USER_ID
							 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
						)
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCEXPENSEUSER"> <!-- 지급인 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPV_EXPENSE_MANAGER_SETUP X
							INNER JOIN BS_USER_MASTER Y
							  	    ON X.USER_ID = Y.USER_ID
							 WHERE Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							   AND X.ORG_ID = A.ORG_ID
						)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
		</isNotEmpty>


		<isEqual property="approveDraftIngYn" compareValue="Y">
			AND A.DOC_STATUS !='WORKING'
		</isEqual>
		<isEqual property="approveDraftIngYn" compareValue="N">
			AND A.DOC_STATUS ='WORKING'
		</isEqual>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.ORG_ID = #applyOrgId#
		</isEqual>

		<isEqual property="approveDraftIngYn" compareValue="Y">
			ORDER BY A.SUBMIT_DATE DESC
		</isEqual>
		<isEqual property="approveDraftIngYn" compareValue="N">
			ORDER BY A.CREATE_DATE DESC
		</isEqual>

		<isNotEqual property="recordCountPerPage" compareValue="0">
			LIMIT #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>
	<!--결재문서총개수 -->
	<select id = "approve.getReqDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* Approved Target List CNT */
		         COUNT(*)
		FROM    (
		            SELECT  A.APPV_PROCESS_ID
		                   ,A.ORG_ID
		                   ,A.APPV_DOC_ID
		                   ,A.APPV_DOC_CLASS
		                   ,A.APPV_STATUS
		                   ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                   ,A.APPV_EMP_ID           /* 실졀재자 */
		                   ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                   ,A.CREATE_DATE
		                   ,B.APPV_DOC_TYPE
		                   ,B.USER_ID
		                   ,B.DOC_STATUS
		                   ,B.DOC_TITLE AS TITLE
		                   ,B.DOC_TITLE
		                   ,B.APPV_DOC_NUM
		                   ,B.MEMO
		                   ,B.DATE_TO
		                   ,B.WRITER_ID
		                   ,B.UPDATE_DATE
		            FROM    (
		                    SELECT  /* Approval Line Flow */
		                            A.APPV_PROCESS_ID
		                           ,A.ORG_ID
		                           ,A.APPV_DOC_ID
		                           ,A.APPV_DOC_CLASS
		                           ,IF(A.APPV_ASSIGN_ID = A.NOW_APPV_ASSIGN_ID, A.APPV_STATUS   /* 내결제건이면서 결재라인이 나로 되어 있는 경우 */
		                                                                      , IF(A.APPV_ASSIGN_ID = #userId#, 'ENTRUST'  /* 내 결재건인데 결재라인이 다른사람으로 되어 있는 경우 대행요청한건임 */
		                                                                                                      , IF(A.APPV_STATUS = 'REQ', 'REQ_ACENCY', A.APPV_STATUS) /* 내 결재건이 아닌데 나한테 오청이 와 있는 경우 대행, 나머지는 유지*/
		                                                                          )
		                              ) APPV_STATUS
		                           ,A.APPV_STATUS AS REAL_APPV_STATUS
		                           ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                           ,A.APPV_EMP_ID           /* 실졀재자 */
		                           ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                           ,A.CREATE_DATE
		                           ,A.APPV_SEQ AS NOW_APPV_SEQ
		                           ,A.APPV_CLASS
		                    FROM    BS_APPROVAL_LINE_FLOW_V  A
		                    WHERE   1=1

					        <isNotEmpty property="secretYn">
					            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
					                AND     (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)
					            </isEqual>
					            <isEqual property="secretYn" compareValue="A">        /* 전체보기 */
									<isEqual property="listType" compareValue="allList">
							         	AND A.ORG_ID = #searchOrdId#
							        </isEqual>
							        <isNotEqual property="listType" compareValue="allList">
							        	AND A.ORG_ID = #applyOrgId#
							        </isNotEqual>
							    </isEqual>
					       </isNotEmpty>
					       <isEmpty property="secretYn">
					          AND     (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)
					        </isEmpty>
		                    ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID   = B.APPV_DOC_ID AND B.DOC_STATUS    != 'WORKING'
		                    WHERE 1=1
		                    <isEqual property="listType" compareValue="pendList">
			                      AND (   A.REAL_APPV_STATUS  = 'REQ'
			                     	  OR (
			                     	  		  (SELECT X.DOC_STATUS FROM BS_APPV_DOC X WHERE A.APPV_DOC_ID = X.APPV_DOC_ID) = 'CNL_SUBMIT'
			                     	  	  AND (
			                     	  	  		(SELECT COUNT(*)
      	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
      	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
      	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
      	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
      	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
         	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
         	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
         	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
         	  	  				  		     					)
         	  	  				  		   			AND Y.CANCEL_COMMENT IS NULL
      	  	  									 )>0

      	  	  									 OR (
      	  	  									 		(SELECT COUNT(*)
               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
               	  	  									   AND Y.APPV_CLASS = 'APPROVAL'
               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
                  	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
                  	  	  				  		     					)
                  	  	  				  		   			AND Y.CANCEL_COMMENT IS NOT NULL
               	  	  									 )>0
               	  	  									AND
               	  	  									(SELECT COUNT(*)
               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
               	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
               	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
                  	  	  				  		       					  AND K.APPV_CLASS = 'AGREE'
                  	  	  				  		     					)
                  	  	  				  		   AND Y.CANCEL_COMMENT IS NULL
               	  	  									 )>0
      	  	  									 	)
			                     	  	  		)
			                     	  	  )
			                     	  )

		                    </isEqual>
		                    <isEqual property="listType" compareValue="reqList">
			                     AND     A.APPV_EMP_ID = #userId# /* 승인이나 반려한것만 */
		                    </isEqual>
		                    <isEqual property="listType" compareValue="proxyList">
		                    	 AND A.APPV_EMP_ID IS NOT NULL
		                    	 AND A.APPV_EMP_ID != A.APPV_ASSIGN_ID
		                    </isEqual>
		                    <isEqual property="listType" compareValue="nextList">
		                    	 AND EXISTS ((SELECT X.APPV_ASSIGN_ID
		                    	 				FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 				WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 				  AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
		                    	 				  AND X.APPV_STATUS IN ('APPROVE','REJECT')
		                    	 				  AND (X.NOW_APPV_ASSIGN_ID != #userId# AND X.APPV_ASSIGN_ID != #userId#)
		                    	 			))
		                    	 AND APPV_EMP_ID IS NULL
		                    </isEqual>
		                    <isEqual property="listType" compareValue="previous">
		                    	AND B.APPV_BEFORE_APPROVE_READ_YN = 'Y'
		                    	 AND A.REAL_APPV_STATUS NOT IN ('REQ','APPROVE','REJECT') /*요청건제외*/
		                    	 AND B.DOC_STATUS NOT IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
		                    	 AND (SELECT X.APPV_STATUS
		                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 	     AND A.NOW_APPV_SEQ <![CDATA[>]]> X.APPV_SEQ
		                    	 	    ORDER BY APPV_SEQ DESC LIMIT 1
		                    	 	 ) NOT IN ('APPROVE','REJECT')
		                    	 AND NOT EXISTS (SELECT X.APPV_STATUS
				                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
				                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
				                    	 	     AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
				                    	 	     AND X.APPV_STATUS IN ('APPROVE','REJECT')
				                    	 	 	)
		                    	 AND IF(A.APPV_CLASS = 'AGREE',(SELECT X.APPV_EMP_ID FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 								  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 								   AND X.APPV_CLASS = 'APPROVAL'
		                    	 								   ORDER BY X.APPV_SEQ DESC LIMIT 1) IS NOT NULL
		                    	 								   ,1=1
		                    	 								)
		                    </isEqual>
		                    <isEqual property="listType" compareValue="allList">
					         	AND B.ORG_ID = #searchOrdId#
					        </isEqual>
		                    GROUP BY A.APPV_DOC_ID
		        )  A
		WHERE   1 = 1

		<isNotEmpty property="searchAppvStatus">
			<isEqual property="searchAppvStatus" compareValue="REQ">
        		AND     A.APPV_STATUS IN ('REQ','REQ_ACENCY')
        	</isEqual>
        	<isNotEqual property="searchAppvStatus" compareValue="REQ">
        		AND     A.APPV_STATUS = #searchAppvStatus#    /* 검색조건에 있으면 */
        	</isNotEqual>
        </isNotEmpty>
		<isNotEmpty property="searchDocStatus">
		AND     IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) = #searchDocStatus# /* 검색조건으로 온다면 */
		</isNotEmpty>

		<isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="REQAPPROVEUSER"> <!-- 원결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
							 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="REALAPPROVEUSER"> <!-- 결재실행자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.APPV_EMP_ID = Y.USER_ID)
							 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchApplyOrgId" compareValue="Y">
				AND A.ORG_ID = #applyOrgId#
			</isEqual>
		</isNotEmpty>
	</select>
	<!--승인취소문서 List -->
	<select id = "approve.getCancelDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT
	         A.APPV_DOC_ID
	        ,A.ORG_ID
	        ,A.APPV_DOC_CLASS
	        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
	        ,A.APPV_DOC_TYPE
	        ,(SELECT X.VALUE_MEAN_KOR
		            FROM BS_CODE_GV X
		           WHERE X.ORG_ID = #orgId#
		             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
		             AND X.CODE_VALUE = A.APPV_DOC_TYPE) AS APPV_DOC_TYPE_NM
	        ,A.DOC_STATUS
	        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
	        ,A.USER_ID
	        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
	        ,IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) AS CREATE_DATE
	        ,A.DOC_TITLE AS TITLE
	       ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT
		    ,A.APPV_DOC_NUM
		FROM    BS_APPV_DOC A

		WHERE   1=1
		<isNotEmpty property="secretYn">
            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                AND A.ORG_ID = #orgId#
            </isEqual>
            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
                AND A.ORG_ID = #applyOrgId#
            </isEqual>
       </isNotEmpty>
       <isEmpty property="secretYn">
          AND A.ORG_ID = #orgId#
        </isEmpty>


		AND     A.APPV_CANCEL_MEMO IS NOT NULL
		<isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS = #searchDocStatus#            /* 검색조건으로 온다면 */
		</isNotEmpty>
		<isNotEmpty property="searchTitle">
		AND     A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%') /* 검색조건으로 온다면 */
		</isNotEmpty>
		ORDER BY IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) DESC

		<isNotEqual property="recordCountPerPage" compareValue="0">
			LIMIT #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>
	<!--승인취소문서 총개수 -->
	<select id = "approve.getCancelDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT
	         COUNT(*)
		FROM    BS_APPV_DOC A

		WHERE   1=1
		<isNotEmpty property="secretYn">
            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                AND A.ORG_ID = #orgId#
            </isEqual>
            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
                AND A.ORG_ID = #applyOrgId#
            </isEqual>
       </isNotEmpty>
       <isEmpty property="secretYn">
          AND A.ORG_ID = #orgId#
        </isEmpty>

		AND     A.APPV_CANCEL_MEMO IS NOT NULL
		<isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS = #searchDocStatus#            /* 검색조건으로 온다면 */
		</isNotEmpty>
		<isNotEmpty property="searchTitle">
		AND     A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%') /* 검색조건으로 온다면 */
		</isNotEmpty>
	</select>
	<!--결재문서 List -->
	<select id = "approve.getReqDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* approve.getReqDocList*/
				 A.APPV_DOC_ID
		        ,A.APPV_PROCESS_ID   /* 결재처리 할때 사용 */
		        ,A.ORG_ID
		        , (SELECT Y.CPN_NM FROM BS_ORG X, IB_COMPANY Y WHERE X.COMPANY_SNB = Y.S_NB AND X.ORG_ID = A.ORG_ID) AS ORG_NM
		        ,A.APPV_DOC_ID
		        ,A.APPV_DOC_CLASS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
		        ,A.APPV_DOC_TYPE
		        ,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
													            FROM BS_CODE_GV X
													           WHERE X.ORG_ID =  A.ORG_ID
													             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
													             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
				) AS APPV_DOC_TYPE_NM																						/*문서종류*/
		        ,IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) AS DOC_STATUS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = A.ORG_ID AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS)) AS DOC_STATUS_NM
		        ,A.USER_ID																									/*대상자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM								/*대상자이름*/
		        ,A.WRITER_ID																									/*작성자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) AS WRITER_NM								/*작성자이름*/
		        ,A.APPV_STATUS																								/**/
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'APPV_STATUS' AND X.CODE_VALUE = A.APPV_STATUS) AS APPV_STATUS_NM
		        ,A.APPV_ASSIGN_ID																							/*원결재자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_ASSIGN_ID) AS APPV_ASSIGN_NM					/*원결재자 이름*/
		        ,A.APPV_EMP_ID																								/*실재결재자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_EMP_ID) AS APPV_EMP_ID_NM					/*실재결재자 이름*/
		        ,A.NOW_APPV_ASSIGN_ID																						/*현재결재자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.NOW_APPV_ASSIGN_ID) AS NOW_APPV_ASSIGN_ID_NM		/*현재결재자 이름*/
		        ,A.CREATE_DATE																								/*작성일*/
		        ,A.TITLE																									/*제목*/
		        ,A.SUBMIT_DATE																								/*상신일*/
		        ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT																					/*댓글개수*/
		        ,CASE WHEN #listType# = 'pendList' THEN <isEqual property="ruleUseYn" compareValue="Y">
		        										CASE WHEN #readTimeYn# = 'Y' THEN 'Y'
			                     		  					 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y' , 'N')
			                     		  					 ELSE 'N'
			                     		  					 END
			                     		  				</isEqual>
			                     		  				<isEqual property="ruleUseYn" compareValue="N">
															'N'
														</isEqual>
			          WHEN #listType# = 'previous' THEN <isEqual property="ruleUseYn" compareValue="Y">
			          									CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_USER_ID IS NULL OR A.READ_USER_ID NOT LIKE CONCAT('%|',#userId#,'|%') ,'Y' , 'N')
								                     		 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y' , 'N')
								                     		 ELSE 'N'
								                     	  	 END
								                     	</isEqual>
								                     	<isEqual property="ruleUseYn" compareValue="N">
															'N'
														</isEqual>
					  WHEN #listType# = 'nextList' THEN <isEqual property="ruleUseYn" compareValue="Y">
			          									CASE WHEN #readTimeYn# = 'Y' THEN IF(A.APPV_STATUS NOT IN ('APPROVE','REJECT') ,'Y' , 'N')
								                     		 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y' , 'N')
								                     		 ELSE 'N'
								                     	  	 END
								                     	</isEqual>
								                     	<isEqual property="ruleUseYn" compareValue="N">
															'N'
														</isEqual>
					  ELSE IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>3,'Y','N')
					  END AS NEW_YN																							/*New*/
				,A.APPV_DOC_NUM																								/*문서번호*/
				,A.DATE_TO
				,IFNULL((SELECT (SELECT Y.NAME FROM BS_USER_MASTER Y WHERE X.APPV_EMP_ID = Y.USER_ID) AS LAST_APPV_EMP_NM			/*마지막결재한사람*/
					FROM BS_APPROVAL_LINE_FLOW_V X
				  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
				    AND X.APPV_EMP_ID IS NOT NULL
				  ORDER BY APPV_SEQ DESC
				  LIMIT 1),'-') AS LAST_APPV_EMP_NM
				,(SELECT MAX(X.UPDATE_DATE)
			        FROM BS_APPV_PROCESS X
			       WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
			         AND X.APPV_STATUS NOT IN ('WAIT','REQ')
			     ) AS APPV_CURRENT_DATE																							/*최근결재일*/																			/*마지막결재자*/
				,IF(A.DOC_STATUS IN ('COMMIT','REJECT','CNL_COMMIT','CNL_REJECT') , A.UPDATE_DATE , NULL) AS APPV_END_DATE						/*종결일*/																/*종결일*/
			    ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) AS WRITER_NM
			    ,(SELECT (SELECT Y.NAME FROM BS_USER_MASTER Y WHERE Y.USER_ID = X.NOW_APPV_ASSIGN_ID)
			        FROM BS_APPROVAL_LINE_FLOW_V X
			       WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
			         AND X.APPV_STATUS = 'REQ'
			         AND A.DOC_STATUS IN ('SUBMIT','APPROVE')
			       ORDER BY APPV_SUB_SEQ LIMIT 1
			     ) AS APPV_REQ_NM																							/*현재 결재자*/
			     ,(SELECT   Y.KOR_NAME
                                           FROM     BS_USER_DEPARTMENT X
                                                   ,BS_DEPARTMENT      Y
                                           WHERE    X.USER_ID = A.WRITER_ID
                                           AND      X.MAIN_YN = 'Y'
                                           AND      X.ENABLE = 'Y'
                                           AND      X.DELETE_FLAG = 'N'
                                           AND      Y.DEPT_ID = X.DEPT_ID) AS WRITER_DEPT_NM								/*상신부서*/
		FROM    (
		            SELECT  A.APPV_PROCESS_ID
		                   ,A.ORG_ID
		                   ,A.APPV_DOC_ID
		                   ,A.APPV_DOC_CLASS
		                   ,A.APPV_STATUS
		                   ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                   ,A.APPV_EMP_ID           /* 실졀재자 */
		                   ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                   ,A.CREATE_DATE
		                   ,B.APPV_DOC_TYPE
		                   ,B.USER_ID
		                   ,B.DOC_STATUS
		                   ,B.DOC_TITLE AS TITLE
		                   ,B.DOC_TITLE
		                   ,B.APPV_DOC_NUM
		                   ,B.MEMO
		                   ,B.DATE_TO
		                   ,B.WRITER_ID
		                   ,B.UPDATE_DATE
		                   ,B.READ_USER_ID
		                   ,B.SUBMIT_DATE
		            FROM    (
		                    SELECT  /* Approval Line Flow */
		                            A.APPV_PROCESS_ID
		                           ,A.ORG_ID
		                           ,A.APPV_DOC_ID
		                           ,A.APPV_DOC_CLASS
		                           ,IF(A.APPV_ASSIGN_ID = A.NOW_APPV_ASSIGN_ID, A.APPV_STATUS   /* 내결제건이면서 결재라인이 나로 되어 있는 경우 */
		                                                                      , IF(A.APPV_ASSIGN_ID = #userId#, 'ENTRUST'  /* 내 결재건인데 결재라인이 다른사람으로 되어 있는 경우 대행요청한건임 */
		                                                                                                      , IF(A.APPV_STATUS = 'REQ', 'REQ_ACENCY', A.APPV_STATUS) /* 내 결재건이 아닌데 나한테 오청이 와 있는 경우 대행, 나머지는 유지*/
		                                                                          )
		                              ) APPV_STATUS
		                           ,A.APPV_STATUS AS REAL_APPV_STATUS
		                           ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                           ,A.APPV_EMP_ID           /* 실졀재자 */
		                           ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                           ,A.CREATE_DATE
		                           ,A.APPV_SEQ AS NOW_APPV_SEQ
		                           ,A.APPV_CLASS
		                    FROM    BS_APPROVAL_LINE_FLOW_V  A
		                    WHERE   1=1

					        <isNotEmpty property="secretYn">
					            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                                    AND     (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)
					            </isEqual>

								<isEqual property="secretYn" compareValue="A">        /* 전체보기 */
									<isEqual property="listType" compareValue="allList">
							         	AND A.ORG_ID = #searchOrdId#
							        </isEqual>
							        <isNotEqual property="listType" compareValue="allList">
							        	AND A.ORG_ID = #applyOrgId#
							        </isNotEqual>
								</isEqual>
					       </isNotEmpty>
					       <isEmpty property="secretYn">
					          AND     (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)
					        </isEmpty>
		                    ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID   = B.APPV_DOC_ID AND B.DOC_STATUS    != 'WORKING'
		                    WHERE 1=1
		                    <isEqual property="listType" compareValue="pendList">
			                     AND (   A.REAL_APPV_STATUS  = 'REQ'
			                     	  OR (
			                     	  		  (SELECT X.DOC_STATUS FROM BS_APPV_DOC X WHERE A.APPV_DOC_ID = X.APPV_DOC_ID) = 'CNL_SUBMIT'
			                     	  	  AND (
			                     	  	  		(SELECT COUNT(*)
      	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
      	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
      	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
      	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
      	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
         	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
         	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
         	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
         	  	  				  		     					)
         	  	  				  		   			AND Y.CANCEL_COMMENT IS NULL
      	  	  									 )>0

      	  	  									 OR (
      	  	  									 		(SELECT COUNT(*)
               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
               	  	  									   AND Y.APPV_CLASS = 'APPROVAL'
               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
                  	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
                  	  	  				  		     					)
                  	  	  				  		   			AND Y.CANCEL_COMMENT IS NOT NULL
               	  	  									 )>0
               	  	  									AND
               	  	  									(SELECT COUNT(*)
               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
               	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
               	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
                  	  	  				  		       					  AND K.APPV_CLASS = 'AGREE'
                  	  	  				  		     					)
                  	  	  				  		   AND Y.CANCEL_COMMENT IS NULL
               	  	  									 )>0
      	  	  									 	)
			                     	  	  		)
			                     	  	  )
			                     	  )
		                    </isEqual>
		                    <isEqual property="listType" compareValue="reqList">
			                     AND     A.APPV_EMP_ID = #userId# /* 승인이나 반려한것만 */
		                    </isEqual>
		                    <isEqual property="listType" compareValue="proxyList">
		                    	 AND A.APPV_EMP_ID IS NOT NULL
		                    	 AND A.APPV_EMP_ID != A.APPV_ASSIGN_ID
		                    </isEqual>
		                    <isEqual property="listType" compareValue="nextList">
		                    	 AND EXISTS ((SELECT X.APPV_ASSIGN_ID
		                    	 				FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 				WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 				  AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
		                    	 				  AND X.APPV_STATUS IN ('APPROVE','REJECT')
		                    	 				  AND (X.NOW_APPV_ASSIGN_ID != #userId# AND X.APPV_ASSIGN_ID != #userId#)
		                    	 			))
		                    	 AND APPV_EMP_ID IS NULL
		                    </isEqual>
		                    <isEqual property="listType" compareValue="previous">
		                    	 AND B.APPV_BEFORE_APPROVE_READ_YN = 'Y'
		                    	 AND A.REAL_APPV_STATUS NOT IN ('REQ','APPROVE','REJECT') /*요청건제외*/
		                    	 AND B.DOC_STATUS NOT IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
		                    	 AND (SELECT X.APPV_STATUS
		                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 	     AND A.NOW_APPV_SEQ <![CDATA[>]]> X.APPV_SEQ
		                    	 	    ORDER BY APPV_SEQ DESC LIMIT 1
		                    	 	 ) NOT IN ('APPROVE','REJECT')
		                    	 AND NOT EXISTS (SELECT X.APPV_STATUS
				                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
				                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
				                    	 	     AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
				                    	 	     AND X.APPV_STATUS IN ('APPROVE','REJECT')
				                    	 	 	)
		                    	 AND IF(A.APPV_CLASS = 'AGREE',(SELECT X.APPV_EMP_ID FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 								  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 								   AND X.APPV_CLASS = 'APPROVAL'
		                    	 								   ORDER BY X.APPV_SEQ DESC LIMIT 1) IS NOT NULL
		                    	 								   ,1=1
		                    	 								)
		                    </isEqual>
		                    <isEqual property="listType" compareValue="allList">
					         	AND B.ORG_ID = #searchOrdId#
					        </isEqual>
		                    GROUP BY A.APPV_DOC_ID

		        )  A
		WHERE   1 = 1

		<isNotEmpty property="searchAppvStatus">
			<isEqual property="searchAppvStatus" compareValue="REQ">
        		AND     A.APPV_STATUS IN ('REQ','REQ_ACENCY')
        	</isEqual>
        	<isNotEqual property="searchAppvStatus" compareValue="REQ">
        		AND     A.APPV_STATUS = #searchAppvStatus#    /* 검색조건에 있으면 */
        	</isNotEqual>
        </isNotEmpty>
		<isNotEmpty property="searchDocStatus">
		AND     IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) = #searchDocStatus# /* 검색조건으로 온다면 */
		</isNotEmpty>

		<isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="REQAPPROVEUSER"> <!-- 원결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
							 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="REALAPPROVEUSER"> <!-- 결재실행자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.APPV_EMP_ID = Y.USER_ID)
							 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
		</isNotEmpty>
		<isEqual property="searchApplyOrgId" compareValue="Y">
				AND A.ORG_ID = #applyOrgId#
			</isEqual>
		<isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
           ORDER BY A.SUBMIT_DATE DESC
        </isEqual>
        <isNotEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
           ORDER BY IF(A.APPV_STATUS = 'REQ' OR A.APPV_STATUS = 'REQ_ACENCY', 0, 1), A.SUBMIT_DATE DESC
        </isNotEqual>

		<isNotEqual property="recordCountPerPage" compareValue="0">
			LIMIT #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>


	<!--메인화면 결재문서 List -->
	<select id = "approve.getReqDocListForMain" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* approve.getReqDocList*/
				 A.APPV_DOC_ID
		        ,A.APPV_PROCESS_ID   /* 결재처리 할때 사용 */
		        ,A.ORG_ID
		        ,A.APPV_DOC_ID
		        ,A.APPV_DOC_CLASS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = A.ORG_ID AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
		        ,A.APPV_DOC_TYPE
		        ,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
													            FROM BS_CODE_GV X
													           WHERE X.ORG_ID =  A.ORG_ID
													             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
													             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
				) AS APPV_DOC_TYPE_NM																						/*문서종류*/
		        ,IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) AS DOC_STATUS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS)) AS DOC_STATUS_NM
		        ,A.USER_ID																									/*대상자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM								/*대상자이름*/
		        ,A.WRITER_ID																									/*작성자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) AS WRITER_NM								/*작성자이름*/
		        ,A.APPV_STATUS																								/**/
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'APPV_STATUS' AND X.CODE_VALUE = A.APPV_STATUS) AS APPV_STATUS_NM
		        ,A.APPV_ASSIGN_ID																							/*원결재자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_ASSIGN_ID) AS APPV_ASSIGN_NM					/*원결재자 이름*/
		        ,A.APPV_EMP_ID																								/*실재결재자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_EMP_ID) AS APPV_EMP_ID_NM					/*실재결재자 이름*/
		        ,A.NOW_APPV_ASSIGN_ID																						/*현재결재자*/
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.NOW_APPV_ASSIGN_ID) AS NOW_APPV_ASSIGN_ID_NM		/*현재결재자 이름*/
		        ,A.SUBMIT_DATE   AS   CREATE_DATE																			/*상신일*/
		        ,CASE WHEN A.LIST_TYPE = 'reqList' THEN CONCAT('(기결)',A.TITLE)
		        	  WHEN A.LIST_TYPE = 'proxyList' THEN CONCAT('(대결)',A.TITLE)
		        	  WHEN A.LIST_TYPE = 'pendList' THEN CONCAT('(미결)',A.TITLE)
		        	  WHEN A.LIST_TYPE = 'nextList' THEN CONCAT('(후결)',A.TITLE)
		        	  WHEN A.LIST_TYPE = 'previous' THEN CONCAT('(선열)',A.TITLE)
		         END AS TITLE
		        ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT
			    ,   A.LIST_TYPE																					/*댓글개수*/
		        ,	CASE WHEN A.LIST_TYPE = 'pendList' THEN <isEqual property="ruleUseYn" compareValue="Y">
		        										CASE WHEN #readTimeYn# = 'Y' THEN 'Y'
			                     		  					 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y' , 'N')
			                     		  					 ELSE 'N'
			                     		  					 END
			                     		  				</isEqual>
			                     		  				<isEqual property="ruleUseYn" compareValue="N">
															'N'
														</isEqual>
			          WHEN A.LIST_TYPE = 'previous' THEN <isEqual property="ruleUseYn" compareValue="Y">
			          									CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_USER_ID IS NULL OR A.READ_USER_ID NOT LIKE CONCAT('%|',#userId#,'|%') ,'Y' , 'N')
								                     		 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y' , 'N')
								                     		 ELSE 'N'
								                     	  	 END
								                     	</isEqual>
								                     	<isEqual property="ruleUseYn" compareValue="N">
															'N'
														</isEqual>
					  WHEN A.LIST_TYPE = 'nextList' THEN <isEqual property="ruleUseYn" compareValue="Y">
			          									CASE WHEN #readTimeYn# = 'Y' THEN IF(A.APPV_STATUS NOT IN ('APPROVE','REJECT') ,'Y' , 'N')
								                     		 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y' , 'N')
								                     		 ELSE 'N'
								                     	  	 END
								                     	</isEqual>
								                     	<isEqual property="ruleUseYn" compareValue="N">
															'N'
														</isEqual>
					  ELSE IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>3,'Y','N')
					  END AS NEW_YN																							/*New*/
				,A.APPV_DOC_NUM																								/*문서번호*/
				,A.DATE_TO

		FROM    (
		            SELECT  A.APPV_PROCESS_ID
		                   ,A.ORG_ID
		                   ,A.APPV_DOC_ID
		                   ,A.APPV_DOC_CLASS
		                   ,A.APPV_STATUS
		                   ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                   ,A.APPV_EMP_ID           /* 실졀재자 */
		                   ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                   ,A.CREATE_DATE
		                   ,B.APPV_DOC_TYPE
		                   ,B.USER_ID
		                   ,B.DOC_STATUS
		                   ,B.DOC_TITLE AS TITLE
		                   ,B.DOC_TITLE
		                   ,B.APPV_DOC_NUM
		                   ,B.MEMO
		                   ,B.DATE_TO
		                   ,B.WRITER_ID
		                   ,B.SUBMIT_DATE
		                   ,B.UPDATE_DATE
		                   ,CASE 	WHEN A.APPV_EMP_ID IS NOT NULL AND A.APPV_EMP_ID != A.APPV_ASSIGN_ID THEN 'proxyList'
		                   			WHEN (   A.REAL_APPV_STATUS  = 'REQ'
						                     	  OR (
						                     	  		  (SELECT X.DOC_STATUS FROM BS_APPV_DOC X WHERE A.APPV_DOC_ID = X.APPV_DOC_ID) = 'CNL_SUBMIT'
						                     	  	  AND (
						                     	  	  		(SELECT COUNT(*)
			      	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
			      	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
			      	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
			      	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
			      	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
			         	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
			         	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
			         	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
			         	  	  				  		     					)
			         	  	  				  		   			AND Y.CANCEL_COMMENT IS NULL
			      	  	  									 )>0

			      	  	  									 OR (
			      	  	  									 		(SELECT COUNT(*)
			               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
			               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
			               	  	  									   AND Y.APPV_CLASS = 'APPROVAL'
			               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
			                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
			                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
			                  	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
			                  	  	  				  		     					)
			                  	  	  				  		   			AND Y.CANCEL_COMMENT IS NOT NULL
			               	  	  									 )>0
			               	  	  									AND
			               	  	  									(SELECT COUNT(*)
			               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
			               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
			               	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
			               	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
			               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
			                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
			                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
			                  	  	  				  		       					  AND K.APPV_CLASS = 'AGREE'
			                  	  	  				  		     					)
			                  	  	  				  		   AND Y.CANCEL_COMMENT IS NULL
			               	  	  									 )>0
			      	  	  									 	)
						                     	  	  		)
						                     	  	  )
						                     	  )
					                     	   THEN 'pendList'
					                 	 WHEN A.APPV_EMP_ID = #userId# /* 승인이나 반려한것만 */ THEN 'reqList'
					                 	 WHEN EXISTS ((SELECT X.APPV_ASSIGN_ID
		                    	 				FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 				WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 				  AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
		                    	 				  AND X.APPV_STATUS IN ('APPROVE','REJECT')
		                    	 				  AND (X.NOW_APPV_ASSIGN_ID != #userId# AND X.APPV_ASSIGN_ID != #userId#)
		                    	 				  AND A.APPV_EMP_ID IS NULL
		                    	 				)) THEN 'nextList'
		                    	 		 WHEN B.APPV_BEFORE_APPROVE_READ_YN = 'Y'
						                    	 AND B.APPV_BEFORE_APPROVE_READ_YN = 'Y'
						                    	 AND A.REAL_APPV_STATUS NOT IN ('REQ','APPROVE','REJECT') /*요청건제외*/
						                    	 AND B.DOC_STATUS NOT IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
						                    	 AND (SELECT X.APPV_STATUS
						                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
						                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						                    	 	     AND A.NOW_APPV_SEQ <![CDATA[>]]> X.APPV_SEQ
						                    	 	    ORDER BY APPV_SEQ DESC LIMIT 1
						                    	 	 ) NOT IN ('APPROVE','REJECT')
						                    	 AND NOT EXISTS (SELECT X.APPV_STATUS
								                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
								                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
								                    	 	     AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
								                    	 	     AND X.APPV_STATUS IN ('APPROVE','REJECT')
								                    	 	 	)
						                    	 AND IF(A.APPV_CLASS = 'AGREE',(SELECT X.APPV_EMP_ID FROM BS_APPROVAL_LINE_FLOW_V X
						                    	 								  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						                    	 								   AND X.APPV_CLASS = 'APPROVAL'
						                    	 								   ORDER BY X.APPV_SEQ DESC LIMIT 1) IS NOT NULL
						                    	 								   ,1=1
						                    	 								)
					                    	 THEN 'previous'
					                    END AS LIST_TYPE
					            ,B.READ_USER_ID
		            FROM    (
		                    SELECT  /* Approval Line Flow */
		                            A.APPV_PROCESS_ID
		                           ,A.ORG_ID
		                           ,A.APPV_DOC_ID
		                           ,A.APPV_DOC_CLASS
		                           ,IF(A.APPV_ASSIGN_ID = A.NOW_APPV_ASSIGN_ID, A.APPV_STATUS   /* 내결제건이면서 결재라인이 나로 되어 있는 경우 */
		                                                                      , IF(A.APPV_ASSIGN_ID = #userId#, 'ENTRUST'  /* 내 결재건인데 결재라인이 다른사람으로 되어 있는 경우 대행요청한건임 */
		                                                                                                      , IF(A.APPV_STATUS = 'REQ', 'REQ_ACENCY', A.APPV_STATUS) /* 내 결재건이 아닌데 나한테 오청이 와 있는 경우 대행, 나머지는 유지*/
		                                                                          )
		                              ) APPV_STATUS
		                           ,A.APPV_STATUS AS REAL_APPV_STATUS
		                           ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                           ,A.APPV_EMP_ID           /* 실졀재자 */
		                           ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                           ,A.CREATE_DATE
		                           ,A.APPV_SEQ AS NOW_APPV_SEQ
		                           ,A.APPV_CLASS
		                    FROM    BS_APPROVAL_LINE_FLOW_V  A
		                    WHERE   1=1

				          	 AND    (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)

		                    ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID   = B.APPV_DOC_ID AND B.DOC_STATUS    != 'WORKING'
		                    WHERE 1=1
		                    ORDER BY IF(LIST_TYPE = 'pendList' ,0,1)
		        )  A
		WHERE   1 = 1
		  AND   A.LIST_TYPE IS NOT NULL
		  <isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.ORG_ID = #applyOrgId#
			</isEqual>
		GROUP BY A.APPV_DOC_ID
		ORDER BY IF(A.APPV_STATUS = 'REQ' OR A.APPV_STATUS = 'REQ_ACENCY', 0, 1), A.CREATE_DATE DESC

		<isNotEqual property="recordCountPerPage" compareValue="0">
			LIMIT #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>

	<!--참조문서총개수 -->
	<select id = "approve.getRefDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* Approved CC List CNT */
                 COUNT(*)
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,B.APPV_DOC_TYPE
                           ,B.USER_ID
                           ,B.DOC_STATUS
                           ,(SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE A.ORG_ID = X.ORG_ID AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.APPV_DOC_CLASS = X.APPV_DOC_CLASS LIMIT 0, 1) AS CREATE_DATE
                           ,B.DOC_TITLE AS TITLE
                           ,B.DOC_TITLE
                           ,B.WRITER_ID
                           ,B.MEMO
                           ,B.APPV_DOC_NUM
                           ,B.ORG_ID AS WRITE_ORG_ID
                    FROM    (
                            SELECT  /* Approval Line Flow */
                                    A.ORG_ID
                                   ,A.APPV_DOC_ID
                                   ,A.APPV_DOC_CLASS
                            FROM    BS_APPV_CC  A
                            WHERE   1=1
                            <isNotEmpty property="secretYn">
                                <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                                    AND     A.USER_ID = #userId#
                                </isEqual>
                                <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
                                    AND A.ORG_ID = #applyOrgId#
                                </isEqual>
                           </isNotEmpty>
                           <isEmpty property="secretYn">
                              AND     A.USER_ID = #userId#
                            </isEmpty>
                            ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID AND
                            							IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
                )  A
        WHERE   1 = 1
        <isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS =  #searchDocStatus# /* 검색조건으로 온다면 */
		</isNotEmpty>
        <isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchApplyOrgId" compareValue="Y">
				AND A.WRITE_ORG_ID = #applyOrgId#
			</isEqual>
		</isNotEmpty>
	</select>
	<!--참조문서 List -->
	<select id = "approve.getRefDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* Approved CC List */
                 A.ORG_ID
                ,A.APPV_DOC_ID
                ,A.APPV_DOC_CLASS
                ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
                ,A.APPV_DOC_TYPE
                ,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
													            FROM BS_CODE_GV X
													           WHERE X.ORG_ID =  A.ORG_ID
													             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
													             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
				) AS APPV_DOC_TYPE_NM
                ,IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) AS DOC_STATUS
                ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = A.ORG_ID AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS)) AS DOC_STATUS_NM
                ,A.USER_ID
                ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
                ,A.CREATE_DATE
                ,A.TITLE
                ,A.SUBMIT_DATE
                ,(
       		  		(SELECT COUNT(*)
				       FROM BS_APPV_PROCESS X
					  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						AND X.APPV_COMMENT IS NOT NULL
						AND X.APPV_COMMENT != '')
					+
					(SELECT
							 COUNT(*)
					   FROM BS_APPV_PROCESS X
					  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						AND X.CANCEL_COMMENT != ''
						AND X.CANCEL_COMMENT IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_RECEIVER X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
					   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_EXPENSE_DOC X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
					   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_EXPENSE_DOC_UPDATE X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

		        	) AS COMMENT_CNT
		        <isEqual property="ruleUseYn" compareValue="Y">
				,CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_DATE IS NOT NULL , 'N' , 'Y')
					  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y','N')
				 END AS newYn
				</isEqual>
				<isEqual property="ruleUseYn" compareValue="N">
					,'N' AS newYn
				</isEqual>
				,A.APPV_DOC_NUM
				,(SELECT NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) WRITER_NM
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,A.READ_DATE
                           ,B.APPV_DOC_TYPE
                           ,B.USER_ID
                           ,B.DOC_STATUS
                           ,(SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE A.APPV_DOC_ID = X.APPV_DOC_ID LIMIT 0, 1) AS CREATE_DATE
                           ,B.DOC_TITLE AS TITLE
                           ,B.DOC_TITLE
                           ,B.APPV_DOC_NUM
                           ,B.WRITER_ID
                           ,B.MEMO
                           ,B.SUBMIT_DATE
                           ,B.ORG_ID AS WRITE_ORG_ID
                    FROM    (
                            SELECT  /* Approval Line Flow */
                                    A.ORG_ID
                                   ,A.APPV_DOC_ID
                                   ,A.APPV_DOC_CLASS
                                   ,A.READ_DATE
                            FROM    BS_APPV_CC  A
                            WHERE   1=1
                            <isNotEmpty property="secretYn">
					            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                                    AND     A.USER_ID = #userId#
					            </isEqual>
					            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
					                AND A.ORG_ID = #applyOrgId#
					            </isEqual>
					       </isNotEmpty>
					       <isEmpty property="secretYn">
                              AND     A.USER_ID = #userId#
					        </isEmpty>

                            ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID AND
                            						IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
                )  A
        WHERE   1 = 1
        <isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS =  #searchDocStatus# /* 검색조건으로 온다면 */
		</isNotEmpty>
       	<isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
		</isNotEmpty>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.WRITE_ORG_ID = #applyOrgId#
		</isEqual>
        ORDER BY A.SUBMIT_DATE DESC
        <isNotEqual property="recordCountPerPage" compareValue="0">
            LIMIT #firstIndex#, #recordCountPerPage#
        </isNotEqual>
	</select>


	<!--수신문서총개수 -->
	<select id = "approve.getRcDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* Approved RC CNT */
                COUNT(*)
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,A.READ_DATE
                           ,A.RECEIPT_YN
                           ,B.APPV_DOC_TYPE
                           ,B.USER_ID
                           ,B.DOC_STATUS
                           ,(SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE A.ORG_ID = X.ORG_ID AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.APPV_DOC_CLASS = X.APPV_DOC_CLASS LIMIT 0, 1) AS CREATE_DATE
                           ,B.DOC_TITLE AS TITLE
                           ,B.DOC_TITLE
                           ,B.APPV_DOC_NUM
                           ,B.WRITER_ID
                           ,B.MEMO
                           ,B.SUBMIT_DATE
                           ,B.ORG_ID AS WRITE_ORG_ID
                    FROM    (
                            SELECT  /* Approval Line Flow */
                                    A.ORG_ID
                                   ,A.APPV_DOC_ID
                                   ,A.APPV_DOC_CLASS
                                   ,A.READ_DATE
                                   ,A.RECEIPT_YN
                            FROM    BS_APPV_RECEIVER  A
                            WHERE   A.USER_ID = #userId#
                            ) A INNER JOIN BS_APPV_DOC B
	     								ON A.APPV_DOC_ID = B.APPV_DOC_ID
	     							   AND IF(B.APPV_BEFORE_RECEIVE_READ_YN = 'Y',B.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT'), B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
                )  A
        WHERE   1 = 1
        <isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS =  #searchDocStatus# /* 검색조건으로 온다면 */
		</isNotEmpty>
        <isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchApplyOrgId" compareValue="Y">
				AND A.WRITE_ORG_ID= #applyOrgId#
			</isEqual>
		</isNotEmpty>
	</select>
	<!--수신문서 List -->
	<select id = "approve.getRcDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* Approved RC List */
                 A.ORG_ID
                ,A.APPV_DOC_ID
                ,A.APPV_DOC_CLASS
                ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
                ,A.APPV_DOC_TYPE
                ,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
													            FROM BS_CODE_GV X
													           WHERE X.ORG_ID =  A.ORG_ID
													             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
													             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
				) AS APPV_DOC_TYPE_NM
                ,IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) AS DOC_STATUS
                ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID =  A.ORG_ID AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS)) AS DOC_STATUS_NM
                ,A.USER_ID
                ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
                ,A.CREATE_DATE
                ,A.TITLE
                ,A.SUBMIT_DATE
               ,(
       		  		(SELECT COUNT(*)
				       FROM BS_APPV_PROCESS X
					  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						AND X.APPV_COMMENT IS NOT NULL
						AND X.APPV_COMMENT != '')
					+
					(SELECT
							 COUNT(*)
					   FROM BS_APPV_PROCESS X
					  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						AND X.CANCEL_COMMENT != ''
						AND X.CANCEL_COMMENT IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_RECEIVER X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
					   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_EXPENSE_DOC X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
					   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_EXPENSE_DOC_UPDATE X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

		        	) AS COMMENT_CNT
		        <isEqual property="ruleUseYn" compareValue="Y">
				,CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_DATE IS NOT NULL , 'N' , 'Y')
					  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,'Y','N')
				 END AS newYn
				</isEqual>
				<isEqual property="ruleUseYn" compareValue="N">
					,'N' AS newYn
				</isEqual>
				,A.READ_DATE
				,A.RECEIPT_YN
				,(SELECT COUNT(*) FROM BS_APPV_RECEIVER RC WHERE RC.APPV_DOC_ID=A.APPV_DOC_ID) AS TOT_RECEIPT_CNT
				,(SELECT COUNT(*) FROM BS_APPV_RECEIVER RC WHERE RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.READ_DATE IS NOT NULL) AS RC_RECEIPT_CNT
				,(SELECT X.NAME FROM BS_APPV_RECEIVER RC , BS_USER_MASTER X
				   WHERE RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.RECEIPT_YN ='Y' AND RC.USER_ID = X.USER_ID) AS RC_RECEIPT_NAME
				,A.APPV_DOC_NUM
				,A.WRITE_ORG_ID
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,A.READ_DATE
                           ,A.RECEIPT_YN
                           ,B.APPV_DOC_TYPE
                           ,B.USER_ID
                           ,B.DOC_STATUS
                           ,(SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE A.ORG_ID = X.ORG_ID AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.APPV_DOC_CLASS = X.APPV_DOC_CLASS LIMIT 0, 1) AS CREATE_DATE
                           ,B.DOC_TITLE AS TITLE
                           ,B.DOC_TITLE
                           ,B.APPV_DOC_NUM
                           ,B.WRITER_ID
                           ,B.MEMO
                           ,B.SUBMIT_DATE
                           ,B.ORG_ID AS WRITE_ORG_ID
                    FROM    (
                            SELECT  /* Approval Line Flow */
                                    A.ORG_ID
                                   ,A.APPV_DOC_ID
                                   ,A.APPV_DOC_CLASS
                                   ,A.READ_DATE
                                   ,A.RECEIPT_YN
                            FROM    BS_APPV_RECEIVER  A
                            WHERE   A.USER_ID = #userId#
                            ) A INNER JOIN BS_APPV_DOC B
	     								ON A.APPV_DOC_ID = B.APPV_DOC_ID
	     							   AND IF(B.APPV_BEFORE_RECEIVE_READ_YN = 'Y',B.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT'), B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
                )  A
        WHERE   1 = 1
        <isNotEmpty property="searchDocStatus">
		AND     A.DOC_STATUS =  #searchDocStatus# /* 검색조건으로 온다면 */
		</isNotEmpty>
        <isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
		</isNotEmpty>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.WRITE_ORG_ID = #applyOrgId#
		</isEqual>
        ORDER BY A.SUBMIT_DATE DESC
        <isNotEqual property="recordCountPerPage" compareValue="0">
            LIMIT #firstIndex#, #recordCountPerPage#
        </isNotEqual>
	</select>
	<!-- 결재 참조자 조회 -->
	<select id = "approve.getApproveCcList" parameterClass="egovMap" resultClass="egovMap">
		SELECT   A.APPV_CC_ID
				,A.ORG_ID
				,A.APPV_DOC_ID
				,A.APPV_DOC_CLASS
				,A.USER_ID
				,(SELECT G.VALUE_MEAN_KOR
		 		  FROM BS_CODE_GV G
				  WHERE G.ORG_ID =  A.ORG_ID
                   AND  G.CODE_NAME = 'RANK'
		  		   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM
				,D.NAME AS USER_NM
		  FROM BS_APPV_CC A
		  INNER JOIN BS_USER_DEPARTMENT B ON B.USER_ID = A.USER_ID
									  AND B.MAIN_YN = 'Y'
									  AND B.ENABLE = 'Y'
									  AND B.DELETE_FLAG = 'N'
		  INNER JOIN BS_DEPARTMENT C ON C.DEPT_ID = B.DEPT_ID
		  INNER JOIN BS_USER_MASTER D ON A.USER_ID = D.USER_ID
		  WHERE A.APPV_DOC_ID = #appvDocId#
		    AND A.APPV_DOC_CLASS = #appvDocClass#
	</select>
	<!-- 결재 수신자 조회 -->
	<select id = "approve.getApproveRcList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   A.APPV_RC_ID
				,A.ORG_ID
				,A.APPV_DOC_ID
				,A.APPV_DOC_CLASS
				,A.USER_ID
				,A.RECEIPT_YN
				,A.READ_DATE
				,(SELECT G.VALUE_MEAN_KOR
		 		  FROM BS_CODE_GV G
				  WHERE G.ORG_ID =  A.ORG_ID
                   AND  G.CODE_NAME = 'RANK'
		  		   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM
				,D.NAME AS USER_NM
		  FROM BS_APPV_RECEIVER A
		  INNER JOIN BS_USER_DEPARTMENT B ON B.USER_ID = A.USER_ID
									  AND B.MAIN_YN = 'Y'
									  AND B.ENABLE = 'Y'
									  AND B.DELETE_FLAG = 'N'
		  INNER JOIN BS_DEPARTMENT C ON C.DEPT_ID = B.DEPT_ID
		  INNER JOIN BS_USER_MASTER D ON A.USER_ID = D.USER_ID
		  WHERE A.APPV_DOC_ID = #appvDocId#
		    AND A.APPV_DOC_CLASS = #appvDocClass#
		  ORDER BY A.READ_DATE DESC
	</select>
	<!-- 결재라인을 조회한다. -->
	<select id = "approve.getApproveLine"  parameterClass="HashMap" resultClass="egovMap">
        SELECT  /* 상단 결재진행 상태 Approval Line Flow */
                A.APPV_PROCESS_ID
               ,A.ORG_ID
               ,A.APPV_DOC_ID
               ,A.APPV_DOC_CLASS
               ,A.APPV_SEQ
               ,A.APPV_CLASS
               ,A.APPV_SUB_SEQ
               ,A.DEPT_ID
               ,A.APPV_ASSIGN_ID
               ,(SELECT X.NAME      FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_ASSIGN_ID) APPV_ASSIGN_NM
               ,IF(A.DEPT_ID IS NOT NULL, (SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = A.DEPT_ID)
                                        , (SELECT   Y.KOR_NAME
                                           FROM     BS_USER_DEPARTMENT X
                                                   ,BS_DEPARTMENT      Y
                                           WHERE    X.USER_ID = A.APPV_ASSIGN_ID
                                           AND      X.MAIN_YN = 'Y'
                                           AND      X.ENABLE = 'Y'
                                           AND      X.DELETE_FLAG = 'N'
                                           AND      Y.DEPT_ID = X.DEPT_ID)
                  ) AS DEPT_NM
               ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID =  A.ORG_ID
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_ASSIGN_ID)) AS RANK_NM
               ,A.APPV_EMP_ID
               ,A.APPV_STATUS
        FROM    (
                SELECT
                        A.APPV_PROCESS_ID
                       ,A.ORG_ID
                       ,A.APPV_DOC_ID
                       ,A.APPV_DOC_CLASS
                       ,A.APPV_SEQ
                       ,A.APPV_CLASS
                       ,A.APPV_SUB_SEQ
                       ,A.DEPT_ID
                       ,IF(A.DEPT_ID IS NOT NULL, ( SELECT /* DEPT_MANAGER_ID */
                                                            X.USER_ID
                                                     FROM   BS_DEPT_MANAGER X
                                                     WHERE  X.DEPT_ID       = A.DEPT_ID
                                                     AND    X.ENABLE        = 'Y'
                                                     AND    X.DELETE_FLAG   = 'N'
                                                   )
                                                 , APPV_USER_ID
                          ) AS APPV_ASSIGN_ID
                       ,NULL AS APPV_EMP_ID
                       ,NULL AS APPV_STATUS
                FROM    (
                        SELECT
                                NULL AS APPV_PROCESS_ID
                               ,A.ORG_ID
                               ,A.APPV_DOC_ID
                               ,A.APPV_DOC_CLASS
                               ,C.APPV_SEQ
                               ,C.APPV_CLASS
                               ,C.APPV_LINE_ID APPV_SUB_SEQ
                               ,C.APPV_USER_ID
                               ,IFNULL(C.DEPT_ID, IF(C.APPV_LINE_TYPE = 'MY_DEPT' OR C.APPV_LINE_TYPE = 'HIGH_DEPT', (SELECT    X.DEPT_ID
                                                                                                                      FROM      BS_APPROVE_PROCESS_NO_SUBMT X
                                                                                                                      WHERE     X.APPV_LINE_ID = C.APPV_LINE_ID
                                                                                                                      AND       X.APPV_HEADER_ID = C.APPV_HEADER_ID
                                                                                                                      AND       X.USER_ID = #userId#)
                                                                                                                   , NULL
                                                    )
                                        ) AS DEPT_ID
                        FROM    (
                                    SELECT  A.ORG_ID
                                           ,A.APPV_DOC_ID
                                           ,A.APPV_DOC_CLASS
                                           ,A.APPV_DOC_TYPE
                                           <isNotEmpty property="appvHeaderId">
                                           ,A.APPV_HEADER_ID
                                           </isNotEmpty>
                                           ,IFNULL((SELECT X.AMOUNT FROM BS_APPV_DOC X WHERE A.APPV_DOC_CLASS = 'BUY' AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.ORG_ID = X.ORG_ID), 0) AS TOTAL_PRICE
                                    FROM    (
                                            SELECT  #orgId#             AS ORG_ID
                                                   ,#appvDocId#         AS APPV_DOC_ID
                                                   ,#appvDocClass#      AS APPV_DOC_CLASS
                                                   ,#appvDocType#       AS APPV_DOC_TYPE
                                                   <isNotEmpty property="appvHeaderId">
                                                   		,#appvHeaderId# AS APPV_HEADER_ID
                                                   </isNotEmpty>
                                                   ,IFNULL(#docStatus#, 'WORKING')  AS DOC_STATUS
                                            ) A
                                            WHERE   DOC_STATUS = 'WORKING'
                                ) A
                               ,BS_APPROVE_HEADER   B
                               ,BS_APPROVE_LINE     C
                        WHERE   1=1
                        <isEmpty property="appvHeaderId">
                        AND     B.APPV_DOC_CLASS    = A.APPV_DOC_CLASS
                        AND     B.APPV_DOC_TYPE     = A.APPV_DOC_TYPE
                        AND		B.ORG_ID            = A.ORG_ID
                        </isEmpty>
                        <isNotEmpty property="appvHeaderId">
                        	AND B.APPV_HEADER_ID 	= A.APPV_HEADER_ID
                        </isNotEmpty>
                        <isEmpty property="appvHeaderId">
                        AND     IF(B.APPV_DOC_CLASS = 'BUY', A.TOTAL_PRICE, 0) BETWEEN IFNULL(B.MIN_AMOUNT, 0) AND IFNULL(B.MAX_AMOUNT, 0) /* 구매때 들어오는 경우 */
                        </isEmpty>
                        AND     B.ENABLE = 'Y'
                        AND     B.CLOSED = 'N'
                        AND     B.APPV_HEADER_ID    = C.APPV_HEADER_ID
                        AND     B.ORG_ID            = C.ORG_ID
                        ) A
                UNION ALL
                SELECT
                        A.APPV_PROCESS_ID
                       ,A.ORG_ID
                       ,A.APPV_DOC_ID
                       ,A.APPV_DOC_CLASS
                       ,A.APPV_SEQ
                       ,A.APPV_CLASS
                       ,A.APPV_SUB_SEQ
                       ,A.DEPT_ID
                       ,A.NOW_APPV_ASSIGN_ID
                       ,A.APPV_EMP_ID
                       ,A.APPV_STATUS
                FROM    BS_APPROVAL_LINE_FLOW_V  A
                WHERE   #docStatus#      != 'WORKING'
                AND     A.APPV_DOC_ID    = #appvDocId#
                AND     A.APPV_DOC_CLASS = #appvDocClass#
                ) A
        WHERE A.APPV_ASSIGN_ID IS NOT NULL
        ORDER BY A.APPV_SEQ, A.APPV_SUB_SEQ
	</select>
	<!-- 직접지정 결재라인을 조회한다. -->
	<select id = "approve.getApproveLineIndividual"  parameterClass="HashMap" resultClass="egovMap">
        SELECT  /* 상단 결재진행 상태 Approval Line Flow */
                A.APPV_PROCESS_ID
               ,A.ORG_ID
               ,A.APPV_DOC_ID
               ,A.APPV_DOC_CLASS
               ,A.APPV_SEQ
               ,A.APPV_CLASS
               ,A.APPV_SUB_SEQ
               ,A.DEPT_ID
               ,A.APPV_ASSIGN_ID
               ,(SELECT X.NAME      FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_ASSIGN_ID) APPV_ASSIGN_NM
               ,IF(A.DEPT_ID IS NOT NULL, (SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = A.DEPT_ID)
                                        , (SELECT   Y.KOR_NAME
                                           FROM     BS_USER_DEPARTMENT X
                                                   ,BS_DEPARTMENT      Y
                                           WHERE    X.USER_ID = A.APPV_ASSIGN_ID
                                           AND      X.MAIN_YN = 'Y'
                                           AND      X.ENABLE = 'Y'
                                           AND      X.DELETE_FLAG = 'N'
                                           AND      Y.DEPT_ID = X.DEPT_ID)
                  ) AS DEPT_NM
               ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID = #orgId#
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_ASSIGN_ID)) AS RANK_NM
               ,A.APPV_EMP_ID
               ,A.APPV_STATUS
        FROM    (
                SELECT
                        A.APPV_PROCESS_ID
                       ,A.ORG_ID
                       ,A.APPV_DOC_ID
                       ,A.APPV_DOC_CLASS
                       ,A.APPV_SEQ
                       ,A.APPV_CLASS
                       ,A.APPV_SUB_SEQ
                       ,A.DEPT_ID
                       ,IF(A.DEPT_ID IS NOT NULL, ( SELECT /* DEPT_MANAGER_ID */
                                                            X.USER_ID
                                                     FROM   BS_DEPT_MANAGER X
                                                     WHERE  X.DEPT_ID       = A.DEPT_ID
                                                     AND    X.ENABLE        = 'Y'
                                                     AND    X.DELETE_FLAG   = 'N'
                                                   )
                                                 , APPV_USER_ID
                          ) AS APPV_ASSIGN_ID
                       ,NULL AS APPV_EMP_ID
                       ,NULL AS APPV_STATUS
                FROM    (
                        SELECT
                                NULL AS APPV_PROCESS_ID
                               ,B.ORG_ID
                               ,B.APPV_DOC_ID
                               ,B.APPV_DOC_CLASS
                               ,C.APPV_SEQ
                               ,C.APPV_CLASS
                               ,C.APPV_LINE_ID APPV_SUB_SEQ
                               ,C.APPV_USER_ID
                               ,IFNULL(C.DEPT_ID, IF(C.APPV_LINE_TYPE = 'MY_DEPT' OR C.APPV_LINE_TYPE = 'HIGH_DEPT', (SELECT    X.DEPT_ID
                                                                                                                      FROM      BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL X
                                                                                                                      WHERE     X.APPV_LINE_ID = C.APPV_LINE_ID
                                                                                                                      AND       X.APPV_HEADER_ID = C.APPV_HEADER_ID
                                                                                                                      AND       X.USER_ID = #userId#)
                                                                                                                   , NULL
                                                    )
                                        ) AS DEPT_ID
                        FROM    BS_APPROVE_HEADER_INDIVIDUAL   B
                               ,BS_APPROVE_LINE_INDIVIDUAL     C
                        WHERE   #docStatus#         = 'WORKING'
                        AND     B.APPV_DOC_ID       = #appvDocId#
                        AND     B.APPV_HEADER_ID    = C.APPV_HEADER_ID
                        ) A
                UNION ALL
                SELECT
                        A.APPV_PROCESS_ID
                       ,A.ORG_ID
                       ,A.APPV_DOC_ID
                       ,A.APPV_DOC_CLASS
                       ,A.APPV_SEQ
                       ,A.APPV_CLASS
                       ,A.APPV_SUB_SEQ
                       ,A.DEPT_ID
                       ,A.NOW_APPV_ASSIGN_ID
                       ,A.APPV_EMP_ID
                       ,A.APPV_STATUS
                FROM    BS_APPROVAL_LINE_FLOW_V  A
                WHERE   #docStatus#      != 'WORKING'
                AND     A.APPV_DOC_ID    = #appvDocId#
                ) A
        WHERE A.APPV_ASSIGN_ID IS NOT NULL
        ORDER BY A.APPV_SEQ, A.APPV_SUB_SEQ
    </select>
	<insert id = "approve.insertApproveProcess" parameterClass="HashMap">
		INSERT INTO BASE.BS_APPV_PROCESS
		            (ORG_ID
		            ,APPV_DOC_ID
		            ,APPV_DOC_CLASS
		            ,APPV_SEQ
		            ,APPV_CLASS
		            ,APPV_SUB_SEQ
		            ,DEPT_ID
		            ,APPV_ASSIGN_ID
		            ,APPV_EMP_ID
		            ,APPV_STATUS
		            ,APPV_COMMENT
		            ,CREATED_BY
		            ,CREATE_DATE
		            ,UPDATED_BY
		            ,UPDATE_DATE)
        SELECT  A.ORG_ID
               ,A.APPV_DOC_ID
               ,A.APPV_DOC_CLASS
               ,A.APPV_SEQ
               ,A.APPV_CLASS
               ,A.APPV_SUB_SEQ
               ,A.DEPT_ID
               ,A.APPV_ASSIGN_ID
               ,A.APPV_EMP_ID
		       ,IF(A.ROWNUM = 1, 'REQ', 'WAIT') APPV_STATUS
		       ,NULL
		       ,#userId#
		       ,NOW()
		       ,#userId#
		       ,NOW()
        FROM    (
                SELECT  A.ORG_ID
                       ,A.APPV_DOC_ID
                       ,A.APPV_DOC_CLASS
                       ,A.APPV_SEQ
                       ,A.APPV_CLASS
                       ,A.APPV_SUB_SEQ
                       ,A.DEPT_ID
                       ,IF(A.DEPT_ID IS NOT NULL, ( SELECT /* DEPT_MANAGER_ID */
                                                            X.USER_ID
                                                     FROM   BS_DEPT_MANAGER X
                                                     WHERE  X.DEPT_ID       = A.DEPT_ID
                                                     AND    X.ENABLE        = 'Y'
                                                     AND    X.DELETE_FLAG   = 'N'
                                                   )
                                                 , APPV_USER_ID
                          ) AS APPV_ASSIGN_ID
                       ,NULL AS APPV_EMP_ID
		               ,@ROWNUM := @ROWNUM + 1 AS ROWNUM
                FROM    (
                        SELECT
                                A.ORG_ID
                               ,A.APPV_DOC_ID
                               ,A.APPV_DOC_CLASS
                               ,C.APPV_SEQ
                               ,C.APPV_CLASS
                               ,C.APPV_LINE_ID APPV_SUB_SEQ
                               ,C.APPV_USER_ID
                               ,IFNULL(C.DEPT_ID, IF(C.APPV_LINE_TYPE = 'MY_DEPT' OR C.APPV_LINE_TYPE = 'HIGH_DEPT', (SELECT    X.DEPT_ID
                                                                                                                      FROM      BS_APPROVE_PROCESS_NO_SUBMT X
                                                                                                                      WHERE     X.APPV_LINE_ID = C.APPV_LINE_ID
                                                                                                                      AND       X.APPV_HEADER_ID = C.APPV_HEADER_ID
                                                                                                                      AND       X.USER_ID = #userId#)
                                                                                                                   , NULL
                                                    )
                                        ) AS DEPT_ID
                        FROM    (
                                    SELECT  A.ORG_ID
                                           ,A.APPV_DOC_ID
                                           ,A.APPV_DOC_CLASS
                                           ,A.APPV_DOC_TYPE
                                           ,A.APPV_HEADER_ID
                                           ,IFNULL((SELECT X.AMOUNT FROM BS_APPV_DOC X WHERE A.APPV_DOC_CLASS = 'BUY' AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.ORG_ID = X.ORG_ID), 0) AS TOTAL_PRICE
                                    FROM    (
                                            SELECT  #orgId#             AS ORG_ID
                                                   ,#appvDocId#         AS APPV_DOC_ID
                                                   ,#appvDocClass#      AS APPV_DOC_CLASS
                                                   ,#appvDocType#       AS APPV_DOC_TYPE
                                                   ,#appvHeaderId# 		AS APPV_HEADER_ID
                                            ) A
                                ) A
                               ,BS_APPROVE_HEADER   B
                               ,BS_APPROVE_LINE     C
		                      ,(SELECT @ROWNUM := 0) D
                        WHERE   B.ORG_ID            = A.ORG_ID
                        AND		B.APPV_HEADER_ID	= A.APPV_HEADER_ID
                        <isEmpty property="appvHeaderId">
                        AND     IF(B.APPV_DOC_CLASS = 'BUY', A.TOTAL_PRICE, 0) BETWEEN IFNULL(B.MIN_AMOUNT, 0) AND IFNULL(B.MAX_AMOUNT, 0) /* 구매때 들어오는 경우 */
                        </isEmpty>
                        AND     B.ENABLE = 'Y'
                        AND     B.CLOSED = 'N'
                        AND     B.APPV_HEADER_ID    = C.APPV_HEADER_ID
                        AND     B.ORG_ID            = C.ORG_ID
                        ) A
                WHERE IF(A.DEPT_ID IS NOT NULL, ( SELECT /* DEPT_MANAGER_ID */
                                                            X.USER_ID
                                                     FROM   BS_DEPT_MANAGER X
                                                     WHERE  X.DEPT_ID       = A.DEPT_ID
                                                     AND    X.ENABLE        = 'Y'
                                                     AND    X.DELETE_FLAG   = 'N'
                                                   )
                                                 , APPV_USER_ID
                          ) IS NOT NULL
                ) A
        ORDER BY A.APPV_SEQ, A.APPV_SUB_SEQ
	</insert>
	<insert id = "approve.insertApproveProcessIndividual" parameterClass="HashMap">
        INSERT INTO BASE.BS_APPV_PROCESS
		            (ORG_ID
		            ,APPV_DOC_ID
		            ,APPV_DOC_CLASS
		            ,APPV_SEQ
		            ,APPV_CLASS
		            ,APPV_SUB_SEQ
		            ,DEPT_ID
		            ,APPV_ASSIGN_ID
		            ,APPV_EMP_ID
		            ,APPV_STATUS
		            ,APPV_COMMENT
		            ,CREATED_BY
		            ,CREATE_DATE
		            ,UPDATED_BY
		            ,UPDATE_DATE)
        SELECT  A.ORG_ID
               ,A.APPV_DOC_ID
               ,A.APPV_DOC_CLASS
               ,A.APPV_SEQ
               ,A.APPV_CLASS
               ,A.APPV_SUB_SEQ
               ,A.DEPT_ID
               ,A.APPV_ASSIGN_ID
               ,A.APPV_EMP_ID
		       ,IF(A.ROWNUM = 1, 'REQ', 'WAIT') APPV_STATUS
		       ,NULL
		       ,#userId#
		       ,NOW()
		       ,#userId#
		       ,NOW()
        FROM    (
                SELECT  A.ORG_ID
                       ,A.APPV_DOC_ID
                       ,A.APPV_DOC_CLASS
                       ,A.APPV_SEQ
                       ,A.APPV_CLASS
                       ,A.APPV_SUB_SEQ
                       ,A.DEPT_ID
                       ,IF(A.DEPT_ID IS NOT NULL, ( SELECT /* DEPT_MANAGER_ID */
                                                            X.USER_ID
                                                     FROM   BS_DEPT_MANAGER X
                                                     WHERE  X.DEPT_ID       = A.DEPT_ID
                                                     AND    X.ENABLE        = 'Y'
                                                     AND    X.DELETE_FLAG   = 'N'
                                                   )
                                                 , APPV_USER_ID
                          ) AS APPV_ASSIGN_ID
                       ,NULL AS APPV_EMP_ID
		               ,@ROWNUM := @ROWNUM + 1 AS ROWNUM
                FROM    (
                        SELECT
                                B.ORG_ID
                               ,B.APPV_DOC_ID
                               ,B.APPV_DOC_CLASS
                               ,C.APPV_SEQ
                               ,C.APPV_CLASS
                               ,C.APPV_LINE_ID APPV_SUB_SEQ
                               ,C.APPV_USER_ID
                               ,IFNULL(C.DEPT_ID, IF(C.APPV_LINE_TYPE = 'MY_DEPT' OR C.APPV_LINE_TYPE = 'HIGH_DEPT', (SELECT    X.DEPT_ID
                                                                                                                      FROM      BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL X
                                                                                                                      WHERE     X.APPV_LINE_ID = C.APPV_LINE_ID
                                                                                                                      AND       X.APPV_HEADER_ID = C.APPV_HEADER_ID
                                                                                                                      AND       X.USER_ID = #userId#)
                                                                                                                   , NULL
                                                    )
                                        ) AS DEPT_ID
                        FROM    BS_APPROVE_HEADER_INDIVIDUAL   B
                               ,BS_APPROVE_LINE_INDIVIDUAL     C
		                      ,(SELECT @ROWNUM := 0) D
                        WHERE   1=1
                        AND     B.APPV_DOC_ID       = #appvDocId#
                        AND     B.APPV_HEADER_ID    = C.APPV_HEADER_ID
                        ) A
                WHERE IF(A.DEPT_ID IS NOT NULL, ( SELECT /* DEPT_MANAGER_ID */
                                                            X.USER_ID
                                                     FROM   BS_DEPT_MANAGER X
                                                     WHERE  X.DEPT_ID       = A.DEPT_ID
                                                     AND    X.ENABLE        = 'Y'
                                                     AND    X.DELETE_FLAG   = 'N'
                                                   )
                                                 , APPV_USER_ID
                          ) IS NOT NULL
                ) A
        ORDER BY A.APPV_SEQ, A.APPV_SUB_SEQ
       </insert>
	<!-- 중복결재라인 삭제 -->
	<delete id = "approve.deleteDupApproveProcess" parameterClass = "HashMap">
		DELETE FROM BS_APPV_PROCESS
        WHERE   APPV_PROCESS_ID IN (
                                        SELECT  APPV_PROCESS_ID
                                        FROM    (
                                                SELECT  MAX(APPV_PROCESS_ID) APPV_PROCESS_ID
                                                FROM    BS_APPV_PROCESS
                                                WHERE  1=1
                                                AND     APPV_DOC_ID = #appvDocId#
                                                AND     APPV_DOC_CLASS = #appvDocClass#
                                                GROUP BY APPV_ASSIGN_ID
                                                HAVING COUNT(*) > 1
                                                ) A
        )
	</delete>
	<!-- 품의서 상태변경 -->
	<update id =  "approve.modifyAprvStatus" parameterClass="HashMap">
		UPDATE  BS_APPV_DOC A
		SET     A.DOC_STATUS = #docStatus#
				<isEqual property="docStatus" compareValue="SUBMIT">
				,A.APPV_DOC_NUM = CONCAT(
										CASE WHEN #appvDocNumRuleDate#='YYYYMMDD' THEN date_format(now() , '%Y%m%d')
											 WHEN #appvDocNumRuleDate#='YYMMDD' THEN date_format(now() , '%y%m%d')
									         WHEN #appvDocNumRuleDate#='YYMM' THEN date_format(now() , '%y%m')
									         WHEN #appvDocNumRuleDate#='MMDD' THEN date_format(now() , '%m%d')
										END , '-',
									    #appvDocNumRuleMidName# , '-',
									    LPAD(
									    	(
										    SELECT Y.MAXNUM
										     FROM (
												   SELECT IFNULL(MAX(SPLIT(X.APPV_DOC_NUM,'-',3))+1,1) AS MAXNUM
													 FROM BS_APPV_DOC X
													WHERE X.APPV_DOC_NUM_RULE_DATE = #appvDocNumRuleDate#
													  AND X.APPV_DOC_NUM_RULE_SEQ = #appvDocNumRuleSeq#
													  AND X.APPV_DOC_CLASS = #appvDocClass#
													  AND X.APPV_DOC_TYPE  = #appvDocType#
													  AND X.ORG_ID = #orgId#
													) Y ), CASE WHEN #appvDocNumRuleSeq# = '5DIGIT' THEN  5
													            WHEN #appvDocNumRuleSeq# = '4DIGIT' THEN  4
													            WHEN #appvDocNumRuleSeq# = '3DIGIT' THEN  3
													       END
									       ,'0')
									)
				,A.APPV_DOC_NUM_RULE_DATE = #appvDocNumRuleDate#
				,A.APPV_DOC_NUM_RULE_SEQ = #appvDocNumRuleSeq#
				,A.SUBMIT_DATE = NOW()
				</isEqual>
		       ,A.UPDATED_BY = #userId#
		       ,A.UPDATE_DATE = NOW()
		WHERE   A.APPV_DOC_ID = #appvDocId#
	</update>

	<!-- 품의서 취소시 상태변경 -->
	<update id =  "approve.modifyCancelAprvStatus" parameterClass="HashMap">
		UPDATE  BS_APPV_DOC
		SET     DOC_STATUS = #docStatus#
		       ,UPDATED_BY = #userId#
		       ,UPDATE_DATE = NOW()
		WHERE   ORG_ID = #orgId#
		AND     APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 취소 커멘트 입력 -->
	<update id =  "approve.modifyCancelComment" parameterClass="HashMap">
		UPDATE  BS_APPV_PROCESS
		SET     CANCEL_COMMENT = #appvCancelUserMemo#
		       ,UPDATED_BY = #userId#
		       ,UPDATE_DATE = NOW()
		WHERE  APPV_DOC_ID = #appvDocId#
		AND    APPV_EMP_ID = #userId#
	</update>
	<!-- 취소 합의자가 있는지 조회 -->
	<select id = "approve.getCancelChkCnt" parameterClass="HashMap" resultClass="int">
		SELECT COUNT(*)
		  FROM BS_APPROVAL_LINE_FLOW_V X
		 WHERE X.APPV_DOC_ID = #appvDocId#
		   AND X.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
             	  	  		   FROM BS_APPROVAL_LINE_FLOW_V K
             	  	  		  WHERE K.APPV_DOC_ID =X.APPV_DOC_ID
             	  	  		)
		   AND X.CANCEL_COMMENT IS NOT NULL
	</select>
	<!-- 승인대리자등록 -->
	<insert id = "approve.insertApproveAgency" parameterClass="HashMap">
		INSERT INTO BS_APPV_AGENCY (
									 ORG_ID
									,APPV_DOC_ID
									,USER_ID
									,APPV_AGENCY_ID
									,DATE_FROM
									,DATE_TO

		)
		SELECT  A.ORG_ID
		 		,A.APPV_DOC_ID
				,A.USER_ID
				,A.APPV_AGENCY_ID
				,A.DATE_FROM
				,A.DATE_TO
		 FROM BS_APPV_DOC A
		WHERE APPV_DOC_ID = #appvDocId#
		AND APPV_AGENCY_ID IS NOT NULL
	</insert>

	<!-- 승인대리자삭제 -->
	<insert id = "approve.deleteApproveAgency" parameterClass="HashMap">
		DELETE FROM BS_APPV_AGENCY
		 WHERE APPV_DOC_ID = #appvDocId#
	</insert>

	<!-- 품의승인절차 상태값변경 -->
	<update id = "approve.updateProcessStatus"  parameterClass="HashMap">
		UPDATE  BS_APPV_PROCESS
			SET     APPV_STATUS = #appvStatus#
				   ,APPV_EMP_ID = #userId#
				   ,APPV_COMMENT = #appvComment#
				   ,UPDATED_BY = #userId#
				   ,UPDATE_DATE = NOW()
			WHERE   APPV_PROCESS_ID = (
										SELECT X.APPV_PROCESS_ID
										  FROM BS_APPROVAL_LINE_FLOW_V X
										 WHERE X.APPV_DOC_ID = #appvDocId#
										   AND (X.NOW_APPV_ASSIGN_ID = #userId# OR X.APPV_ASSIGN_ID = #userId#)
										   AND X.APPV_STATUS NOT IN ('APPROVE','REJECT')
										 ORDER BY X.APPV_SEQ LIMIT 1
										)
	</update>
	<!-- 승인처리시 해당 순번 중 승인처리 되지 않은 CNT 조회 -->
	<select id = "approve.getNoApproveCntSemeAppvSeq" parameterClass="HashMap" resultClass="int">
        SELECT  COUNT(*) NO_APPROVE_CNT
        FROM    BS_APPV_PROCESS
        WHERE	(ORG_ID, APPV_DOC_ID,APPV_DOC_CLASS, APPV_SEQ) =   (
                                                    SELECT  ORG_ID, APPV_DOC_ID,APPV_DOC_CLASS, APPV_SEQ
                                                    FROM    BS_APPV_PROCESS
                                                    WHERE   APPV_PROCESS_ID = #appvProcessId#
                                                    )
        AND     APPV_STATUS != 'APPROVE'
	</select>
	<!-- 결재라인중 승인하지않은 cnt -->
	<select id = "approve.getApproveProcessNotCommitCnt" parameterClass="HashMap" resultClass="int">
        SELECT  COUNT(*) NO_APPROVE_CNT
        FROM    BS_APPV_PROCESS
        WHERE  APPV_DOC_ID=#appvDocId#
          AND APPV_SEQ = (SELECT MAX(X.APPV_SEQ) FROM BS_APPV_PROCESS X WHERE   X.APPV_DOC_ID= #appvDocId#)
          AND     APPV_STATUS != 'APPROVE'
	</select>
	<!-- 승인시 다음결재라인을 REQ로  UPDATE -->
	<update id = "approve.modifyAprvProcessApproveStatus"  parameterClass="HashMap">
        UPDATE  BS_APPV_PROCESS
        SET     APPV_STATUS = 'REQ'
        	   ,UPDATED_BY = #userId#
			   ,UPDATE_DATE = NOW()
        WHERE   (ORG_ID, APPV_DOC_ID, APPV_SEQ) = (SELECT ORG_ID, APPV_DOC_ID, APPV_SEQ
                                                   FROM (
                                                        SELECT  ORG_ID, APPV_DOC_ID, APPV_SEQ
                                                        FROM    BS_APPV_PROCESS
                                                        WHERE   APPV_DOC_ID     = #appvDocId#
                                                        AND     APPV_DOC_CLASS  = #appvDocClass#
                                                        AND     APPV_STATUS     = 'WAIT'
                                                        AND		APPV_PROCESS_ID > #appvProcessId#
                                                        ORDER BY APPV_SEQ
                                                        LIMIT 0, 1
                                                        ) A
                                                )
	</update>

	<!-- 이전결재라인에 REQ인 상태가 있다면 (후결) WAIT으로변경 -->
	<update id = "approve.modifyAprvStatusApproveBefore"  parameterClass="HashMap">
        UPDATE  BS_APPV_PROCESS
        SET     APPV_STATUS = 'WAIT'
        	   ,UPDATED_BY = #userId#
			   ,UPDATE_DATE = NOW()
        WHERE   (ORG_ID, APPV_DOC_ID, APPV_SEQ) = (SELECT ORG_ID, APPV_DOC_ID, APPV_SEQ
                                                   FROM (
                                                        SELECT  ORG_ID, APPV_DOC_ID, APPV_SEQ
                                                        FROM    BS_APPV_PROCESS
                                                        WHERE   APPV_DOC_ID     = #appvDocId#
                                                        AND     APPV_DOC_CLASS  = #appvDocClass#
                                                        AND     APPV_STATUS     = 'REQ'
                                                        AND     APPV_SEQ <![CDATA[<]]> (SELECT X.APPV_SEQ FROM BS_APPV_PROCESS X WHERE APPV_PROCESS_ID = #appvProcessId#)
                                                        ORDER BY APPV_SEQ
                                                        LIMIT 0, 1
                                                        ) A
                                                )
	</update>

	<!-- 휴가품의서  마지막결재라인 승인처리인 경우 각 품의문서의 상태값을 승인으로, 중간단계인 경우 승인진행으로 변경 -->
	<update id =  "approve.modifyAprvStatusApprove" parameterClass="HashMap">
		UPDATE  BS_APPV_DOC /* 품의서*/
			SET     DOC_STATUS = (
			                        SELECT  IF(A.APPROVE_COUNT = A.APPROVE_PROCESS_COUNT, 'COMMIT', 'APPROVE') AS DOC_STATUS    /* COMMIT : 승인완료 , APPROVE : 승인진행 */
			                        FROM    (
			                                SELECT
			                                		SUM(IF(APPV_STATUS = 'APPROVE', 1, 0)) AS APPROVE_COUNT
			                                       ,COUNT(1) AS APPROVE_PROCESS_COUNT
			                                FROM    BS_APPV_PROCESS
			                                WHERE   APPV_DOC_ID     = #appvDocId#
                                            AND     APPV_DOC_CLASS  = #appvDocClass#
                                            AND		APPV_SEQ = (SELECT MAX(X.APPV_SEQ) FROM BS_APPV_PROCESS X
                                            					 WHERE   APPV_DOC_ID     = #appvDocId#
						                                           AND     APPV_DOC_CLASS  = #appvDocClass#)
			                                ) A
			                      )
			WHERE   APPV_DOC_TYPE = #appvDocType#
			AND     APPV_DOC_ID = #appvDocId#
	</update>

	<!-- //구매리스트 조회 -->
	<select id = "approve.getApproveBuyList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   A.APPV_BUY_LIST_ID
				,A.APPV_DOC_ID
				,A.ITEM_NM
				,A.PRICE
				,A.QTY
				,A.MEMO
		FROM    BS_APPV_BUY_LIST A
		WHERE   A.APPV_DOC_ID = #appvDocId#
        ORDER BY A.APPV_BUY_LIST_ID
	</select>
	<!-- //지출리스트 조회 -->
	<select id = "approve.getApproveExpenseList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   A.EXPENSE_LIST_ID
				,A.APPV_DOC_ID
				,A.EXPENSE_DATE
				,DATE_FORMAT(A.EXPENSE_DATE , '%Y-%m-%d') AS EXPENSE_DATE_STR
				,A.EXPENSE_CODE_SET_NAME
				,A.EXPENSE_TYPE
				,(
					SELECT X.VALUE_MEAN_KOR
					  FROM   BS_CODE_GV G , BS_CODE_GV X
					 WHERE  G.ORG_ID = #orgId#
					   AND    G.CODE_NAME = 'ACCOUNT_SUBJECT'
					   AND    G.CODE_VALUE = A.EXPENSE_CODE_SET_NAME
					   AND X.ORG_ID = #orgId#
					   AND  X.CODE_NAME = G.SON_CODE_NAME
					   AND  X.CODE_VALUE = A.EXPENSE_TYPE
				) AS EXPENSE_TYPE_NM
				,A.PAYMENT_TYPE
				,A.SUMMARY
				,A.AMOUNT
				,A.COMMENT
		FROM    BS_APPV_EXPENSE_LIST A
		WHERE   A.APPV_DOC_ID = #appvDocId#
        ORDER BY A.EXPENSE_LIST_ID
	</select>

	<!-- //품의참가자리스트 조회 -->
	<select id = "approve.getApproveEntryWokerList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   A.BS_APPV_ENTRY_WOKER_ID
				,A.APPV_DOC_ID
                ,A.ORG_ID
				,A.USER_ID
                ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
                ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                              FROM   BS_USER_DEPARTMENT Y
                                                                              WHERE  Y.USER_ID = A.USER_ID
                                                                              AND    Y.MAIN_YN = 'Y'
                                                                              AND    Y.ENABLE = 'Y'
                                                                              AND    Y.DELETE_FLAG = 'N'
                                                                              )
                ) AS USER_DEPT_NM
               ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID = A.ORG_ID
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
               , (SELECT B.CPN_NM FROM BS_USER_MASTER X , IB_COMPANY B WHERE X.USER_ID = A.USER_ID AND X.COMPANY = B.S_NB) AS CPN_NM
		FROM    BS_APPV_ENTRY_WORKER A
		WHERE   A.APPV_DOC_ID = #appvDocId#
        ORDER BY A.BS_APPV_ENTRY_WOKER_ID
	</select>

	<!-- //출장비리스트 조회 -->
	<select id = "approve.getApproveTripList" parameterClass="HashMap" resultClass="egovMap">
		SELECT   A.APPV_TRIP_LIST_ID
				,A.APPV_DOC_ID
				,A.TRIP_TYPE
				,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID = #orgId#
                 AND    G.CODE_NAME = 'TRIP_TYPE'
                 AND    G.CODE_VALUE = A.TRIP_TYPE) AS TRIP_TYPE_NM
				,A.MEMO
				,A.PRICE
		FROM    BS_APPV_TRIP_LIST A
		WHERE   A.APPV_DOC_ID = #appvDocId#
        ORDER BY A.APPV_TRIP_LIST_ID
	</select>

    <!-- 품의승인 헤더 번호 가져오기 -->
    <select id="approve.selectApprovalHeaderId" parameterClass="HashMap" resultClass="int">
        SELECT
                B.APPV_HEADER_ID
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,A.APPV_DOC_TYPE
                           ,IFNULL((SELECT X.AMOUNT FROM BS_APPV_DOC X WHERE A.APPV_DOC_CLASS = 'BUY' AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.ORG_ID = X.ORG_ID), 0) AS TOTAL_PRICE
                    FROM    (
                            SELECT  #orgId#         AS ORG_ID
                                   ,#appvDocId#     AS APPV_DOC_ID
                                   ,#appvDocClass#  AS APPV_DOC_CLASS
                                   ,#appvDocType#   AS APPV_DOC_TYPE
                            ) A
                ) A
               ,BS_APPROVE_HEADER   B
        WHERE   B.ORG_ID            = A.ORG_ID
        AND     B.APPV_DOC_CLASS    = A.APPV_DOC_CLASS
        AND     B.APPV_DOC_TYPE     = A.APPV_DOC_TYPE
        AND     IF(B.APPV_DOC_CLASS = 'BUY', A.TOTAL_PRICE, 0) BETWEEN IFNULL(B.MIN_AMOUNT, 0) AND IFNULL(B.MAX_AMOUNT, 0) /* 구매때 들어오는 경우 */
        AND     B.ENABLE = 'Y'
        AND     B.CLOSED = 'N'
    </select>

    <!--품의승인 헤더 번호 가져오기 (직접지정)  -->
	<select id="approve.selectApprovalHeaderIdIndividual"  parameterClass="HashMap" resultClass="Integer">
        SELECT
                B.APPV_HEADER_ID
        FROM    BS_APPROVE_HEADER_INDIVIDUAL   B
        WHERE   B.APPV_DOC_ID       = #appvDocId#
    </select>

	<!--
	    품의승인절차상신전 정보 등록
	    소속부서인 경우만 DEPT_ID를 넣고 상위부서인 경우는 이후 프로세스에서 상위부서 찾아서 넣는다.
	    부서지정의 경우는 BS_APPROVE_LINE(결재순서)에 이미 들어가 있어서 별도 처리하지 않는다.
	-->
    <insert id="approve.createApprovaeProcessNoSubmit" parameterClass="HashMap">
        INSERT INTO BASE.BS_APPROVE_PROCESS_NO_SUBMT(APPV_LINE_ID, APPV_HEADER_ID, APPV_SEQ, APPV_LINE_TYPE, USER_ID, DEPT_ID)
        SELECT  APPV_LINE_ID, APPV_HEADER_ID, APPV_SEQ, APPV_LINE_TYPE,#userId#
               ,IF(APPV_LINE_TYPE = 'MY_DEPT', (SELECT X.DEPT_ID
                                                FROM   BS_USER_DEPARTMENT X
                                                WHERE  X.USER_ID = #userId#
                                                AND    X.MAIN_YN = 'Y'
                                                AND    X.ENABLE = 'Y'
                                                AND    X.DELETE_FLAG = 'N'
                                                )
                                              , NULL)
        FROM    BS_APPROVE_LINE
        WHERE   APPV_HEADER_ID = #appvHeaderId#
        AND     APPV_LINE_TYPE IN ('MY_DEPT', 'HIGH_DEPT')
        ORDER BY APPV_SEQ, APPV_LINE_ID
    </insert>
    <!-- 직접지정일경우 ..
	    품의승인절차상신전 정보 등록
	    소속부서인 경우만 DEPT_ID를 넣고 상위부서인 경우는 이후 프로세스에서 상위부서 찾아서 넣는다.
	    부서지정의 경우는 BS_APPROVE_LINE(결재순서)에 이미 들어가 있어서 별도 처리하지 않는다.
	-->
  	<insert id="approve.createApprovaeProcessNoSubmitIndividual" parameterClass="HashMap">
        INSERT INTO BASE.BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL(APPV_LINE_ID, APPV_HEADER_ID, APPV_SEQ, APPV_LINE_TYPE, USER_ID, DEPT_ID)
        SELECT  C.APPV_LINE_ID, C.APPV_HEADER_ID, C.APPV_SEQ, C.APPV_LINE_TYPE,#userId#
               ,IF(C.APPV_LINE_TYPE = 'MY_DEPT', (SELECT X.DEPT_ID
                                                  FROM   BS_USER_DEPARTMENT X
                                                  WHERE  X.USER_ID = #userId#
                                                  AND    X.MAIN_YN = 'Y'
                                                  AND    X.ENABLE = 'Y'
                                                  AND    X.DELETE_FLAG = 'N'
                                                  )
                                                , NULL)
        FROM    BS_APPROVE_HEADER_INDIVIDUAL   B
               ,BS_APPROVE_LINE_INDIVIDUAL     C
        WHERE   B.APPV_DOC_ID       = #appvDocId#
        AND     B.APPV_HEADER_ID    = C.APPV_HEADER_ID
        AND     C.APPV_LINE_TYPE IN ('MY_DEPT', 'HIGH_DEPT')
        ORDER BY C.APPV_SEQ, C.APPV_LINE_ID
    </insert>
    <!-- 품의승인절차상신전 정보 개수 -->
    <select id="approve.selectApprovaeProcessNoSubmitNoDeptCount" parameterClass="HashMap" resultClass="int">
        SELECT COUNT(*)
        FROM   BS_APPROVE_PROCESS_NO_SUBMT
        WHERE  USER_ID = #userId#
        AND    APPV_HEADER_ID = #appvHeaderId#
        AND    DEPT_ID IS NULL
    </select>
	<!-- 품의승인절차상신전 정보 개수 (직접지정)-->
	<select id="approve.selectApprovaeProcessNoSubmitNoDeptCountIndividual" parameterClass="HashMap" resultClass="int">
        SELECT COUNT(*)
        FROM   BS_APPROVE_HEADER_INDIVIDUAL             A
              ,BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL   B
        WHERE  A.APPV_DOC_ID       = #appvDocId#
        AND    A.APPV_HEADER_ID    = B.APPV_HEADER_ID
        AND    B.USER_ID = #userId#
        AND    DEPT_ID IS NULL
	</select>
	<!--
	    품의승인절차상신전 정보 수정
	    상위부서를 찾아서 넣음.
	-->
    <update id="approve.updateApprovaeProcessNoSubmit"  parameterClass="HashMap">
        UPDATE BS_APPROVE_PROCESS_NO_SUBMT
        SET    DEPT_ID = (SELECT PARENT_DEPT_ID FROM (  SELECT  X.PARENT_DEPT_ID
                                                        FROM    BS_DEPARTMENT X
                                                        WHERE   X.PARENT_DEPT_ID != 0
                                                        /* AND     X.PARENT_DEPT_ID NOT IN (SELECT DEPT_ID FROM BS_DEPARTMENT WHERE DEPT_SEQ = 0) 대표이사 제외 */
                                                       AND     X.DEPT_ID = IFNULL((SELECT Y.DEPT_ID
	                                                                                 FROM   BS_APPROVE_PROCESS_NO_SUBMT Y
	                                                                                WHERE  Y.USER_ID = #userId#
	                                                                                  AND    Y.APPV_HEADER_ID = #appvHeaderId#
	                                                                                  AND    Y.DEPT_ID IS NOT NULL
	                                                                               ORDER BY Y.APPV_SEQ DESC, Y.APPV_LINE_ID DESC
	                                                                               LIMIT 0, 1
                                                                             ),
                                                   							(SELECT X.DEPT_ID
																			   FROM   BS_USER_DEPARTMENT X
																			  WHERE  X.USER_ID = #userId#
																			    AND    X.MAIN_YN = 'Y'
																			    AND    X.ENABLE = 'Y'
																			    AND    X.DELETE_FLAG = 'N')
																			)
                                                     ) A
                           )
        WHERE  APPROVE_PROCESS_NO_SUBMIT_ID =  (SELECT  APPROVE_PROCESS_NO_SUBMIT_ID
                                                FROM    (
                                                        SELECT X.APPROVE_PROCESS_NO_SUBMIT_ID
                                                        FROM   BS_APPROVE_PROCESS_NO_SUBMT X
                                                        WHERE  X.USER_ID = #userId#
                                                        AND    X.APPV_HEADER_ID = #appvHeaderId#
                                                        AND    X.DEPT_ID IS NULL
                                                        ORDER BY X.APPV_SEQ, X.APPV_LINE_ID
                                                        LIMIT 0, 1
                                                        )A
                                                )
    </update>
    <!-- 직접지정...
	    품의승인절차상신전 정보 수정
	    상위부서를 찾아서 넣음.
	-->
	<update id="approve.updateApprovaeProcessNoSubmitIndividual"  parameterClass="HashMap">
        UPDATE BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL
        SET    DEPT_ID = (SELECT PARENT_DEPT_ID FROM (  SELECT  X.PARENT_DEPT_ID
                                                        FROM    BS_DEPARTMENT X
                                                        WHERE   X.PARENT_DEPT_ID != 0
                                                        /* AND     X.PARENT_DEPT_ID NOT IN (SELECT DEPT_ID FROM BS_DEPARTMENT WHERE DEPT_SEQ = 0) 대표이사 제외 */
                                                        AND     X.DEPT_ID = (SELECT B.DEPT_ID
                                                                             FROM   BS_APPROVE_HEADER_INDIVIDUAL            A
                                                                                   ,BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL  B
                                                                             WHERE  A.APPV_DOC_ID       = #appvDocId#
                                                                             AND    A.APPV_HEADER_ID    = B.APPV_HEADER_ID
                                                                             AND    B.USER_ID = #userId#
                                                                             AND    B.DEPT_ID IS NOT NULL
                                                                             ORDER BY B.APPV_SEQ DESC, B.APPV_LINE_ID DESC
                                                                             LIMIT 0, 1
                                                                             )
                                                     ) A
                          )
        WHERE  APPROVE_PROCESS_NO_SUBMIT_ID =  (SELECT  APPROVE_PROCESS_NO_SUBMIT_ID
                                                FROM    (
                                                        SELECT B.APPROVE_PROCESS_NO_SUBMIT_ID
                                                        FROM   BS_APPROVE_HEADER_INDIVIDUAL             A
                                                              ,BS_APPROVE_PROCESS_NO_SUBMT_INDIVIDUAL   B
                                                        WHERE  A.APPV_DOC_ID       = #appvDocId#
                                                        AND    A.APPV_HEADER_ID    = B.APPV_HEADER_ID
                                                        AND    B.USER_ID = #userId#
                                                        AND    B.DEPT_ID IS NULL
                                                        ORDER BY B.APPV_SEQ, B.APPV_LINE_ID
                                                        LIMIT 0, 1
                                                        )A
                                                )
	</update>
    <!-- 품의승인절차상신전 정보 삭제 -->
	<delete id="approve.deleteApprovaeProcessNoSubmit" parameterClass="HashMap">
		DELETE  FROM BASE.BS_APPROVE_PROCESS_NO_SUBMT
		WHERE   APPV_HEADER_ID = #appvHeaderId#
        AND     USER_ID = #userId#
	</delete>

	<!-- 경조사 분류 코드를 조회한다 -->
	<select id = "approve.familyEventsIdList" parameterClass="HashMap" resultClass="egovMap">
        SELECT  CODE_NAME, CODE_VALUE, VALUE_NM
		       ,FAMILY_EVENTS_ID, EVENT_CODE, EVENT_NAME, DESCRIPTION, AMOUNT, PERIOD, HOLIDAY,ORG_ID
		FROM    (
		SELECT  A.CODE_NAME, A.CODE_VALUE, A.VALUE_MEAN_KOR VALUE_NM, A.SORT
		       ,0 AS FAMILY_EVENTS_ID, NULL AS EVENT_CODE, NULL AS EVENT_NAME, NULL AS DESCRIPTION, NULL AS AMOUNT, NULL AS PERIOD, NULL AS HOLIDAY,A.ORG_ID
		FROM    BS_CODE_GV      A
		WHERE   A.ORG_ID = #orgId#
        AND     A.CODE_NAME = 'EVENT_TYPE'
        AND 	A.SON_CODE_NAME IN (SELECT X.CODE_SET_NAME FROM BS_FAMILY_EVENT X WHERE X.ORG_ID = #orgId# AND X.USE_YN = 'Y')
        AND		A.DELETE_FLAG = 'N'
		UNION ALL
		SELECT  A.CODE_NAME, A.CODE_VALUE, A.VALUE_MEAN_KOR VALUE_NM, A.SORT
		       ,B.FAMILY_EVENTS_ID, B.EVENT_CODE, C.VALUE_MEAN_KOR AS EVENT_NAME, C.VALUE_DESC AS DESCRIPTION, B.AMOUNT, B.PERIOD, B.HOLIDAY,B.ORG_ID
		FROM    BS_CODE_GV      A
		       ,BS_FAMILY_EVENT B
		       ,BS_CODE_GV C
		WHERE   A.ORG_ID = #orgId#
        AND     A.CODE_NAME = 'EVENT_TYPE'
        AND 	A.SON_CODE_NAME = B.CODE_SET_NAME
		AND		A.DELETE_FLAG = 'N'

		AND     B.ORG_ID = A.ORG_ID
		AND     B.USE_YN = 'Y'
		AND     C.CODE_NAME = B.CODE_SET_NAME
		AND     B.EVENT_CODE =C.CODE_VALUE
		AND     C.ORG_ID = A.ORG_ID
		AND		C.DELETE_FLAG = 'N'
		) A
		WHERE 1=1
		ORDER BY SORT, FAMILY_EVENTS_ID
	</select>

	<!-- 경조사마지막일조회 -->
	<select id = "approve.getEventLastDay" parameterClass="HashMap" resultClass="egovMap">
        SELECT  DATE_FORMAT(SYS_DATE, '%Y-%m-%d') AS SYS_DATE
			FROM    (
			        SELECT  SYS_DATE, HOLIDAY
			        FROM    BS_CALENDAR
			        WHERE   ORG_ID = #orgId#
			        AND     SYS_DATE >= #selectedDate#
			        ORDER BY SYS_DATE
			        LIMIT 0,100
			) A
			WHERE   A.HOLIDAY = IF(#holidayYn#  = 'Y', A.HOLIDAY, 'N') /*'휴일포함여부'*/
			LIMIT #period# , 1
	</select>
	<!-- 품의서 삭제 -->
	<delete id = "approve.deleteApproveDoc" parameterClass = "HashMap">
		DELETE FROM BS_APPV_DOC
		 WHERE APPV_DOC_ID = #appvDocId#
	</delete>
	<!-- 경조품의 상신때 휴일포함여부와 마지막 날짜를 업데이트한다. -->
	<update id = "approve.modifyApproveEventSubmitInfo"  parameterClass = "HashMap">
		UPDATE BS_APPV_DOC A INNER JOIN BS_APPV_EVENT_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
		   SET A.DATE_TO = #dateTo#
		      ,B.HOLIDAY = #holiday#
		 WHERE A.APPV_DOC_ID = #appvDocId#
	</update>
	<select id = "approve.familyEventsDetail" parameterClass = "HashMap" resultClass="egovMap">
		SELECT  FAMILY_EVENTS_ID
				,ORG_ID
				,EVENT_CODE
				,AMOUNT
				,PERIOD
				,HOLIDAY
				,CREATED_BY
				,CREATE_DATE
				,UPDATED_BY
				,UPDATE_DATE
		FROM BS_FAMILY_EVENT
		WHERE FAMILY_EVENTS_ID = #familyEventsId#
	</select>
	<!-- 품의서 승인시 실제 결재자 업데이트 -->
	<update id = "approve.modifyAprvProcessAprvEmpId" parameterClass = "HashMap">
		UPDATE BS_APPV_PROCESS
		   SET APPV_EMP_ID = #userId#
		   	   ,UPDATED_BY = #userId#
			   ,UPDATE_DATE = NOW()
		  WHERE APPV_PROCESS_ID = #appvProcessId#
	</update>
	<!-- 품의서 승인시 실제 결재자 업데이트 -->
	<update id = "approve.modifyAppvComment" parameterClass = "HashMap">
		UPDATE BS_APPV_PROCESS
		   SET APPV_COMMENT = #appvComment#
		   	  ,UPDATED_BY = #userId#
			  ,UPDATE_DATE = NOW()
		  WHERE APPV_PROCESS_ID = #appvProcessId#
	</update>
	<!--  -->
	<select id = "approve.getApproveProcessComment" parameterClass = "HashMap" resultClass="egovMap">
	SELECT X.* FROM (
		SELECT
				A.APPV_ASSIGN_ID
				,A.APPV_EMP_ID
				,A.APPV_STATUS
				,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_EMP_ID) AS COMMENT_USER_NM
				,A.APPV_COMMENT
				,A.UPDATE_DATE
				, 1 AS SORT
		   FROM BS_APPV_PROCESS A
		  WHERE A.APPV_DOC_ID = #appvDocId#
			AND	A.APPV_DOC_CLASS= #appvDocClass#
			AND A.APPV_COMMENT IS NOT NULL
			AND A.APPV_COMMENT != ''

		UNION

		SELECT
				 A.APPV_ASSIGN_ID
				,A.APPV_EMP_ID
				,'CANCEL'
				,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_EMP_ID) AS COMMENT_USER_NM
				,A.CANCEL_COMMENT AS APPV_COMMENT
				,A.UPDATE_DATE
				,2 AS SORT
		   FROM BS_APPV_PROCESS A
		  WHERE A.APPV_DOC_ID = #appvDocId#
			AND	A.APPV_DOC_CLASS= #appvDocClass#
			AND A.CANCEL_COMMENT != ''
			AND A.CANCEL_COMMENT IS NOT NULL

		UNION

		SELECT A.USER_ID AS APPV_ASSIGN_ID
			  ,A.USER_ID AS APPV_EMP_ID
			  ,'RECIEVER' AS APPV_STATUS
			  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS COMMENT_USER_NM
			  ,A.RECEIPT_USER_MEMO AS APPV_COMMENT
			  ,A.READ_DATE
			  ,3 AS SORT
		  FROM BS_APPV_RECEIVER A
		 WHERE A.APPV_DOC_ID = #appvDocId#
		   AND A.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL

		UNION

		SELECT A.EXPENSE_PAY_USER_ID AS APPV_ASSIGN_ID
			  ,A.EXPENSE_PAY_USER_ID AS APPV_EMP_ID
			  ,'EXPENSE' AS APPV_STATUS
			  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.EXPENSE_PAY_USER_ID) AS COMMENT_USER_NM
			  ,A.EXPENSE_PAY_COMMENT AS APPV_COMMENT
			  ,A.EXPENSE_PAY_DAY
			  ,4 AS SORT
		  FROM BS_APPV_EXPENSE_DOC A
		 WHERE A.APPV_DOC_ID = #appvDocId#
		   AND A.EXPENSE_YN = 'Y' AND EXPENSE_PAY_USER_ID IS NOT NULL

		UNION

		SELECT A.UPDATE_USER_ID AS APPV_ASSIGN_ID
			  ,A.UPDATE_USER_ID AS APPV_EMP_ID
			  ,'UPDATE' AS APPV_STATUS
			  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.UPDATE_USER_ID) AS COMMENT_USER_NM
			  ,A.UPDATE_COMMENT AS APPV_COMMENT
			  ,A.UPDATE_DATE
			  ,5 AS SORT
		  FROM BS_APPV_EXPENSE_DOC_UPDATE A
		 WHERE A.APPV_DOC_ID = #appvDocId#
		  )X ORDER BY X.SORT,X.UPDATE_DATE

	</select>

	<!-- 휴가신청 후처리 -->
	<insert id = "approve.insertErpSchApproveVacProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE(SCHE_GRP_CD
                                ,PER_SABUN
                                ,SCHE_GUBUN
                                ,PROJECT_ID
                                ,ACTIVITY_ID
                                ,SCHE_S_YEAR
                                ,SCHE_S_MONTH
                                ,SCHE_S_DAY
                                ,SCHE_S_DATE
                                ,SCHE_S_TIME
                                ,SCHE_E_YEAR
                                ,SCHE_E_MONTH
                                ,SCHE_E_DAY
                                ,SCHE_E_DATE
                                ,SCHE_E_TIME
                                ,SCHE_ALL_TIME
                                ,SCHE_PERIOD_FLAG
                                ,SCHE_TITLE
                                ,SCHE_AREA
                                ,SCHE_CON
                                ,SCHE_REPET_FLAG
                                ,SCHE_ALARM_FLAG
                                ,SCHE_ALARM_HOW
                                ,SCHE_IMPORTANT
                                ,SCHE_CHK_FLAG
                                ,SCHE_CHK_DATE
                                ,SCHE_PUBLIC_FLAG
                                ,CONTACT_LOC
                                ,CAR_USE_FLAG
                                ,INVEST_OFFER_CD
                                ,CAR_ID
                                ,MNA_TYPE
                                ,COMPANY_ID
                                ,CUSTOMER_ID
                                ,COMPANY
                                ,CUSTOMER
                                ,ORG_ID
                                ,APPV_DOC_ID
                                ,APPV_DOC_CLASS
                                ,REG_DATE
                                ,REG_PER_SABUN
                                ,EDIT_DATE
                                ,DEL_DATE
                                ,DEL_FLAG )
        SELECT   /* 휴가, 반차 INSERT */
                 IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Period', NULL)          AS SCHE_GRP_CD
                ,B.EMP_NO      AS PER_SABUN     /* 사번     */
                ,'All'         AS SCHE_GUBUN    /* 전체일정 */
                ,A.PROJECT_ID
                ,A.ACTIVITY_ID
                ,DATE_FORMAT(A.DATE_FROM, '%Y')             AS SCHE_S_YEAR
                ,DATE_FORMAT(A.DATE_FROM, '%m')             AS SCHE_S_MONTH
                ,DATE_FORMAT(A.DATE_FROM, '%d')             AS SCHE_S_DAY
                ,DATE_FORMAT(A.DATE_FROM, '%Y-%m-%d')       AS SCHE_S_DATE
                ,CASE A.ALL_HALF WHEN 'ALL' THEN '08:30' WHEN 'AM' THEN '08:30' WHEN 'PM' THEN '14:00' END AS SCHE_S_TIME
                ,DATE_FORMAT(A.DATE_TO, '%Y')               AS SCHE_E_YEAR
                ,DATE_FORMAT(A.DATE_TO, '%m')               AS SCHE_E_MONTH
                ,DATE_FORMAT(A.DATE_TO, '%d')               AS SCHE_E_DAY
                ,DATE_FORMAT(A.DATE_TO, '%Y-%m-%d')         AS SCHE_E_DATE
                ,CASE A.ALL_HALF WHEN 'ALL' THEN '18:00' WHEN 'AM' THEN '14:00' WHEN 'PM' THEN '18:00' END   AS SCHE_E_TIME
                ,IF(A.ALL_HALF = 'ALL', 'Y', 'N')   AS SCHE_ALL_TIME       /* 종일일정여부 */
                ,IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Y', 'N') AS SCHE_PERIOD_FLAG    /* 반복일정여부 */
                ,CONCAT(
                	 IF(A.APPV_DOC_TYPE_ETC IS NOT NULL AND A.APPV_DOC_TYPE = 'ETC',(
		                                                 SELECT  CONCAT(Y.VALUE_MEAN_KOR,' _ ')
		                                            	   FROM    BS_CODE_GV Y
		                                           		   WHERE   Y.CODE_NAME = 'APPV_DOC_TYPE_VACATION_ETC'
		                                              		 AND   Y.CODE_VALUE = A.APPV_DOC_TYPE_ETC AND Y.ORG_ID = A.ORG_ID
                                               									)
                                               		 ,'')
                			,DATE_FORMAT(A.DATE_FROM, '%m/%d') , '(', CASE DAYOFWEEK(A.DATE_FROM)
                                                                                 WHEN '1' THEN '일'
                                                                                 WHEN '2' THEN '월'
                                                                                 WHEN '3' THEN '화'
                                                                                 WHEN '4' THEN '수'
                                                                                 WHEN '5' THEN '목'
                                                                                 WHEN '6' THEN '금'
                                                                                 WHEN '7' THEN '토' END, ') ~ '
                           , DATE_FORMAT(A.DATE_TO, '%m/%d') , '(', CASE DAYOFWEEK(A.DATE_TO)
                                                                         WHEN '1' THEN '일'
                                                                         WHEN '2' THEN '월'
                                                                         WHEN '3' THEN '화'
                                                                         WHEN '4' THEN '수'
                                                                         WHEN '5' THEN '목'
                                                                         WHEN '6' THEN '금'
                                                                         WHEN '7' THEN '토' END, ')'
                         ) AS SCHE_TITLE
                ,NULL               AS SCHE_AREA
                ,A.MEMO             AS SCHE_CON    /* 내용 */
                ,'None'             AS SCHE_REPET_FLAG
                ,'0'                AS SCHE_ALARM_FLAG
                ,'None'             AS SCHE_ALARM_HOW
                ,NULL               AS SCHE_IMPORTANT
                ,'N'                AS SCHE_CHK_FLAG
                ,NULL               AS SCHE_CHK_DATE
                ,'Y'                AS SCHE_PUBLIC_FLAG
                ,NULL               AS CONTACT_LOC
                ,'N'                AS CAR_USE_FLAG
                ,NULL               AS INVEST_OFFER_CD
                ,NULL               AS CAR_ID
                ,NULL               AS MNA_TYPE
                ,NULL               AS COMPANY_ID
		        ,NULL               AS CUSTOMER_ID
                ,NULL               AS COMPANY
                ,NULL               AS CUSTOMER
				,A.ORG_ID           AS ORG_ID
                ,A.APPV_DOC_ID      AS APPV_DOC_ID
                ,A.APPV_DOC_CLASS   AS APPV_DOC_CLASS
		        ,NOW()              AS REG_DATE
		        ,B.EMP_NO           AS REG_PER_SABUN
		        ,NOW()              AS EDIT_DATE
                ,NULL               AS DEL_DATE
                ,'N'                AS DEL_FLAG
		FROM    BS_APPV_DOC A
               ,BS_USER_MASTER  B
		WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID

	<selectKey resultClass="int" type="post" keyProperty="scheSeq">
			SELECT LAST_INSERT_ID()
	</selectKey>
	</insert>
	<!-- 휴가품이서 완료 후 처리2 -->
	<insert id = "approve.insertErpEntrySchApproveVacProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE_ENTRY (SCHE_SEQ,PER_SABUN, REG_PER_SABUN, ORG_ID, REG_DATE, EDIT_PER_SABUN, EDIT_DATE, DEL_FLAG)
        SELECT   #scheSeq#   AS SCHE_SEQ
        		,B.EMP_NO    AS PER_SABUN
		        ,B.EMP_NO    AS REG_PER_SABUN
                ,B.ORG_ID    AS ORG_ID
		        ,NOW()       AS REG_DATE
		        ,B.EMP_NO    AS EDIT_PER_SABUN
		        ,NOW()       AS EDIT_DATE
                ,'N'         AS DEL_FLAG
        FROM    BS_APPV_DOC    A
               ,BS_USER_MASTER      B
        WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
	</insert>
	<!-- 경조사신청 후처리 -->
	<insert id = "approve.insertErpSchApproveEventProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE(SCHE_GRP_CD
                                ,PER_SABUN
                                ,SCHE_GUBUN
                                ,PROJECT_ID
                                ,ACTIVITY_ID
                                ,SCHE_S_YEAR
                                ,SCHE_S_MONTH
                                ,SCHE_S_DAY
                                ,SCHE_S_DATE
                                ,SCHE_S_TIME
                                ,SCHE_E_YEAR
                                ,SCHE_E_MONTH
                                ,SCHE_E_DAY
                                ,SCHE_E_DATE
                                ,SCHE_E_TIME
                                ,SCHE_ALL_TIME
                                ,SCHE_PERIOD_FLAG
                                ,SCHE_TITLE
                                ,SCHE_AREA
                                ,SCHE_CON
                                ,SCHE_REPET_FLAG
                                ,SCHE_ALARM_FLAG
                                ,SCHE_ALARM_HOW
                                ,SCHE_IMPORTANT
                                ,SCHE_CHK_FLAG
                                ,SCHE_CHK_DATE
                                ,SCHE_PUBLIC_FLAG
                                ,CONTACT_LOC
                                ,CAR_USE_FLAG
                                ,INVEST_OFFER_CD
                                ,CAR_ID
                                ,MNA_TYPE
                                ,COMPANY_ID
                                ,CUSTOMER_ID
                                ,COMPANY
                                ,CUSTOMER
                                ,ORG_ID
                                ,APPV_DOC_ID
                                ,APPV_DOC_CLASS
                                ,REG_DATE
                                ,REG_PER_SABUN
                                ,EDIT_DATE
                                ,DEL_DATE
                                ,DEL_FLAG )
        SELECT   /* 경조사 INSERT */
                 IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Period', NULL)          AS SCHE_GRP_CD
                ,B.EMP_NO       AS PER_SABUN     /* 사번     */
                ,'All'          AS SCHE_GUBUN    /* 전체일정 */
                ,A.PROJECT_ID
                ,A.ACTIVITY_ID
                ,DATE_FORMAT(A.DATE_FROM, '%Y')         AS SCHE_S_YEAR
                ,DATE_FORMAT(A.DATE_FROM, '%m')         AS SCHE_S_MONTH
                ,DATE_FORMAT(A.DATE_FROM, '%d')         AS SCHE_S_DAY
                ,DATE_FORMAT(A.DATE_FROM, '%Y-%m-%d')   AS SCHE_S_DATE
                ,'08:30'                                 AS SCHE_S_TIME
                ,DATE_FORMAT(A.DATE_TO, '%Y')           AS SCHE_E_YEAR
                ,DATE_FORMAT(A.DATE_TO, '%m')           AS SCHE_E_MONTH
                ,DATE_FORMAT(A.DATE_TO, '%d')           AS SCHE_E_DAY
                ,DATE_FORMAT(A.DATE_TO, '%Y-%m-%d')     AS SCHE_E_DATE
                ,'18:00'                        AS SCHE_E_TIME
                ,'Y'                            AS SCHE_ALL_TIME       /* 종일일정여부 */
                ,IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Y', 'N')   AS SCHE_PERIOD_FLAG    /* 반복일정여부 */
                ,(
                   SELECT  Y.VALUE_MEAN_KOR
                   FROM    BS_FAMILY_EVENT X
                   INNER JOIN BS_CODE_GV Y ON Y.CODE_NAME = X.CODE_SET_NAME AND Y.CODE_VALUE = X.EVENT_CODE AND Y.ORG_ID = X.ORG_ID
                   WHERE   X.FAMILY_EVENTS_ID = C.FAMILY_EVENTS_ID
                   AND     X.ORG_ID = A.ORG_ID
                  ) AS SCHE_TITLE
                ,NULL               AS SCHE_AREA
                ,A.MEMO             AS SCHE_CON    /* 내용 */
                ,'None'             AS SCHE_REPET_FLAG
                ,'0'                AS SCHE_ALARM_FLAG
                ,'None'             AS SCHE_ALARM_HOW
                ,NULL               AS SCHE_IMPORTANT
                ,'N'                AS SCHE_CHK_FLAG
                ,NULL               AS SCHE_CHK_DATE
                ,'Y'                AS SCHE_PUBLIC_FLAG
                ,NULL               AS CONTACT_LOC
                ,'N'                AS CAR_USE_FLAG
                ,NULL               AS INVEST_OFFER_CD
                ,NULL               AS CAR_ID
                ,NULL               AS MNA_TYPE
                ,NULL               AS COMPANY_ID
		        ,NULL               AS CUSTOMER_ID
                ,NULL               AS COMPANY
                ,NULL               AS CUSTOMER
				,A.ORG_ID           AS ORG_ID
                ,A.APPV_DOC_ID    AS APPV_DOC_ID
                ,A.APPV_DOC_CLASS   AS APPV_DOC_CLASS
		        ,NOW()              AS REG_DATE
		        ,B.EMP_NO           AS REG_PER_SABUN
		        ,NOW()              AS EDIT_DATE
                ,NULL               AS DEL_DATE
                ,'N'                AS DEL_FLAG
		FROM    BS_APPV_DOC    A
               ,BS_USER_MASTER  B
               ,BS_APPV_EVENT_DOC C
		WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
        AND		A.APPV_DOC_ID   = C.APPV_DOC_ID
        <selectKey resultClass="int" type="post" keyProperty="scheSeq">
				SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	<!-- 경조사품이서 완료 후 처리2 -->
	<insert id = "approve.insertErpEntrySchApproveEventProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE_ENTRY (SCHE_SEQ,PER_SABUN, REG_PER_SABUN, ORG_ID, REG_DATE, EDIT_PER_SABUN, EDIT_DATE, DEL_FLAG)
        SELECT   #scheSeq#   AS SCHE_SEQ
        		,B.EMP_NO    AS PER_SABUN
		        ,B.EMP_NO    AS REG_PER_SABUN
                ,B.ORG_ID    AS ORG_ID
		        ,NOW()       AS REG_DATE
		        ,B.EMP_NO    AS EDIT_PER_SABUN
		        ,NOW()       AS EDIT_DATE
                ,'N'         AS DEL_FLAG
        FROM    BS_APPV_DOC    A
               ,BS_USER_MASTER      B
        WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
	</insert>
	<!-- 교육신청 후처리1 -->
	<insert id = "approve.insertErpSchApproveEduProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE(SCHE_GRP_CD
                                ,PER_SABUN
                                ,SCHE_GUBUN
                                ,PROJECT_ID
                                ,ACTIVITY_ID
                                ,SCHE_S_YEAR
                                ,SCHE_S_MONTH
                                ,SCHE_S_DAY
                                ,SCHE_S_DATE
                                ,SCHE_S_TIME
                                ,SCHE_E_YEAR
                                ,SCHE_E_MONTH
                                ,SCHE_E_DAY
                                ,SCHE_E_DATE
                                ,SCHE_E_TIME
                                ,SCHE_ALL_TIME
                                ,SCHE_PERIOD_FLAG
                                ,SCHE_TITLE
                                ,SCHE_AREA
                                ,SCHE_CON
                                ,SCHE_REPET_FLAG
                                ,SCHE_ALARM_FLAG
                                ,SCHE_ALARM_HOW
                                ,SCHE_IMPORTANT
                                ,SCHE_CHK_FLAG
                                ,SCHE_CHK_DATE
                                ,SCHE_PUBLIC_FLAG
                                ,CONTACT_LOC
                                ,CAR_USE_FLAG
                                ,INVEST_OFFER_CD
                                ,CAR_ID
                                ,MNA_TYPE
                                ,COMPANY_ID
                                ,CUSTOMER_ID
                                ,COMPANY
                                ,CUSTOMER
                                ,ORG_ID
                                ,APPV_DOC_ID
                                ,APPV_DOC_CLASS
                                ,ATTEND_YN
                                ,REG_DATE
                                ,REG_PER_SABUN
                                ,EDIT_DATE
                                ,DEL_DATE
                                ,DEL_FLAG )
        SELECT   /* 교육 INSERT */
                 IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Period', NULL)          AS SCHE_GRP_CD
                ,B.EMP_NO       AS PER_SABUN     /* 사번     */
                ,'All'          AS SCHE_GUBUN    /* 전체일정 */
                ,A.PROJECT_ID
                ,A.ACTIVITY_ID
                ,DATE_FORMAT(A.DATE_FROM, '%Y')         AS SCHE_S_YEAR
                ,DATE_FORMAT(A.DATE_FROM, '%m')         AS SCHE_S_MONTH
                ,DATE_FORMAT(A.DATE_FROM, '%d')         AS SCHE_S_DAY
                ,DATE_FORMAT(A.DATE_FROM, '%Y-%m-%d')   AS SCHE_S_DATE
                ,'08:30'                                 AS SCHE_S_TIME
                ,DATE_FORMAT(A.DATE_TO, '%Y')           AS SCHE_E_YEAR
                ,DATE_FORMAT(A.DATE_TO, '%m')           AS SCHE_E_MONTH
                ,DATE_FORMAT(A.DATE_TO, '%d')           AS SCHE_E_DAY
                ,DATE_FORMAT(A.DATE_TO, '%Y-%m-%d')     AS SCHE_E_DATE
                ,'18:00'                                 AS SCHE_S_TIME
                ,'Y'                                    AS SCHE_ALL_TIME       /* 종일일정여부 */
                ,IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Y', 'N')  AS SCHE_PERIOD_FLAG    /* 반복일정여부 */
                ,C.EDU_NAME   AS SCHE_TITLE
                ,C.EDU_AGENCY       AS SCHE_AREA    /* 교육기관 */
                ,A.MEMO             AS SCHE_CON     /* 내용 */
                ,'None'             AS SCHE_REPET_FLAG
                ,'0'                AS SCHE_ALARM_FLAG
                ,'None'             AS SCHE_ALARM_HOW
                ,NULL               AS SCHE_IMPORTANT
                ,'N'                AS SCHE_CHK_FLAG
                ,NULL               AS SCHE_CHK_DATE
                ,'Y'                AS SCHE_PUBLIC_FLAG
                ,NULL               AS CONTACT_LOC
                ,'N'                AS CAR_USE_FLAG
                ,NULL               AS INVEST_OFFER_CD
                ,NULL               AS CAR_ID
                ,NULL               AS MNA_TYPE
                ,NULL               AS COMPANY_ID
		        ,NULL               AS CUSTOMER_ID
                ,NULL               AS COMPANY
                ,NULL               AS CUSTOMER
				,A.ORG_ID           AS ORG_ID
                ,A.APPV_DOC_ID      AS APPV_DOC_ID
                ,A.APPV_DOC_CLASS   AS APPV_DOC_CLASS
                ,C.ATTEND_YN
		        ,NOW()              AS REG_DATE
		        ,B.EMP_NO           AS REG_PER_SABUN
		        ,NOW()              AS EDIT_DATE
                ,NULL               AS DEL_DATE
                ,'N'                AS DEL_FLAG
		FROM    BS_APPV_DOC    A
               ,BS_USER_MASTER         B
               ,BS_APPV_EDUCATION_DOC C
		WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
        AND     A.APPV_DOC_ID   = C.APPV_DOC_ID
        <selectKey resultClass="int" type="post" keyProperty="scheSeq">
				SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	<!-- 교육신청 후처리2 -->
	<insert id = "approve.insertErpEntryApproveEduProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE_ENTRY (SCHE_SEQ,PER_SABUN, REG_PER_SABUN, ORG_ID, REG_DATE, EDIT_PER_SABUN, EDIT_DATE, DEL_FLAG)
        SELECT   #scheSeq#   AS SCHE_SEQ
        		,B.EMP_NO    AS PER_SABUN
		        ,B.EMP_NO    AS REG_PER_SABUN
                ,B.ORG_ID    AS ORG_ID
		        ,NOW()       AS REG_DATE
		        ,B.EMP_NO    AS EDIT_PER_SABUN
		        ,NOW()       AS EDIT_DATE
                ,'N'         AS DEL_FLAG
        FROM    BS_APPV_DOC A
               ,BS_USER_MASTER      B
        WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
        UNION ALL /*동행자 처리 1.참가자*/
        SELECT   #scheSeq#   AS SCHE_SEQ
        		,B.EMP_NO    AS PER_SABUN
		        ,D.EMP_NO    AS REG_PER_SABUN
                ,B.ORG_ID    AS ORG_ID
		        ,NOW()       AS REG_DATE
		        ,D.EMP_NO    AS EDIT_PER_SABUN
		        ,NOW()       AS EDIT_DATE
                ,'N'         AS DEL_FLAG
        FROM    BS_APPV_ENTRY_WORKER A
               ,BS_USER_MASTER      B
               ,BS_APPV_DOC C
               ,BS_USER_MASTER      D
        WHERE   A.APPV_DOC_ID   = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
        AND     C.APPV_DOC_ID   = A.APPV_DOC_ID
        AND     C.ORG_ID        = A.ORG_ID
        AND     C.USER_ID       = D.USER_ID
        AND     C.ORG_ID        = D.ORG_ID
	</insert>

	<!-- 출장신청 후처리1 -->
	<insert id = "approve.insertErpSchApproveTripProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE(SCHE_GRP_CD
                                ,PER_SABUN
                                ,SCHE_GUBUN
                                ,PROJECT_ID
                                ,ACTIVITY_ID
                                ,SCHE_S_YEAR
                                ,SCHE_S_MONTH
                                ,SCHE_S_DAY
                                ,SCHE_S_DATE
                                ,SCHE_S_TIME
                                ,SCHE_E_YEAR
                                ,SCHE_E_MONTH
                                ,SCHE_E_DAY
                                ,SCHE_E_DATE
                                ,SCHE_E_TIME
                                ,SCHE_ALL_TIME
                                ,SCHE_PERIOD_FLAG
                                ,SCHE_TITLE
                                ,SCHE_AREA
                                ,SCHE_CON
                                ,SCHE_REPET_FLAG
                                ,SCHE_ALARM_FLAG
                                ,SCHE_ALARM_HOW
                                ,SCHE_IMPORTANT
                                ,SCHE_CHK_FLAG
                                ,SCHE_CHK_DATE
                                ,SCHE_PUBLIC_FLAG
                                ,CONTACT_LOC
                                ,CAR_USE_FLAG
                                ,INVEST_OFFER_CD
                                ,CAR_ID
                                ,MNA_TYPE
                                ,COMPANY_ID
                                ,CUSTOMER_ID
                                ,COMPANY
                                ,CUSTOMER
                                ,ORG_ID
                                ,APPV_DOC_ID
                                ,APPV_DOC_CLASS
                                ,ATTEND_YN
                                ,REG_DATE
                                ,REG_PER_SABUN
                                ,EDIT_DATE
                                ,DEL_DATE
                                ,DEL_FLAG )
        SELECT   /* 출장 INSERT */
                 IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Period', NULL)          AS SCHE_GRP_CD
                ,B.EMP_NO       AS PER_SABUN     /* 사번     */
                ,'All'          AS SCHE_GUBUN    /* 전체일정 */
                ,A.PROJECT_ID
                ,A.ACTIVITY_ID
                ,DATE_FORMAT(A.DATE_FROM, '%Y')         AS SCHE_S_YEAR
                ,DATE_FORMAT(A.DATE_FROM, '%m')         AS SCHE_S_MONTH
                ,DATE_FORMAT(A.DATE_FROM, '%d')         AS SCHE_S_DAY
                ,DATE_FORMAT(A.DATE_FROM, '%Y-%m-%d')   AS SCHE_S_DATE
                ,'08:30'                                 AS SCHE_S_TIME
                ,DATE_FORMAT(A.DATE_TO, '%Y')           AS SCHE_E_YEAR
                ,DATE_FORMAT(A.DATE_TO, '%m')           AS SCHE_E_MONTH
                ,DATE_FORMAT(A.DATE_TO, '%d')           AS SCHE_E_DAY
                ,DATE_FORMAT(A.DATE_TO, '%Y-%m-%d')     AS SCHE_E_DATE
                ,'18:00'                        AS SCHE_S_TIME
                ,'Y'                            AS SCHE_ALL_TIME       /* 종일일정여부 */
                ,IF(DATEDIFF(DATE_TO,DATE_FROM)>0, 'Y', 'N')   AS SCHE_PERIOD_FLAG    /* 반복일정여부 */
                ,A.WHY   AS SCHE_TITLE
                ,IFNULL(TRIP_LOC, (SELECT X.CPN_NM FROM IB_COMPANY X WHERE X.CPN_ID = C.CPN_ID))  AS SCHE_AREA
                ,A.MEMO             AS SCHE_CON    /* 내용 */
                ,'None'             AS SCHE_REPET_FLAG
                ,'0'                AS SCHE_ALARM_FLAG
                ,'None'             AS SCHE_ALARM_HOW
                ,NULL               AS SCHE_IMPORTANT
                ,'N'                AS SCHE_CHK_FLAG
                ,NULL               AS SCHE_CHK_DATE
                ,'Y'                AS SCHE_PUBLIC_FLAG
                ,NULL               AS CONTACT_LOC
                ,'N'                AS CAR_USE_FLAG
                ,NULL               AS INVEST_OFFER_CD
                ,NULL               AS CAR_ID
                ,NULL               AS MNA_TYPE
                ,(SELECT X.S_NB FROM IB_COMPANY X WHERE X.CPN_ID = C.CPN_ID)    AS COMPANY_ID
		        ,C.CST_ID           AS CUSTOMER_ID
                ,(SELECT X.CPN_NM FROM IB_COMPANY X WHERE X.CPN_ID = C.CPN_ID)  AS COMPANY
                ,(SELECT X.CST_NM FROM IB_CUSTOMER X WHERE X.S_NB = C.CST_ID)   AS CUSTOMER
				,A.ORG_ID           AS ORG_ID
                ,A.APPV_DOC_ID     AS APPV_DOC_ID
                ,A.APPV_DOC_CLASS   AS APPV_DOC_CLASS
                ,C.ATTEND_YN
		        ,NOW()              AS REG_DATE
		        ,B.EMP_NO           AS REG_PER_SABUN
		        ,NOW()              AS EDIT_DATE
                ,NULL               AS DEL_DATE
                ,'N'                AS DEL_FLAG
		FROM    BS_APPV_DOC     A
               ,BS_USER_MASTER  B
               ,BS_APPV_TRIP_DOC C
		WHERE   A.APPV_DOC_ID  = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     A.ORG_ID        = B.ORG_ID
        AND     A.APPV_DOC_ID   = C.APPV_DOC_ID
        <selectKey resultClass="int" type="post" keyProperty="scheSeq">
				SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	<!-- 출장신청 후처리2 -->
	<insert id = "approve.insertErpEntryApproveTripProcessAfter" parameterClass = "HashMap">
		INSERT INTO ERP_SCHEDULE_ENTRY (SCHE_SEQ,PER_SABUN, REG_PER_SABUN, ORG_ID, REG_DATE, EDIT_PER_SABUN, EDIT_DATE, DEL_FLAG)
        SELECT  #scheSeq#   AS SCHE_SEQ
        		,B.EMP_NO    AS PER_SABUN
		        ,B.EMP_NO    AS REG_PER_SABUN
                ,B.ORG_ID    AS ORG_ID
		        ,NOW()       AS REG_DATE
		        ,B.EMP_NO    AS EDIT_PER_SABUN
		        ,NOW()       AS EDIT_DATE
                ,'N'         AS DEL_FLAG
        FROM    BS_APPV_DOC     A
               ,BS_USER_MASTER  B
        WHERE   A.APPV_DOC_ID  = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        UNION ALL
        SELECT  #scheSeq#   AS SCHE_SEQ
        		,B.EMP_NO    AS PER_SABUN
		        ,D.EMP_NO    AS REG_PER_SABUN
                ,B.ORG_ID    AS ORG_ID
		        ,NOW()       AS REG_DATE
		        ,D.EMP_NO    AS EDIT_PER_SABUN
		        ,NOW()       AS EDIT_DATE
                ,'N'         AS DEL_FLAG
        FROM    BS_APPV_ENTRY_WORKER      A
               ,BS_USER_MASTER      	  B
               ,BS_APPV_DOC       C
               ,BS_USER_MASTER      	  D
        WHERE   A.APPV_DOC_ID  = #appvDocId#
        AND     A.USER_ID       = B.USER_ID
        AND     C.APPV_DOC_ID  = A.APPV_DOC_ID
        AND     C.USER_ID       = D.USER_ID
        AND     C.ORG_ID        = D.ORG_ID
	</insert>
	<!-- dateFrom~dateTo 동안 승인대행자 / 동행자가 휴직상태라면 조회한다. -->
	<select id = "approve.getChkAppointedPerson"  parameterClass = "HashMap" resultClass="egovMap">
	    /* approve.getChkAppointedPerson */
		SELECT  A.USER_ID
		       ,B.NAME
		       ,A.USER_STATUS
		       ,(SELECT G.VALUE_MEAN_KOR
		 		  FROM BS_CODE_GV G
				 WHERE G.ORG_ID = B.ORG_ID
                   AND G.CODE_NAME = 'USER_STTS'
		  		   AND G.CODE_VALUE = A.USER_STATUS) 	AS USER_STATUS_NM /*재직상태한글*/
		       ,A.STTS_FROM_DT
		       ,A.STTS_END_DT
		FROM    BS_USER_STTS_HIST A
		INNER JOIN BS_USER_MASTER B ON A.USER_ID = B.USER_ID
		WHERE  1=1
		<isEmpty property="fieldType">
			<isNotEmpty property="userList">
			 AND A.USER_ID IN (
				<iterate property="userList" conjunction=",">
					(
						#userList[]#
		               )
		        </iterate>
		        )
		    </isNotEmpty>
		    <isNotEmpty property="userId">
		    AND A.USER_ID = #userId#
		    </isNotEmpty>
		</isEmpty>
		<isEqual property="fieldType" compareValue="empNo">
		  <isNotEmpty property="userList">
             AND B.EMP_NO IN (
                <iterate property="userList" conjunction=",">
                    (
                        #userList[]#
                       )
                </iterate>
                )
            </isNotEmpty>
            <isNotEmpty property="userId">
                AND B.EMP_NO = #userId#
            </isNotEmpty>
		</isEqual>
		AND A.USER_STATUS IN ('H','L','F','R')
		AND    (
				CASE WHEN A.USER_STATUS = 'H' OR A.USER_STATUS = 'L'
					 THEN STR_TO_DATE(#dateFrom#,'%Y-%m-%d') <![CDATA[<=]]>A.STTS_END_DT
					 WHEN A.USER_STATUS = 'F' OR A.USER_STATUS = 'R'
					 THEN STR_TO_DATE(#dateFrom#,'%Y-%m-%d') <![CDATA[>=]]> A.STTS_FROM_DT
				END
		        )
		ORDER BY  B.USER_ID ASC , A.STTS_FROM_DT ASC , A.STTS_END_DT ASC
	</select>

	<!-- 경조사 코드관리 페이지의 리스트를 조회한다 -->
	<select id = "approve.getEventCodeList" parameterClass="HashMap" resultClass = "HashMap">
		SELECT   A.FAMILY_EVENTS_ID								AS familyEventsId
				,A.ORG_ID										AS orgId
				,A.EVENT_CODE									AS eventCode
				,LEFT(A.EVENT_CODE,1)							AS eventType
				,C.VALUE_MEAN_KOR								AS eventTypeNm
				,B.VALUE_MEAN_KOR								AS eventName
				,B.VALUE_DESC									AS description
				,A.AMOUNT										AS amount
				,A.PERIOD										AS period
				,A.HOLIDAY										AS holiday
				,IF(A.HOLIDAY = 'Y','예','아니오')					AS holidayStr
				,A.USE_YN										AS useYn
				,A.CREATED_BY									AS createdBy
				,(SELECT NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) AS createdNm
				,DATE_FORMAT(A.CREATE_DATE, "%Y-%m-%d")								AS createDate
				,A.UPDATED_BY														AS updatedBy
				,(SELECT NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.UPDATED_BY) AS updatedNm
				,DATE_FORMAT(A.UPDATE_DATE, "%Y-%m-%d")								AS updateDate
		  FROM BS_FAMILY_EVENT A
		  INNER JOIN BS_CODE_GV B ON B.CODE_NAME = A.CODE_SET_NAME AND B.CODE_VALUE = A.EVENT_CODE AND B.ORG_ID = A.ORG_ID AND B.DELETE_FLAG = 'N'
		  INNER JOIN BS_CODE_GV C ON C.SON_CODE_ID = B.CODE_ID AND C.ORG_ID = A.ORG_ID AND B.DELETE_FLAG = 'N'
		 WHERE A.ORG_ID = #applyOrgId#
		<isNotEmpty property="searchEventType">
        AND    C.CODE_VALUE = #searchEventType#
		</isNotEmpty>
		<isNotEmpty property="searchEventNm">
        AND     B.VALUE_MEAN_KOR LIKE CONCAT('%',#searchEventNm#,'%')
		</isNotEmpty>
		ORDER BY C.SORT, B.SORT, FAMILY_EVENTS_ID DESC
	</select>
	<!-- 경조사 중복여부 체크 -->
	<select id = "approve.getChkEventInfoCount" parameterClass = "HashMap" resultClass = "Integer">
		SELECT COUNT(*)
		  FROM BS_FAMILY_EVENT
		 WHERE ORG_ID = #orgId#
		   AND EVENT_CODE = #eventCode#
	</select>
	<!-- 경조사 기준정보 저장 -->
	<insert id = "approve.insertEventInfo" parameterClass = "HashMap">
		INSERT INTO BS_FAMILY_EVENT(
									 ORG_ID
									,CODE_SET_NAME
									,EVENT_CODE
									,AMOUNT
									,PERIOD
									,HOLIDAY
									,USE_YN
									,CREATED_BY
									,CREATE_DATE
									,UPDATED_BY
									,UPDATE_DATE
								) VALUES (
									 #applyOrgId#
									,#codeSetName#
									,#eventCode#
									,#amount#
									,#period#
									,#holiday#
									,#useYn#
									,#userId#
									,NOW()
									,#userId#
									,NOW()
								)

	</insert>

	<!-- 지출결의서 기준정보 저장 -->
	<insert id = "approve.insertExpenseApprove" parameterClass = "HashMap">
		INSERT INTO BS_APPV_EXPENSE_DOC(
									 APPV_DOC_ID
									,CHARGE_TYPE
									,EXPENSE_YN
									,EXPENSE_DAY
									,ADVANCE_WISH_YN
									,ADVANCE_WISH_DATE
									,ADVANCE_WISH_REASON
									,TAX_BILL_ISSUE_DATE
									,CREATED_BY
									,CREATE_DATE
									,UPDATED_BY
									,UPDATE_DATE
								) VALUES (
									 #appvDocId#
									,#chargeType#
									,#expenseYn#
									,#expenseDay#
									,#advanceWishYn#
									,#advanceWishDate#
									,#advanceWishReason#
									,#taxBillIssueDate#
									,#userId#
									,NOW()
									,#userId#
									,NOW()
								)
	</insert>
	<!-- 지출결의서 기준정보 수정 -->
	<update id = "approve.updateExpenseApprove" parameterClass = "HashMap">
		UPDATE BS_APPV_EXPENSE_DOC
		   SET   CHARGE_TYPE          =#chargeType#
				,EXPENSE_YN           =#expenseYn#
				,EXPENSE_DAY          =#expenseDay#
				,ADVANCE_WISH_YN      =#advanceWishYn#
				,ADVANCE_WISH_DATE    =#advanceWishDate#
				,ADVANCE_WISH_REASON  =#advanceWishReason#
				,TAX_BILL_ISSUE_DATE  =#taxBillIssueDate#
				,UPDATED_BY			  =#userId#
				,UPDATE_DATE		  =NOW()
		 WHERE APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 경조사 기준정보 update -->
	<update id = "approve.updateEventInfo" parameterClass = "HashMap">
		UPDATE BS_FAMILY_EVENT
		   SET AMOUNT = #amount#
		      ,PERIOD = #period#
		      ,HOLIDAY = #holiday#
		      ,USE_YN = #useYn#
		      ,UPDATED_BY = #userId#
		      ,UPDATE_DATE = NOW()
		 WHERE  FAMILY_EVENTS_ID = #familyEventsId#
	</update>
	<!-- 경조사 기준정보 delete -->
	<delete id = "approve.deleteEventInfo" parameterClass = "HashMap">
		DELETE FROM BS_FAMILY_EVENT
		 WHERE FAMILY_EVENTS_ID = #familyEventsId#
	</delete>
	<!-- 품의서 승인취소 요청 -->
	<update id = "approve.processApproveCancelReq" parameterClass = "HashMap">
		UPDATE BS_APPV_DOC
		  SET DOC_STATUS = 'CNL_SUBMIT'
		     ,APPV_CANCEL_MEMO = #appvCancelMemo#
		     ,UPDATED_BY = #userId#
		     ,UPDATE_DATE = NOW()
		 WHERE APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 품의서 승인취소 요청 -->
	<update id = "approve.updateErpSchApproveCancel" parameterClass = "HashMap">
		UPDATE ERP_SCHEDULE A INNER JOIN ERP_SCHEDULE_ENTRY B ON A.SCHE_SEQ = B.SCHE_SEQ
		  SET A.DEL_FLAG = 'Y'
		     ,B.DEL_FLAG = 'Y'
		 WHERE A.APPV_DOC_ID = #appvDocId#
	</update>
	<!-- 품의서 취소승인권한 -->
	<select id = "approve.getCancelRoleCnt" parameterClass = "HashMap" resultClass = "Integer">
		SELECT COUNT(*) FROM BS_USER_ROLE_LIST A
              INNER JOIN BS_ROLE_MENU_LIST B ON A.ROLE_ID = B.ROLE_ID AND B.ENABLE = 'Y'
              INNER JOIN BS_MENU_LIST C ON B.MENU_ID = C.MENU_ID AND C.ENABLE = 'Y'
		WHERE A.USER_ID = #userId#
		AND   C.MENU_TITLE_ENG = 'APPROVE_REQ_CANCEL'
	</select>
	<!-- 휴가,휴직 ,경조 저장시 프로젝트,엑티비티 정보를 조회한다. -->
	<select id = "approve.getActivityInfo" parameterClass = "HashMap" resultClass = "egovMap">
		SELECT A.ACTIVITY_ID
		      ,A.PROJECT_ID
		  FROM BS_ACTIVITY A , BS_PROJECT B
		 WHERE A.APPV_DOC_CLASS = #appvDocClass#
		   AND A.APPV_DOC_TYPE = #searchActivityDocType#
		   AND A.PROJECT_ID = B.PROJECT_ID
		   AND B.ORG_ID = #orgId#
	</select>
	<!-- 품의서 문서번호 리스트 -->
	<select id = "approve.approveDocNumList" parameterClass = "HashMap" resultClass = "egovMap">
		SELECT  A.ORG_ID, A.APPV_DOC_CLASS, A.APPV_DOC_CLASS_NAME, A.APPV_DOC_TYPE, A.APPV_DOC_TYPE_NAME
		       ,IFNULL(B.APPV_DOC_NUM_RULE_DATE, 'YYMMDD') APPV_DOC_NUM_RULE_DATE
		       ,IFNULL(B.APPV_DOC_NUM_RULE_MID_NAME, A.APPV_DOC_NUM_RULE_MID_NAME) APPV_DOC_NUM_RULE_MID_NAME
		       ,IFNULL(B.APPV_DOC_NUM_RULE_SEQ, '4DIGIT') APPV_DOC_NUM_RULE_SEQ
		       ,IFNULL(B.USE_YN, 'Y') USE_YN
		       ,B.CREATED_BY
		       ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = B.CREATED_BY) AS CREATED_NAME
		       ,B.CREATE_DATE
		       ,B.UPDATED_BY
		       ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = B.UPDATED_BY) AS UPDATED_NAME
		       ,B.UPDATE_DATE
		       ,A.SORT1
			   ,A.SORT2
		FROM
			(
				SELECT * FROM (
					SELECT  A.ORG_ID
					       ,B.VALUE          AS  APPV_DOC_CLASS
					       ,B.MEANING_KOR    AS  APPV_DOC_CLASS_NAME
					       ,D.VALUE          AS  APPV_DOC_TYPE
					       ,D.MEANING_KOR    AS  APPV_DOC_TYPE_NAME
					       ,D.DESCRIPTION    AS  APPV_DOC_NUM_RULE_MID_NAME
					       ,B.SORT			 AS  SORT1
					       ,D.SORT			 AS  SORT2
					FROM    BS_CODE_SET  A
					        INNER JOIN BS_CODE_LIST B   ON A.CODE_SET_ID = B.CODE_SET_ID
					        INNER JOIN BS_CODE_SET  C   ON B.SON_SET_ID  = C.CODE_SET_ID
					        INNER JOIN BS_CODE_LIST D   ON C.CODE_SET_ID = D.CODE_SET_ID
					WHERE   A.ORG_ID = #applyOrgId#  /* 각 관계사 코드 */ AND A.CODE_SET_NAME = 'APPV_DOC_CLASS'
					AND     A.DELETE_FLAG = 'N'
					AND     B.DELETE_FLAG = 'N'
					AND     C.DELETE_FLAG = 'N'
					AND     D.DELETE_FLAG = 'N'
					AND     B.VALUE  != 'COMPANY'

					UNION ALL

					SELECT  A.ORG_ID
					       ,A.APPV_DOC_CLASS 						 AS  APPV_DOC_CLASS
					       ,'사내문서'    								 AS  APPV_DOC_CLASS_NAME
					       ,A.APPV_DOC_TYPE_NAME             		 AS  APPV_DOC_TYPE
					       ,A.APPV_DOC_TYPE_NAME   					 AS  APPV_DOC_TYPE_NAME
					       ,A.APPV_DOC_NUM_RULE_MID_NAME   			 AS  APPV_DOC_NUM_RULE_MID_NAME
					       ,99										 AS  SORT1
					       ,A.APPV_COMPANY_FORM_ID			 		 AS  SORT2
					  FROM BS_APPV_COMPANY_FORM A
					 WHERE A.OPEN_YN = 'Y'
					   AND A.DELETE_FLAG = 'N'
					   AND A.ORG_ID = #applyOrgId#
				   ) X ORDER BY X.SORT1, X.SORT2
				) A
				LEFT JOIN(
				SELECT  APPV_DOC_NUM_RULE_ID
				       ,ORG_ID
				       ,APPV_DOC_CLASS
				       ,APPV_DOC_TYPE
				       ,APPV_DOC_NUM_RULE_DATE
				       ,APPV_DOC_NUM_RULE_MID_NAME
				       ,APPV_DOC_NUM_RULE_SEQ
				       ,USE_YN
				       ,CREATED_BY
				       ,CREATE_DATE
				       ,UPDATED_BY
				       ,UPDATE_DATE
				FROM    BS_APPV_DOC_NUM_RULE B
				WHERE   ORG_ID = #applyOrgId#
				<isNotEmpty property="useYn">
					AND USE_YN = #useYn#
				</isNotEmpty>
			) B ON A.ORG_ID = B.ORG_ID AND A.APPV_DOC_CLASS = B.APPV_DOC_CLASS AND A.APPV_DOC_TYPE = B.APPV_DOC_TYPE
			WHERE 1=1
			<isNotEmpty property="appvDocClass">
			AND A.APPV_DOC_CLASS = #appvDocClass#
			</isNotEmpty>
			<isNotEmpty property="appvDocType">
			AND A.APPV_DOC_TYPE = #appvDocType#
			</isNotEmpty>
			ORDER BY SORT1, SORT2
	</select>

	<!-- 품의서 문서번호 삭제 -->
	<delete id = "approve.deleteAppvDocNumRule"  parameterClass = "HashMap">
		DELETE FROM BS_APPV_DOC_NUM_RULE
		WHERE ORG_ID = #applyOrgId#
	</delete>

	<!-- 품의서 문서번호 저장 -->
	<insert id = "approve.insertAppvDocNumRule" parameterClass = "HashMap">
		INSERT INTO BS_APPV_DOC_NUM_RULE(
										 ORG_ID
										,APPV_DOC_CLASS
										,APPV_DOC_TYPE
										,APPV_DOC_NUM_RULE_DATE
										,APPV_DOC_NUM_RULE_MID_NAME
										,APPV_DOC_NUM_RULE_SEQ
										,USE_YN
										,CREATED_BY
										,CREATE_DATE
										,UPDATED_BY
										,UPDATE_DATE
									) VALUES (
										 #applyOrgId#
										,#appvDocClass#
										,#appvDocType#
										,#appvDocNumRuleDate#
										,#appvDocNumRuleMidName#
										,#appvDocNumRuleSeq#
										,#useYn#
										,IF(#createdBy#='',#userId#,#createdBy#)
										,IF(#createDate#='',NOW(),#createDate#)
										,#userId#
										,now()
									)
	</insert>
	<!--참조자가 조회하면 READ_DATE를 업데이트한다  -->
	<update id = "approve.updateAppvCcReadDate" parameterClass = "HashMap">
		UPDATE BS_APPV_CC A , BS_APPV_DOC B
		   SET A.READ_DATE = NOW()
		 WHERE A.APPV_DOC_ID = #appvDocId#
		    AND A.USER_ID = #userId#
		    AND A.READ_DATE IS NULL
		    AND B.APPV_DOC_ID=A.APPV_DOC_ID
		    AND IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
	</update>
	<!--결수신자가 조회하면 READ_DATE를 업데이트한다  -->
	<update id = "approve.updateAppvRcReadDate" parameterClass = "HashMap">
		UPDATE BS_APPV_RECEIVER A , BS_APPV_DOC B
		   SET A.READ_DATE = NOW()
		 WHERE A.APPV_DOC_ID = #appvDocId#
		    AND A.APPV_DOC_CLASS = #appvDocClass#
		    AND A.USER_ID = #userId#
		    AND A.READ_DATE IS NULL
		    /*최초 수신 확인한 사람이 있을때만 자동 업데이트함*/
		    AND (
		    	 SELECT COUNT(*) FROM (
			    	 SELECT X.APPV_RC_ID
			    	   FROM BS_APPV_RECEIVER X
			    	  WHERE X.APPV_DOC_ID = #appvDocId#
			    	    AND X.APPV_DOC_CLASS = #appvDocClass#
			    	    AND X.RECEIPT_YN ='Y'
			    	  ) Y
		    	 ) >0
		    AND B.APPV_DOC_ID=A.APPV_DOC_ID
		    AND B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
	</update>
	<!-- 수신확인 전 다른 수신자가 수신확인했는지 체크한다 -->
	<select id = "approve.getAppvRcChkCnt"  parameterClass = "HashMap" resultClass="Integer">
		SELECT COUNT(*)
		  FROM BS_APPV_RECEIVER
		 WHERE APPV_DOC_ID = #appvDocId#
		   AND APPV_DOC_CLASS = #appvDocClass#
		   AND RECEIPT_YN = 'Y'
	</select>
	<!--수신확인  -->
	<update id = "approve.updateAppvRcReceipt" parameterClass = "HashMap">
		UPDATE BS_APPV_RECEIVER A
		   SET A.READ_DATE = NOW() , RECEIPT_YN = 'Y' , RECEIPT_USER_MEMO = #receiptUserMemo#
		 WHERE A.APPV_DOC_ID = #appvDocId#
		    AND A.APPV_DOC_CLASS = #appvDocClass#
		    AND A.USER_ID = #userId#
	</update>
	<!-- 결재라인 Header 조회 -->
	<select id="approve.getAppvHeaderList" parameterClass="HashMap" resultClass="egovMap">
		SELECT A.APPV_HEADER_ID
			  ,A.APPV_HEADER_NAME
		  FROM BS_APPROVE_HEADER A
		 WHERE A.APPV_DOC_CLASS =#appvDocClass#
		   AND A.APPV_DOC_TYPE = #appvDocType#
		   <isEqual property="appvDocClass" compareValue="BUY">        /* 구매는 전결규정을 사용하지 않는것만 조회 */
               AND DECISION_YN = 'N'
           </isEqual>
		   AND A.ORG_ID = #applyOrgId#
		   AND A.ENABLE = 'Y'
		   AND A.CLOSED = 'N'
	</select>
	<!-- 보고서 - 일정 선택 팝업 -->
	<select id="approve.getAppvScheduleList" parameterClass="HashMap" resultClass="egovMap">
		<![CDATA[
				SELECT  A.SCHE_SEQ
						, A.SCHE_TITLE
					    , A.SCHE_S_DATE
					    , A.SCHE_E_DATE
					    , A.SCHE_S_TIME
					    , A.SCHE_E_TIME
					    , B.PROJECT_ID
					    , B.PROJECT_CODE
					    , B.NAME AS PROJECT_NM
					    , C.ACTIVITY_ID
					    , C.NAME AS ACTIVITY_NM
					    , A.SCHE_ALL_TIME
					    , A.SCHE_GRP_CD
					    , A.ATTEND_YN
					    , (CASE WHEN DATE_FORMAT(NOW(), '%Y-%m-%d') BETWEEN A.SCHE_S_DATE AND  A.SCHE_E_DATE THEN 'Y'
					             ELSE 'N'
					       END) AS TODAY_YN  /* 오늘 일정여부 */
					FROM ERP_SCHEDULE A
					    LEFT JOIN BS_PROJECT B ON A.PROJECT_ID = B.PROJECT_ID
					    LEFT JOIN BS_ACTIVITY C ON A.ACTIVITY_ID = C.ACTIVITY_ID
					WHERE 1=1
					AND A.DEL_FLAG = 'N'
					AND (
					       A.SCHE_S_DATE BETWEEN #startStr#
					                   AND     #endStr#
					       OR
					       A.SCHE_E_DATE BETWEEN #startStr#
					                   AND     #endStr#
					       OR
					       (A.SCHE_S_DATE  <  #startStr#  AND A.SCHE_E_DATE  >  #endStr# )
					      )
					AND A.SCHE_SEQ IN (
					        SELECT DISTINCT SCHE_SEQ
					        FROM ERP_SCHEDULE_ENTRY J, BS_USER_MASTER K
					        WHERE J.PER_SABUN = K.EMP_NO
					        AND J.DEL_FLAG = 'N'
					        AND J.ORG_ID = #orgId#
					        AND K.USER_ID = IFNULL(#selectStaffId#,#userId#)
					    )
				]]>
	</select>
	 <!-- 결재헤더 삭제 -->
	<delete id="approve.deleteApproveHeaderIndividual" parameterClass="HashMap">
		DELETE  FROM BS_APPROVE_HEADER_INDIVIDUAL
		WHERE   APPV_HEADER_ID = #deleteHeaderId#
        AND     ORG_ID = #orgId#
	</delete>
	 <!-- 결재순서 삭제 -->
	<delete id="approve.deleteApproveLineIndividual" parameterClass="HashMap">
		DELETE  FROM BS_APPROVE_LINE_INDIVIDUAL
		WHERE   APPV_HEADER_ID = #deleteHeaderId#
        AND     ORG_ID = #orgId#
	</delete>
	<!-- 결재라인 직접지정 정보를 저장한다 -->
	<insert id = "approve.insertApproveHeaderIndividual" parameterClass = "HashMap">
		INSERT INTO BS_APPROVE_HEADER_INDIVIDUAL (
												 APPV_DOC_ID
												,ORG_ID
												,APPV_DOC_CLASS
												,APPV_DOC_TYPE
												,CREATED_BY
												,CREATE_DATE
												,UPDATED_BY
												,UPDATE_DATE
												) VALUES (
												 #appvDocId#
												,#orgId#
												,#appvDocClass#
												,#appvDocType#
												,#userId#
												,now()
												,#userId#
												,now()
												)
		<selectKey resultClass="int" type="post" keyProperty="appvHeaderId">
		SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	<!-- 결재순서 등록 -->
    <insert id="approve.insertApproveLineIndividual" parameterClass="approveVo">
		INSERT INTO BS_APPROVE_LINE_INDIVIDUAL
		            (
		             APPV_HEADER_ID
		            ,ORG_ID
		            ,APPV_SEQ
		            ,APPV_CLASS
		            ,APPV_LINE_TYPE
		            ,DEPT_ID
		            ,DEPT_LEVEL
		            ,APPV_USER_ID
		            ,CREATED_BY
		            ,CREATE_DATE
		            ,UPDATED_BY
		            ,UPDATE_DATE
		            )
		VALUES      (
		             #appvHeaderId#
		            ,#orgId#
		            ,#appvSeq#
		            ,#appvClass#
		            ,#appvLineType#
		            <isEmpty  property="deptId">
		                ,NULL
		            </isEmpty>
		            <isNotEmpty  property="deptId">
                        ,#deptId#
                    </isNotEmpty>
		            ,#deptLevel#
		            <isEmpty property="appvUserId">
		                ,NULL
		            </isEmpty>
		            <isNotEmpty property="appvUserId">
                        ,#appvUserId#
                    </isNotEmpty>
		            ,#userId#
		            ,NOW()
		            ,#userId#
		            ,NOW()
		            )
    </insert>

    <!-- 결재순서 목록 조회 -->
    <select id="approve.selectApproveLineListIndividual" parameterClass="HashMap" resultClass="egovMap">
		SELECT  /*+ 결재순서 */
		         A.APPV_LINE_ID
		        ,A.APPV_HEADER_ID
		        ,A.ORG_ID
		        ,A.APPV_SEQ
		        ,A.APPV_CLASS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_CLASS' AND X.CODE_VALUE = A.APPV_CLASS) AS APPV_CLASS_NM
		        ,A.APPV_LINE_TYPE
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_LINE_TYPE' AND X.CODE_VALUE = A.APPV_LINE_TYPE) AS APPV_LINE_TYPE_NM
		        ,A.DEPT_ID
		        ,(SELECT X.KOR_NAME FROM BASE.BS_DEPARTMENT X WHERE X.DEPT_ID = A.DEPT_ID) AS DEPT_NM
		        ,A.DEPT_LEVEL
		        ,A.APPV_USER_ID
		        ,(SELECT X.NAME FROM BASE.BS_USER_MASTER X WHERE X.USER_ID = A.APPV_USER_ID)    AS APPV_USER_NM
		        ,IF(A.DEPT_ID IS NOT NULL, (SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = A.DEPT_ID)
                                        , (SELECT   Y.KOR_NAME
                                           FROM     BS_USER_DEPARTMENT X
                                                   ,BS_DEPARTMENT      Y
                                           WHERE    X.USER_ID = A.APPV_USER_ID
                                           AND      X.MAIN_YN = 'Y'
                                           AND      X.ENABLE = 'Y'
                                           AND      X.DELETE_FLAG = 'N'
                                           AND      Y.DEPT_ID = X.DEPT_ID)
                  ) AS APPV_DEPT_NM
               ,(SELECT G.VALUE_MEAN_KOR
                 FROM   BS_CODE_GV G
                 WHERE  G.ORG_ID = #orgId#
                 AND    G.CODE_NAME = 'RANK'
                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.APPV_USER_ID)) AS RANK_NM
		        ,A.CREATED_BY
		        ,(SELECT X.NAME FROM BASE.BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY)  AS CREATED_NM
		        ,A.CREATE_DATE
		        ,A.UPDATED_BY
		        ,(SELECT X.NAME FROM BASE.BS_USER_MASTER X WHERE X.USER_ID = A.UPDATED_BY)  AS UPDATED_NM
		        ,A.UPDATE_DATE
		FROM    BS_APPROVE_LINE_INDIVIDUAL A , BS_APPROVE_HEADER_INDIVIDUAL B
		WHERE   B.APPV_DOC_ID = #appvDocId#
		AND   	B.APPV_HEADER_ID =A.APPV_HEADER_ID
		AND     A.ORG_ID = #orgId#
		ORDER BY A.APPV_SEQ
    </select>

    <!-- 결재자가 경조사의 금액 변경 -->
    <update id = "approve.modifyAprvEventAmount" parameterClass = "HashMap">
    	UPDATE BS_APPV_DOC A
    	   SET A.AMOUNT = #amountEvent#
    	   	  ,A.UPDATED_BY = #userId#
			  ,A.UPDATE_DATE = NOW()
    	 WHERE A.APPV_DOC_ID = #appvDocId#
    </update>

    <!-- 상신하려는 문서의 문서번호 사용여부를 조회한다 -->
	<select id="approve.appvDocNumUseChk" parameterClass="HashMap" resultClass="Integer">
	   SELECT IF(
				 (SELECT COUNT(*) FROM BS_APPV_DOC_NUM_RULE WHERE ORG_ID = #orgId#)=0,1,
				 IF((SELECT   COUNT(*) FROM    BS_APPV_DOC_NUM_RULE A WHERE A.ORG_ID = #orgId# AND A.USE_YN = 'N' AND A.APPV_DOC_CLASS = #appvDocClass# AND A.APPV_DOC_TYPE = #appvDocType#)>0,0,1)
	   			) AS appvDocNumUseChk
	</select>

	<!-- ////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!--전체문서총개수 -->
	<select id = "approve.getAppvDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* approve.getAppvDocListTotalCnt..*/
	         COUNT(*)
		FROM  BS_APPV_DOC A
		WHERE   1=1
          AND A.DOC_STATUS != 'WORKING'
		<isNotEmpty property="secretYn">
            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
                AND A.ORG_ID = #orgId#
                AND A.USER_ID = #userId#
            </isEqual>
            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
                AND A.ORG_ID = #applyOrgId#
            </isEqual>
       </isNotEmpty>
       <isEmpty property="secretYn">
          AND A.ORG_ID = #orgId#
          AND   A.USER_ID = #userId#
        </isEmpty>
	</select>

	<!--기안문서 List -->
	<select id = "approve.getAppvDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT * FROM (
			SELECT   /*approve.getAppvDocList */
		         A.APPV_DOC_ID
		        ,A.ORG_ID
		        ,A.APPV_DOC_CLASS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
		        ,A.APPV_DOC_TYPE
		        ,(SELECT X.VALUE_MEAN_KOR
			            FROM BS_CODE_GV X
			           WHERE X.ORG_ID = #orgId#
			             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
			             AND X.CODE_VALUE = A.APPV_DOC_TYPE) AS APPV_DOC_TYPE_NM
		        ,A.DOC_STATUS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
		        ,A.USER_ID
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		        ,IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) AS CREATE_DATE
		        ,A.DOC_TITLE AS TITLE
		        ,(
       		  		(SELECT COUNT(*)
				       FROM BS_APPV_PROCESS X
					  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						AND X.APPV_COMMENT IS NOT NULL
						AND X.APPV_COMMENT != '')
					+
					(SELECT
							 COUNT(*)
					   FROM BS_APPV_PROCESS X
					  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						AND X.CANCEL_COMMENT != ''
						AND X.CANCEL_COMMENT IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_RECEIVER X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
					   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_EXPENSE_DOC X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
					   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
					+
					(SELECT COUNT(*)
					  FROM BS_APPV_EXPENSE_DOC_UPDATE X
					 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

		        	) AS COMMENT_CNT
			    ,A.APPV_DOC_NUM
			    ,'ALL' AS DETAIL_TYPE
			FROM    BS_APPV_DOC A

			WHERE   1=1
			  AND A.DOC_STATUS != 'WORKING'
			<isNotEmpty property="secretYn">
	            <isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
	                AND A.ORG_ID = #orgId#
	                AND A.USER_ID = #userId#
	            </isEqual>
	            <isEqual property="secretYn" compareValue="A">        /* 메인에서전체보기 */
	                AND A.ORG_ID = #applyOrgId#
	            </isEqual>
	       </isNotEmpty>
	       <isEmpty property="secretYn">
	          AND A.ORG_ID = #orgId#
	          AND   A.USER_ID = #userId#
	        </isEmpty>


	       	<isEqual property="secretYn" compareValue="Y">        /* 메인에서 개인보기 */
	       		UNION ALL

				SELECT * FROM (
		       		SELECT
			         A.APPV_DOC_ID
			        ,A.ORG_ID
			        ,A.APPV_DOC_CLASS
			        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
			        ,A.APPV_DOC_TYPE
			        ,(SELECT X.VALUE_MEAN_KOR
				            FROM BS_CODE_GV X
				           WHERE X.ORG_ID = #orgId#
				             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
				             AND X.CODE_VALUE = A.APPV_DOC_TYPE) AS APPV_DOC_TYPE_NM
			        ,A.DOC_STATUS
			        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
			        ,A.USER_ID
			        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
			        ,IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) AS CREATE_DATE
			        ,A.DOC_TITLE AS TITLE
			        ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT
				    ,A.APPV_DOC_NUM
				    ,'REF' AS DETAIL_TYPE
				FROM    BS_APPV_DOC A
				INNER JOIN BS_APPV_CC B
				WHERE   1=1
		       	 AND A.DOC_STATUS != 'WORKING'
		       	 AND A.APPV_DOC_ID = B.APPV_DOC_ID
		       	 AND B.USER_ID = #userId#

		       	 UNION ALL

		       		SELECT
			         A.APPV_DOC_ID
			        ,A.ORG_ID
			        ,A.APPV_DOC_CLASS
			        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
			        ,A.APPV_DOC_TYPE
			        ,(SELECT X.VALUE_MEAN_KOR
				            FROM BS_CODE_GV X
				           WHERE X.ORG_ID = #orgId#
				             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
				             AND X.CODE_VALUE = A.APPV_DOC_TYPE) AS APPV_DOC_TYPE_NM
			        ,A.DOC_STATUS
			        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
			        ,A.USER_ID
			        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
			        ,IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) AS CREATE_DATE
			        ,A.DOC_TITLE AS TITLE
			        ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT
				    ,A.APPV_DOC_NUM
				    ,'RC' AS DETAIL_TYPE
				FROM    BS_APPV_DOC A
				INNER JOIN BS_APPV_RECEIVER B
				WHERE   1=1
		       	 AND A.DOC_STATUS != 'WORKING'
		       	 AND A.APPV_DOC_ID = B.APPV_DOC_ID
		       	 AND B.USER_ID = #userId#
			) B
			GROUP BY B.APPV_DOC_ID
	       	</isEqual>

        ) A

        ORDER BY IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) DESC
		<isNotEqual property="recordCountPerPage" compareValue="0">
			LIMIT #firstIndex#, #recordCountPerPage#
		</isNotEqual>

	</select>
	<!-- 사내서식저장 인서트 -->
	<insert id = "approve.insertApproveCompanyForm" parameterClass = "HashMap">
		INSERT INTO /*approve.insertApproveCompanyForm */
					BS_APPV_COMPANY_FORM (
				 ORG_ID
				,APPV_DOC_CLASS
				,APPV_DOC_TYPE_NAME
				,APPV_DOC_NUM_RULE_MID_NAME
				,USER_TYPE
				,PROJECT_TYPE
				,APPROVE_LINE_TYPE
				,SCHEDULE_USE_YN
				,SCHEDULE_USE_TYPE
				,LINK_DOC_USE_YN
				,LINK_DOC_USE_TYPE
				,PROJECT_CHOICE_YN
				,TITLE_USE_YN
				,DOC_TITLE
				,FILE_USE_YN
				,FILE_USE_TYPE
				,DOC_CONTENT
				,OPEN_YN
				,DELETE_FLAG
				,CREATED_BY
				,CREATE_DATE
				,UPDATED_BY
				,UPDATE_DATE
			) VALUES (
				 #applyOrgId#
				,#appvDocClass#
				,#appvDocTypeName#
				,#appvDocNumRuleMidName#
				,#userType#
				,#projectType#
				,#approveLineType#
				,#scheduleUseYn#
				,#scheduleUseType#
				,#linkDocUseYn#
				,#linkDocUseType#
				,#projectChoiceYn#
				,#titleUseYn#
				,#docTitle#
				,#fileUseYn#
				,#fileUseType#
				,#docContent#
				,#openYn#
				,'N'
				,#userId#
				,NOW()
				,#userId#
				,NOW()
			)

	</insert>
	<!-- 사내서식수정 -->
	<update id = "approve.updateApproveCompanyForm" parameterClass = "HashMap">
		UPDATE  /*approve.updateApproveCompanyForm */
				 BS_APPV_COMPANY_FORM
		   SET   ORG_ID                      =#applyOrgId#
				,APPV_DOC_TYPE_NAME          =#appvDocTypeName#
				,APPV_DOC_NUM_RULE_MID_NAME  =#appvDocNumRuleMidName#
				,USER_TYPE                   =#userType#
				,PROJECT_TYPE                =#projectType#
				,APPROVE_LINE_TYPE           =#approveLineType#
				,SCHEDULE_USE_YN             =#scheduleUseYn#
				,SCHEDULE_USE_TYPE           =#scheduleUseType#
				,LINK_DOC_USE_YN             =#linkDocUseYn#
				,LINK_DOC_USE_TYPE           =#linkDocUseType#
				,PROJECT_CHOICE_YN           =#projectChoiceYn#
				,TITLE_USE_YN                =#titleUseYn#
				,DOC_TITLE                   =#docTitle#
				,FILE_USE_YN                 =#fileUseYn#
				,FILE_USE_TYPE               =#fileUseType#
				,DOC_CONTENT                 =#docContent#
				,OPEN_YN                     =#openYn#
				,UPDATED_BY                  =#userId#
				,UPDATE_DATE                 =NOW()
		WHERE APPV_COMPANY_FORM_ID = #appvCompanyFormId#
	</update>
	<!-- 사내서식 수정 전 결재라인 문서타입 업데이트 -->
	<update id = "approve.updateApproveLineForCompanyForm" parameterClass = "HashMap">
		UPDATE BS_APPROVE_HEADER A
		   SET A.APPV_DOC_TYPE = #appvDocTypeName#
		 	  ,A.UPDATED_BY = #userId#
		 	  ,A.UPDATE_DATE = NOW()
		 WHERE A.APPV_DOC_TYPE = (SELECT X.APPV_DOC_TYPE_NAME FROM BS_APPV_COMPANY_FORM X WHERE X.APPV_COMPANY_FORM_ID = #appvCompanyFormId#)
		   AND A.ORG_ID = #applyOrgId#
	</update>
	<!-- 사내서식삭제 -->
	<update id = "approve.deleteApproveCompanyForm" parameterClass = "HashMap">
		UPDATE BS_APPV_COMPANY_FORM
		   SET   DELETE_FLAG 				 ='Y'
		   		,DELETE_DATE 				 =NOW()
		   		,DELETED_BY 				 =#userId#
				,UPDATED_BY                  =#userId#
				,UPDATE_DATE                 =NOW()
		WHERE APPV_COMPANY_FORM_ID = #appvCompanyFormId#
	</update>
	<!--사내서식 구분 유효성 체크 -->
	<select id = "approve.getAppvDocNumRuleMidNameCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT COUNT(*)
		  FROM BS_APPV_COMPANY_FORM
		 WHERE ORG_ID = #applyOrgId#
		   AND APPV_DOC_NUM_RULE_MID_NAME = #appvDocNumRuleMidName#
	</select>

	<!--사내서식 List -->
	<select id = "approve.getCompanyFormList" parameterClass="HashMap" resultClass="egovMap">
		SELECT * FROM (
						SELECT   /* approve.getCompanyFormList */
								 A.APPV_COMPANY_FORM_ID
								,A.ORG_ID
								,A.APPV_DOC_TYPE_NAME
								,A.APPV_DOC_NUM_RULE_MID_NAME
								,A.OPEN_YN
								,A.DELETE_FLAG
								,A.DELETE_DATE
								,A.DELETED_BY
								,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.DELETED_BY) AS DELETED_NM
								,A.CREATED_BY
								,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) AS CREATED_NM
								,A.CREATE_DATE
								,A.UPDATED_BY
								,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.UPDATED_BY) AS UPDATED_NM
								,A.UPDATE_DATE
								<isEqual property="ruleUseYn" compareValue="Y">
								,CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_USER_ID IS NULL OR A.READ_USER_ID NOT LIKE CONCAT('%|',#userId#,'|%') , 'Y' , 'N')
									  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.CREATE_DATE)<![CDATA[<=]]>#markDayCnt#,'Y','N')
								 END AS newYn
								</isEqual>
								<isEqual property="ruleUseYn" compareValue="N">
									,IF(DATEDIFF(NOW(),A.CREATE_DATE)<![CDATA[<=]]>3,'Y','N') AS newYn
								</isEqual>
								, (
									SELECT COUNT(*)
									  FROM BS_APPROVE_HEADER X
									 WHERE X.APPV_DOC_CLASS = A.APPV_DOC_CLASS
									   AND X.APPV_DOC_TYPE = A.APPV_DOC_TYPE_NAME
									   AND X.ORG_ID = #orgId#
									   AND X.ENABLE = 'Y'
									   AND X.CLOSED = 'N'
									) AS APPV_LINE_HEADER_CNT
								,A.APPROVE_LINE_TYPE
								,A.PROJECT_TYPE
						FROM    BS_APPV_COMPANY_FORM A

						WHERE   1=1
						  AND   A.ORG_ID = #applyOrgId#
						  <isEqual property="useDocYn" compareValue="Y">
						  	AND A.OPEN_YN = 'Y'
						  	AND A.DELETE_FLAG = 'N'
						  </isEqual>
						  ) X WHERE 1=1
							  <isNotEmpty property="searchOpenYn">
							 	AND X.OPEN_YN = #searchOpenYn#
							  </isNotEmpty>
							  <isNotEmpty property="searchDeleteFlag">
							 	AND X.DELETE_FLAG = #searchDeleteFlag#
							  </isNotEmpty>
							  <isNotEmpty property="searchTitle">
							  		<isEmpty property="searchSelect">
							  			AND (
							  				X.APPV_DOC_TYPE_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  				OR X.APPV_DOC_NUM_RULE_MID_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  				OR X.CREATED_NM LIKE CONCAT('%',#searchTitle#,'%')
							  				)
							  		</isEmpty>
							  		<isEqual property="searchSelect" compareValue="searchDocTypeName">
							  			AND  X.APPV_DOC_TYPE_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  		</isEqual>
							  		<isEqual property="searchSelect" compareValue="searchMidName">
							  			AND  X.APPV_DOC_NUM_RULE_MID_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  		</isEqual>
							  		<isEqual property="searchSelect" compareValue="searchCreateNm">
							  			AND  X.CREATED_NM LIKE CONCAT('%',#searchTitle#,'%')
							  		</isEqual>
							  </isNotEmpty>

							ORDER BY X.CREATE_DATE DESC
							<isNotEqual property="recordCountPerPage" compareValue="0">
								LIMIT #firstIndex#, #recordCountPerPage#
							</isNotEqual>
	</select>

	<!--사내서식 List -->
	<select id = "approve.getCompanyFormListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT COUNT(*) FROM (
						SELECT   /* approve.getCompanyFormListTotalCnt */
								 A.APPV_COMPANY_FORM_ID
								,A.ORG_ID
								,A.APPV_DOC_TYPE_NAME
								,A.APPV_DOC_NUM_RULE_MID_NAME
								,A.OPEN_YN
								,A.DELETE_FLAG
								,A.DELETE_DATE
								,A.DELETED_BY
								,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.DELETED_BY) AS DELETED_NM
								,A.CREATED_BY
								,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) AS CREATED_NM
								,A.CREATE_DATE
								,A.UPDATED_BY
								,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.UPDATED_BY) AS UPDATED_NM
								,A.UPDATE_DATE
						FROM    BS_APPV_COMPANY_FORM A

						WHERE   1=1
						  AND   A.ORG_ID = #orgId#
						  <isEqual property="useDocYn" compareValue="Y">
						  	AND A.OPEN_YN = 'Y'
						  	AND A.DELETE_FLAG = 'N'
						  </isEqual>
						  ) X WHERE 1=1
							  <isNotEmpty property="searchOpenYn">
							 	AND X.OPEN_YN = #searchOpenYn#
							  </isNotEmpty>
							  <isNotEmpty property="searchDeleteFlag">
							 	AND X.DELETE_FLAG = #searchDeleteFlag#
							  </isNotEmpty>
							  <isNotEmpty property="searchTitle">
							  		<isEmpty property="searchSelect">
							  			AND (
							  				X.APPV_DOC_TYPE_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  				OR X.APPV_DOC_NUM_RULE_MID_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  				OR X.CREATED_NM LIKE CONCAT('%',#searchTitle#,'%')
							  				)
							  		</isEmpty>
							  		<isEqual property="searchSelect" compareValue="searchDocTypeName">
							  			AND  X.APPV_DOC_TYPE_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  		</isEqual>
							  		<isEqual property="searchSelect" compareValue="searchMidName">
							  			AND  X.APPV_DOC_NUM_RULE_MID_NAME LIKE CONCAT('%',#searchTitle#,'%')
							  		</isEqual>
							  		<isEqual property="searchSelect" compareValue="searchCreateNm">
							  			AND  X.CREATED_NM LIKE CONCAT('%',#searchTitle#,'%')
							  		</isEqual>
							  </isNotEmpty>
	</select>

	<!-- 사내서식 폼 상세 -->
	<select id = "approve.getCompanyFormInfo" parameterClass="HashMap" resultClass="egovMap">
		SELECT   /* approve.getCompanyFormInfo */
				 A.APPV_COMPANY_FORM_ID
				,A.ORG_ID
				,A.APPV_DOC_CLASS
				,A.APPV_DOC_TYPE_NAME
				,A.APPV_DOC_NUM_RULE_MID_NAME
				,A.USER_TYPE
				,A.PROJECT_TYPE
				,A.APPROVE_LINE_TYPE
				,A.SCHEDULE_USE_YN
				,A.SCHEDULE_USE_TYPE
				,A.LINK_DOC_USE_YN
				,A.LINK_DOC_USE_TYPE
				,A.PROJECT_CHOICE_YN
				,A.TITLE_USE_YN
				,A.DOC_TITLE
				,A.FILE_USE_YN
				,A.FILE_USE_TYPE
				,A.DOC_CONTENT
				,A.OPEN_YN
				,A.DELETE_FLAG
				,A.DELETE_DATE
				,A.DELETED_BY
				,A.CREATED_BY
				,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) AS CREATED_NM
				,A.CREATE_DATE
				,A.UPDATED_BY
				,A.UPDATE_DATE
		  FROM BS_APPV_COMPANY_FORM A
		 WHERE A.APPV_COMPANY_FORM_ID = #appvCompanyFormId#
	</select>
	<!-- 연결 결재문서 List -->
	<select id = "approve.getApproveRefDocList" parameterClass="HashMap" resultClass="egovMap">
		SELECT  /* approve.getApproveRefDocList */
				 A.APPV_DOC_ID
				,A.PROJECT_ID
				,A.ACTIVITY_ID
				,A.APPV_HEADER_ID
				,A.APPV_DOC_CLASS
				,A.DOC_STATUS_NM
				,A.APPV_DOC_CLASS_NM
				,A.APPV_DOC_TYPE
				,A.APPV_DOC_TYPE_NM
				,A.APPV_END_DATE
				,A.DOC_STATUS
				,A.APPV_DOC_NUM
				,A.DOC_TITLE
				,A.CREATED_BY
				,A.CREATED_NM
				,A.CREATE_DATE
				,A.UPDATED_BY
				,A.UPDATE_DATE
				,A.USER_STATUS
	     FROM (

				SELECT	 A.APPV_DOC_ID /*내가 대상자거나 작성한 문서 */
						,A.PROJECT_ID
						,A.ACTIVITY_ID
						,A.APPV_HEADER_ID
						,A.APPV_DOC_CLASS
						,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
						,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
						,A.APPV_DOC_TYPE
						,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
															            FROM BS_CODE_GV X
															           WHERE X.ORG_ID = #orgId#
															             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
															             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
						) AS APPV_DOC_TYPE_NM
						,A.UPDATE_DATE AS APPV_END_DATE
						,IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) AS DOC_STATUS
						,A.APPV_DOC_NUM
						,A.DOC_TITLE
						,A.CREATED_BY
						,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) AS CREATED_NM
						,A.CREATE_DATE
						,A.UPDATED_BY
						,A.UPDATE_DATE
						,'SUBMIT' AS USER_STATUS				/*구분값 : 상신*/
						,1 AS SORT								/*중복 결과가 조회될수 있으니 정렬한다 , 숫자가 낮은값이 노출된다*/
				  FROM BS_APPV_DOC A
				 WHERE A.USER_ID = IFNULL(#selectStaffId#,#userId#)
				   AND A.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')


				 UNION ALL

				 SELECT   /*받은결재관련*/
					     A.APPV_DOC_ID
						,A.PROJECT_ID
						,A.ACTIVITY_ID
						,A.APPV_HEADER_ID
						,A.APPV_DOC_CLASS
						,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
						,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
						,A.APPV_DOC_TYPE
						,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
															            FROM BS_CODE_GV X
															           WHERE X.ORG_ID = #orgId#
															             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
															             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
						) AS APPV_DOC_TYPE_NM
						,A.UPDATE_DATE AS APPV_END_DATE
						,IF(A.DOC_STATUS = 'SUBMIT', 'APPROVE', A.DOC_STATUS) AS DOC_STATUS
						,A.APPV_DOC_NUM
						,A.DOC_TITLE
						,A.CREATED_BY
						,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.CREATED_BY) AS CREATED_NM
						,A.CREATE_DATE
						,A.UPDATED_BY
						,A.UPDATE_DATE
						,'APPROVE' AS USER_STATUS				/*구분값 : 기결*/
						,2 AS SORT								/*중복 결과가 조회될수 있으니 정렬한다 , 숫자가 낮은값이 노출된다*/
				  FROM BS_APPV_DOC A
				 WHERE A.DOC_STATUS != 'WORKING'
				   AND CASE WHEN A.APPV_BEFORE_APPROVE_READ_YN != 'Y' THEN A.APPV_DOC_ID IN (SELECT X.APPV_DOC_ID
				   																		 FROM BS_APPROVAL_LINE_FLOW_V X
				   																		WHERE IF(X.APPV_EMP_ID IS NULL , X.NOW_APPV_ASSIGN_ID = #userId# AND X.APPV_STATUS = 'REQ'
				   																									   , X.APPV_EMP_ID = #userId#
				   																				)
				   																		 )
				   		    WHEN A.APPV_BEFORE_APPROVE_READ_YN = 'Y' THEN A.APPV_DOC_ID IN (SELECT X.APPV_DOC_ID
				   																		 FROM BS_APPROVAL_LINE_FLOW_V X
				   																		WHERE (X.APPV_ASSIGN_ID = #userId# OR X.NOW_APPV_ASSIGN_ID =  #userId#)
				   																		 )
				   	   END
				   AND A.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')

			    UNION ALL


		        SELECT   B.APPV_DOC_ID  /*수신문서*/
						,B.PROJECT_ID
						,B.ACTIVITY_ID
						,B.APPV_HEADER_ID
						,B.APPV_DOC_CLASS
						,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = B.DOC_STATUS) AS DOC_STATUS_NM
						,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = B.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
						,B.APPV_DOC_TYPE
						,IF(B.APPV_DOC_CLASS = 'COMPANY',B.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
															            FROM BS_CODE_GV X
															           WHERE X.ORG_ID = #orgId#
															             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = B.APPV_DOC_CLASS)
															             AND X.CODE_VALUE = B.APPV_DOC_TYPE)
						) AS APPV_DOC_TYPE_NM
						,B.UPDATE_DATE AS APPV_END_DATE
						,IF(B.DOC_STATUS = 'SUBMIT', 'APPROVE', B.DOC_STATUS) AS DOC_STATUS
						,B.APPV_DOC_NUM
						,B.DOC_TITLE
						,B.CREATED_BY
						,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = B.CREATED_BY) AS CREATED_NM
						,B.CREATE_DATE
						,B.UPDATED_BY
						,B.UPDATE_DATE
						,'RECEIVER' AS USER_STATUS				/*구분값 : 수신*/
						,3 AS SORT								/*중복 결과가 조회될수 있으니 정렬한다 , 숫자가 낮은값이 노출된다*/
		           FROM    (
		                   SELECT  /* Approval Line Flow */
		                           A.ORG_ID
		                          ,A.APPV_DOC_ID
		                          ,A.APPV_DOC_CLASS
		                          ,A.READ_DATE
		                   FROM    BS_APPV_RECEIVER  A
		                   WHERE   1=1
		                     AND A.ORG_ID  = #orgId#
		                     AND A.USER_ID = #userId#

		                   ) A INNER JOIN BS_APPV_DOC B
		                   			   ON A.APPV_DOC_ID = B.APPV_DOC_ID
		                   			  AND IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
									  AND B.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')
			     UNION ALL
			     /*참조문서*/
			     SELECT   B.APPV_DOC_ID
							,B.PROJECT_ID
							,B.ACTIVITY_ID
							,B.APPV_HEADER_ID
							,B.APPV_DOC_CLASS
							,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = B.DOC_STATUS) AS DOC_STATUS_NM
							,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = B.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
							,B.APPV_DOC_TYPE
							,IF(B.APPV_DOC_CLASS = 'COMPANY',B.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																            FROM BS_CODE_GV X
																           WHERE X.ORG_ID = #orgId#
																             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = B.APPV_DOC_CLASS)
																             AND X.CODE_VALUE = B.APPV_DOC_TYPE)
							) AS APPV_DOC_TYPE_NM
							,B.UPDATE_DATE AS APPV_END_DATE
							,IF(B.DOC_STATUS = 'SUBMIT', 'APPROVE', B.DOC_STATUS) AS DOC_STATUS
							,B.APPV_DOC_NUM
							,B.DOC_TITLE
							,B.CREATED_BY
							,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = B.CREATED_BY) AS CREATED_NM
							,B.CREATE_DATE
							,B.UPDATED_BY
							,B.UPDATE_DATE
							,'CC' AS USER_STATUS					/*구분값 : 참조*/
							,4 AS SORT								/*중복 결과가 조회될수 있으니 정렬한다 , 숫자가 낮은값이 노출된다*/
			        FROM    (
			                SELECT  /* Approval Line Flow */
			                        A.ORG_ID
			                       ,A.APPV_DOC_ID
			                       ,A.APPV_DOC_CLASS
			                       ,A.READ_DATE
			                FROM    BS_APPV_CC  A
			                WHERE   1=1
			                  AND A.ORG_ID  = #orgId#
			                  AND A.USER_ID = #userId#

			                ) A INNER JOIN BS_APPV_DOC B
			                		    ON A.APPV_DOC_ID = B.APPV_DOC_ID
			                		   AND IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
									   AND B.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')
       			) A
       		GROUP BY A.APPV_DOC_ID
		   	ORDER BY A.APPV_END_DATE DESC
		<isNotEqual property="recordCountPerPage" compareValue="0">
			LIMIT #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>
	<!-- 연결 결재문서 List 총개수 -->
	<select id = "approve.getApproveRefDocListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT  /* approve.getApproveRefDocListTotalCnt */
				COUNT(*)
		 FROM (
		 		SELECT *
		 		  FROM (
						SELECT	 A.APPV_DOC_ID /*내가 대상자거나 작성한 문서 */
						  FROM BS_APPV_DOC A
						 WHERE A.USER_ID = IFNULL(#selectStaffId#,#userId#)
						   AND A.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')


						 UNION ALL

						 SELECT   /*받은결재관련*/
							     A.APPV_DOC_ID
						  FROM BS_APPV_DOC A
						 WHERE A.DOC_STATUS != 'WORKING'
						   AND CASE WHEN A.APPV_BEFORE_APPROVE_READ_YN != 'Y' THEN A.APPV_DOC_ID IN (SELECT X.APPV_DOC_ID
						   																		 FROM BS_APPROVAL_LINE_FLOW_V X
						   																		WHERE IF(X.APPV_EMP_ID IS NULL , X.NOW_APPV_ASSIGN_ID = #userId# AND X.APPV_STATUS = 'REQ'
						   																									   , X.APPV_EMP_ID = #userId#
						   																				)
						   																		 )
						   		    WHEN A.APPV_BEFORE_APPROVE_READ_YN = 'Y' THEN A.APPV_DOC_ID IN (SELECT X.APPV_DOC_ID
						   																		 FROM BS_APPROVAL_LINE_FLOW_V X
						   																		WHERE (X.APPV_ASSIGN_ID = #userId# OR X.NOW_APPV_ASSIGN_ID =  #userId#)
						   																		 )
						   	   END
						   AND A.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')

						   UNION ALL


				           SELECT   B.APPV_DOC_ID  /*수신문서*/
				             FROM    (
				                   SELECT  /* Approval Line Flow */
				                           A.ORG_ID
				                          ,A.APPV_DOC_ID
				                          ,A.APPV_DOC_CLASS
				                          ,A.READ_DATE
				                   FROM    BS_APPV_CC  A
				                   WHERE   1=1
				                     AND A.ORG_ID  = #orgId#
				                     AND A.USER_ID = #userId#

				                   ) A INNER JOIN BS_APPV_DOC B
				                   			   ON A.APPV_DOC_ID = B.APPV_DOC_ID
				                   			  AND IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
											  AND B.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')
					        UNION ALL
					        /*참조문서*/
					        SELECT   B.APPV_DOC_ID
					          FROM    (
					                SELECT  /* Approval Line Flow */
					                        A.ORG_ID
					                       ,A.APPV_DOC_ID
					                       ,A.APPV_DOC_CLASS
					                       ,A.READ_DATE
					                FROM    BS_APPV_CC  A
					                WHERE   1=1
					                  AND A.ORG_ID  = #orgId#
					                  AND A.USER_ID = #userId#

					                ) A INNER JOIN BS_APPV_DOC B
					                		    ON A.APPV_DOC_ID = B.APPV_DOC_ID
					                		   AND IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
											   AND B.DOC_STATUS IN ('COMMIT' , 'REJECT' , 'CNL_COMMIT')
		       			) A
		       		GROUP BY A.APPV_DOC_ID
		     ) B
	</select>

	<!-- 종결전 문서열람 정보를 조회 -->
	<select id = "approve.getAppvReadDocSetup" parameterClass="HashMap" resultClass="egovMap">
		SELECT /* approve.getAppvReadDocSetup */
				 A.APPV_READ_DOC_SETUP_ID
				,A.ORG_ID
				,A.APPV_DOC_CLASS
				,A.APPV_DOC_TYPE
				,A.APPV_COMPANY_FORM_ID
				,A.APPROVE_YN
				,A.RECEIVE_YN
				,A.CC_YN
				,A.CREATED_BY
				,A.CREATE_DATE
				,A.UPDATED_BY
				,A.UPDATE_DATE
		FROM BS_APPV_READ_DOC_SETUP A
		WHERE A.ORG_ID = #orgId#
		  AND A.APPV_DOC_CLASS = #appvDocClass#
		<isNotEmpty property="appvDocType">
			AND A.APPV_DOC_TYPE = #appvDocType#
		</isNotEmpty>
		<isNotEmpty property="appvCompanyFormId">
			AND A.APPV_COMPANY_FORM_ID = #appvCompanyFormId#
		</isNotEmpty>
	</select>
	<!-- 연결 결재문서를 저장한다 -->
	<insert id = "approve.insertLinkRefDocId" parameterClass = "HashMap">
		INSERT INTO /* approve.insertLinkRefDocId */
		  	   BS_APPV_REF_DOC (
						  	     APPV_DOC_ID
								,REF_DOC_ID
								,CREATED_BY
								,CREATE_DATE
								,UPDATED_BY
								,UPDATE_DATE
		  	   					) VALUES (
		  	   						 #appvDocId#
									,#refDocId#
									,#userId#
									,NOW()
									,#userId#
									,NOW()
		  	   					)

	</insert>
	<!-- 연결 결재문서 삭제 -->
	<delete id = "approve.deleteLinkRefDoc" parameterClass = "HashMap">
		DELETE FROM BS_APPV_REF_DOC WHERE APPV_DOC_ID = #appvDocId#
	</delete>
	<!-- 연결 결재문서 조회 -->
	<select id = "approve.getApproveLinkDocList" parameterClass="egovMap" resultClass="egovMap">
		SELECT   B.APPV_DOC_CLASS
				,B.APPV_DOC_TYPE
				,B.APPV_DOC_ID
				,B.DOC_TITLE
				,B.APPV_DOC_NUM
		  FROM BS_APPV_REF_DOC A
		  INNER JOIN BS_APPV_DOC B ON A.REF_DOC_ID = B.APPV_DOC_ID
		WHERE A.APPV_DOC_ID = #appvDocId#
	</select>

	<!-- 필수참가자저장-->
	<insert id="approve.insertApproveCcSetup" parameterClass = "HashMap">
		INSERT
		  INTO BS_APPV_CC (
		  					 ORG_ID
		  					,APPV_DOC_ID
		  					,APPV_DOC_CLASS
		  					,USER_ID
		  					)
		  					SELECT #orgId#
		  						  ,#appvDocId#
		  						  ,#appvDocClass#
		  						  ,A.USER_ID
		  				       FROM  BS_APPV_RECEIVER_USER A
		  				      INNER JOIN BS_APPV_RECEIVER_SETUP B ON A.APPV_RECEIVER_SETUP_ID = B.APPV_RECEIVER_SETUP_ID
						    	 /*사내서식은 APPV_COMPANY_FORM_ID , 기본서식은 APPV_DOC_TYPE 으로찾는다*/
						    	WHERE IF(B.APPV_DOC_CLASS = 'COMPANY' , B.APPV_COMPANY_FORM_ID = #appvCompanyFormId# , B.APPV_DOC_TYPE = #appvDocType#)
						    	  AND B.ORG_ID = #orgId#
						    	  AND B.USE_YN = 'Y'
						    	  AND A.USER_ROLE_TYPE = 'CC'
						    	  AND NOT EXISTS ((SELECT Y.USER_ID FROM BS_APPV_CC Y WHERE Y.APPV_DOC_ID = #appvDocId# AND Y.USER_ID = A.USER_ID) )
						    	  AND A.USER_ID != #userId#
	</insert>

	<!-- 필수수신자저장-->
	<insert id="approve.insertApproveReceiverSetup" parameterClass = "HashMap">
		INSERT
		  INTO BS_APPV_RECEIVER (
		  					 ORG_ID
		  					,APPV_DOC_ID
		  					,APPV_DOC_CLASS
		  					,USER_ID
		  					)
		  					SELECT #orgId#
		  						  ,#appvDocId#
		  						  ,#appvDocClass#
		  						  ,A.USER_ID
		  				       FROM  BS_APPV_RECEIVER_USER A
		  				      INNER JOIN BS_APPV_RECEIVER_SETUP B ON A.APPV_RECEIVER_SETUP_ID = B.APPV_RECEIVER_SETUP_ID
						    	 /*사내서식은 APPV_COMPANY_FORM_ID , 기본서식은 APPV_DOC_TYPE 으로찾는다*/
						    	WHERE IF(B.APPV_DOC_CLASS = 'COMPANY' , B.APPV_COMPANY_FORM_ID = #appvCompanyFormId# , B.APPV_DOC_TYPE = #appvDocType#)
						    	  AND B.ORG_ID = #orgId#
						    	  AND B.USE_YN = 'Y'
						    	  AND A.USER_ROLE_TYPE = 'RECEIVER'
						    	  AND NOT EXISTS ((SELECT Y.USER_ID FROM BS_APPV_RECEIVER Y WHERE Y.APPV_DOC_ID = #appvDocId# AND Y.USER_ID = A.USER_ID) )
						    	   AND A.USER_ID != #userId#
	</insert>
	<!-- 연결 결재문서 조회 -->
	<select id = "approve.getOrgReceiverSetupList" parameterClass="HashMap" resultClass="egovMap">
		<isEqual property="userRoleType" compareValue="CC">
			<isEqual property="approveCcType" compareValue="MY_TEAM">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_CC A
				 INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
				 INNER JOIN BS_USER_DEPARTMENT C ON A.USER_ID = C.USER_ID AND C.MAIN_YN = 'Y' AND C.ENABLE = 'Y' AND C.DELETE_FLAG = 'N'
				 WHERE A.APPV_DOC_ID = B.APPV_DOC_ID
				   AND C.DEPT_ID != (SELECT X.DEPT_ID
				   					   FROM BS_USER_DEPARTMENT X
				   					  WHERE X.USER_ID = A.USER_ID
				   					    AND X.MAIN_YN = 'Y'
									    AND X.ENABLE = 'Y'
									    AND X.DELETE_FLAG = 'N')
			</isEqual>
			<isEqual property="approveCcType" compareValue="NONE">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_CC A
				 WHERE A.APPV_DOC_ID = #appvDocId#
			</isEqual>
			<isEqual property="approveCcType" compareValue="MY_ORG_ALL">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_CC A
				 WHERE 1=2
			</isEqual>
			<isEqual property="approveCcType" compareValue="SELECT">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_CC A
				 WHERE 1=2
			</isEqual>
		</isEqual>

		<isEqual property="userRoleType" compareValue="RECEIVER">
			<isEqual property="approveRcType" compareValue="MY_TEAM">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_RECEIVER A
				 INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
				 INNER JOIN BS_USER_DEPARTMENT C ON A.USER_ID = C.USER_ID AND C.MAIN_YN = 'Y' AND C.ENABLE = 'Y' AND C.DELETE_FLAG = 'N'
				 WHERE A.APPV_DOC_ID = B.APPV_DOC_ID
				   AND C.DEPT_ID != (SELECT X.DEPT_ID
				   					   FROM BS_USER_DEPARTMENT X
				   					  WHERE X.USER_ID = A.USER_ID
				   					    AND X.MAIN_YN = 'Y'
									    AND X.ENABLE = 'Y'
									    AND X.DELETE_FLAG = 'N')
			</isEqual>
			<isEqual property="approveCcType" compareValue="NONE">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_RECEIVER A
				 WHERE A.APPV_DOC_ID = #appvDocId#
			</isEqual>
			<isEqual property="approveRcType" compareValue="MY_ORG_ALL">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_CC A
				 WHERE 1=2
			</isEqual>
			<isEqual property="approveRcType" compareValue="SELECT">
				SELECT  A.USER_ID
		    		  ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		    		  ,(SELECT G.VALUE_MEAN_KOR
		                 FROM   BS_CODE_GV G
		                 WHERE  G.ORG_ID = #orgId#
		                 AND    G.CODE_NAME = 'RANK'
		                 AND    G.CODE_VALUE = (SELECT X.RANK FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID)) AS USER_RANK_NM
				  FROM BS_APPV_CC A
				 WHERE 1=2
			</isEqual>
		</isEqual>
	</select>

	<!--지출문서총개수 -->
	<select id = "approve.getAppvDocExpenseListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT /*approve.getAppvDocExpenseListTotalCnt */
        	     COUNT(*)
          FROM BS_APPV_DOC A
        INNER JOIN BS_APPV_EXPENSE_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
         WHERE A.APPV_DOC_CLASS = 'EXPENSE'
           AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT')
           AND EXISTS ( SELECT X.USER_ID FROM BS_APPV_EXPENSE_MANAGER_SETUP X WHERE X.ORG_ID = #orgId# AND X.USER_ID = #userId# )
           <isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchApplyOrgId" compareValue="Y">
				AND A.ORG_ID = #applyOrgId#
			</isEqual>
		</isNotEmpty>
	</select>
	<!--지출문서 List -->
	<select id = "approve.getAppvDocExpenseList" parameterClass="HashMap" resultClass="egovMap">
        SELECT /*approve.getAppvDocExpenseList */
        	     A.APPV_DOC_ID
		        ,A.ORG_ID
		        ,A.APPV_DOC_CLASS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = A.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
		        ,A.APPV_DOC_TYPE
		        ,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
														            FROM BS_CODE_GV X
														           WHERE X.ORG_ID = #orgId#
														             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
														             AND X.CODE_VALUE = A.APPV_DOC_TYPE)
					) AS APPV_DOC_TYPE_NM
		        ,A.DOC_STATUS
		        ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = A.DOC_STATUS) AS DOC_STATUS_NM
		        ,A.USER_ID
		        ,(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) AS USER_NM
		        ,IFNULL((SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE X.APPV_DOC_ID = A.APPV_DOC_ID AND X.ORG_ID = A.ORG_ID AND X.APPV_DOC_CLASS = A.APPV_DOC_CLASS LIMIT 0,1), A.CREATE_DATE) AS CREATE_DATE
		        ,A.DOC_TITLE AS TITLE
		        ,(
	       		  		(SELECT COUNT(*)
					       FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.APPV_COMMENT IS NOT NULL
							AND X.APPV_COMMENT != '')
						+
						(SELECT
								 COUNT(*)
						   FROM BS_APPV_PROCESS X
						  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							AND X.CANCEL_COMMENT != ''
							AND X.CANCEL_COMMENT IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_RECEIVER X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.RECEIPT_YN = 'Y' AND READ_DATE IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
						   AND X.EXPENSE_YN = 'Y' AND X.EXPENSE_PAY_USER_ID IS NOT NULL)
						+
						(SELECT COUNT(*)
						  FROM BS_APPV_EXPENSE_DOC_UPDATE X
						 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)

			        	) AS COMMENT_CNT
			    ,A.APPV_DOC_NUM
			    ,A.USER_ID
			    ,A.WRITER_ID
			    ,(SELECT X.APPV_HEADER_NAME FROM BS_APPROVE_HEADER X WHERE X.APPV_HEADER_ID = A.APPV_HEADER_ID) AS APPV_HEADER_ID_NM
			    ,A.INDIVIDUAL_YN
			    ,A.PROJECT_ID
			    ,A.ACTIVITY_ID
			    ,A.UPDATE_DATE APPV_END_DATE
			    ,A.SUBMIT_DATE
			    ,B.EXPENSE_YN
			    ,IF(B.EXPENSE_YN = 'Y',(SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = B.EXPENSE_PAY_USER_ID),'') AS EXPENSE_USER_NM
			    ,(SELECT X.NAME FROM  BS_USER_MASTER X
					   WHERE  RC.USER_ID = X.USER_ID) AS RC_RECEIPT_NAME
				,(SELECT COUNT(*) FROM BS_APPV_RECEIVER X WHERE X.APPV_DOC_ID=A.APPV_DOC_ID ) RECEIVER_CNT
				,RC.USER_ID AS RC_RECEIPT_ID
				,IF(B.EXPENSE_YN IS NULL,'Y','N') AS NEW_YN
          FROM BS_APPV_DOC A
        INNER JOIN BS_APPV_EXPENSE_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
        LEFT OUTER JOIN BS_APPV_RECEIVER RC ON  RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.RECEIPT_YN ='Y'
         WHERE A.APPV_DOC_CLASS = 'EXPENSE'
           AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT')
           AND EXISTS ( SELECT X.USER_ID FROM BS_APPV_EXPENSE_MANAGER_SETUP X WHERE X.ORG_ID = #orgId# AND X.USER_ID = #userId# )
           <isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="ALL"> <!-- 전체검색 -->
				<isNotEmpty property="searchTitle">
					AND (
							A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
						OR  A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	   ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'APPROVAL'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
						OR  EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
									 WHERE X.APPV_CLASS = 'AGREE'
									   AND X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_ASSIGN_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR EXISTS (
									SELECT Y.NAME
									  FROM BS_APPROVAL_LINE_FLOW_V X
									       INNER JOIN BS_USER_MASTER Y
									  	    ON (X.APPV_EMP_ID = Y.USER_ID)
									 WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
									)
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						OR (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
						)
				</isNotEmpty>
			</isEqual>
			<isEqual property="searchSelect" compareValue="TITLE">
				AND A.DOC_TITLE LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="MEMO">
				AND A.MEMO LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="DOCNUM"> <!-- 문서번호 -->
				AND A.APPV_DOC_NUM LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>

			<isEqual property="searchSelect" compareValue="APPROVEUSER"><!-- 결재자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'APPROVAL'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="AGREEUSER"> <!-- 합의자 -->
				AND EXISTS (
							SELECT Y.NAME
							  FROM BS_APPROVAL_LINE_FLOW_V X
							       INNER JOIN BS_USER_MASTER Y
							  	    ON (X.NOW_APPV_ASSIGN_ID = Y.USER_ID OR X.APPV_ASSIGN_ID = Y.USER_ID )
							 WHERE X.APPV_CLASS = 'AGREE'
							   AND X.APPV_DOC_ID = A.APPV_DOC_ID
							   AND Y.NAME LIKE CONCAT('%', #searchTitle#,'%')
							)
			</isEqual>
			<isEqual property="searchSelect" compareValue="WRITEUSER"> <!-- 작성자 -->
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.WRITER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
			<isEqual property="searchSelect" compareValue="TARGETUSER">
				AND (SELECT X.NAME FROM BS_USER_MASTER X WHERE X.USER_ID = A.USER_ID) LIKE CONCAT('%', #searchTitle#,'%')
			</isEqual>
		</isNotEmpty>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.ORG_ID = #applyOrgId#
		</isEqual>
         ORDER BY A.SUBMIT_DATE DESC
        <isNotEqual property="recordCountPerPage" compareValue="0">
            LIMIT #firstIndex#, #recordCountPerPage#
        </isNotEqual>
	</select>

	<!--즐겨찾기 인서트 -->
	<insert id = "approve.insertAppvFavList" parameterClass = "HashMap">
		INSERT /*approve.insertAppvFavList */
		  INTO BS_APPV_BOOKMARK_FORM (
		  								 USER_ID
										,BOOKMARK_TYPE
										,APPV_DOC_CLASS
										,APPV_COMPANY_ID
										,APPV_DOC_ID
										,SETUP_DATE
										,CREATED_BY
										,CREATE_DATE
										,UPDATED_BY
										,UPDATE_DATE
		  							) VALUES (
		  								 #userId#
										,#bookmarkType#
										,#appvDocClass#
										,#appvCompanyId#
										,#appvDocId#
										,NOW()
										,#userId#
										,NOW()
										,#userId#
										,NOW()
		  							)
	</insert>
	<!--즐겨찾기 삭제 -->
	<insert id = "approve.deleteAppvFavList" parameterClass = "HashMap">
		DELETE /*approve.deleteAppvFavList */
		  FROM BS_APPV_BOOKMARK_FORM
		 WHERE USER_ID = #userId#
		   AND BOOKMARK_TYPE = #bookmarkType#
		 <isNotEmpty property="appvDocClass">
		 	AND APPV_DOC_CLASS = #appvDocClass#
		 </isNotEmpty>
		 <isNotEmpty property="appvCompanyId">
		 	AND APPV_COMPANY_ID = #appvCompanyId#
		 </isNotEmpty>
		 <isNotEmpty property="appvDocId">
		 	AND APPV_DOC_ID = #appvDocId#
		 </isNotEmpty>
	</insert>

	<!--즐겨찾기 목록(등록/수정/상세페이지) -->
	<select id = "approve.getAppvFavListAjax" parameterClass="HashMap" resultClass="egovMap">
		SELECT /*approve.getAppvFavListAjax */
				 A.BOOKMARK_TYPE
				,A.APPV_DOC_CLASS
				,A.APPV_COMPANY_ID
				,A.APPV_DOC_ID
		  FROM BS_APPV_BOOKMARK_FORM A
		 WHERE A.USER_ID = #userId#
		   AND A.BOOKMARK_TYPE = #bsAppvBookmarkForm#
		 <isNotEmpty property="appvDocClass">
		 	AND A.APPV_DOC_CLASS = #appvDocClass#
		 </isNotEmpty>
		 <isNotEmpty property="favAppvCompanyId">
		 	AND A.APPV_COMPANY_ID = #favAppvCompanyId#
		 </isNotEmpty>
		 <isNotEmpty property="appvDocId">
		 	AND A.APPV_DOC_ID = #appvDocId#
		 </isNotEmpty>
	</select>

	<!--사내서식 유저 열람정보 저장 -->
	<update id = "approve.updateCompanyFormReadUserId"  parameterClass="HashMap">
		UPDATE BS_APPV_COMPANY_FORM
		   SET READ_USER_ID = CONCAT(IFNULL(READ_USER_ID,''),'|',#userId#,'|')
		 WHERE APPV_COMPANY_FORM_ID = #appvCompanyFormId#
		   AND IFNULL(READ_USER_ID,'') NOT LIKE CONCAT('%|',#userId#,'|%')
	</update>
	<!--읽음처리-->
	<update id = "approve.updateAppvDocReadId"  parameterClass="HashMap">
		UPDATE BS_APPV_DOC
		   SET READ_USER_ID = CONCAT(IFNULL(READ_USER_ID,''),'|',#userId#,'|')
		 WHERE APPV_DOC_ID = #appvDocId#
		   AND IFNULL(READ_USER_ID,'') NOT LIKE CONCAT('%|',#userId#,'|%')
	</update>
	<!--서식 즐겨찾기 리스트 총개수 -->
	<select id = "approve.getApproveBookmarkFormListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT /*approve.getApproveBookmarkFormListTotalCnt */
			  COUNT(*)
		  FROM (
				SELECT 	 0 AS APPV_DOC_ID
				 		,#orgId# AS ORG_ID
				 		,A.APPV_DOC_CLASS
				 		,'' AS APPV_DOC_TYPE
				 		,'' AS DOC_STATUS
				 		,A.CREATE_DATE
				 		,'-' AS TITLE
				 		,'-' AS APPV_DOC_NUM
				 		,0 AS APPV_HEADER_ID
				 		,'N' AS INDIVIDUAL_YN
				 		,A.BOOKMARK_TYPE
						,A.APPV_DOC_CLASS AS BOOKMARK_APPV_DOC_CLASS
						,A.APPV_COMPANY_ID AS BOOKMARK_APPV_COMPANY_ID
						,A.APPV_DOC_ID AS BOOKMARK_APPV_DOC_ID

					    ,2 AS SORT

					    ,'BASIC' AS TYPE

				   FROM BS_APPV_BOOKMARK_FORM A
				  WHERE A.BOOKMARK_TYPE = 'BASIC'
					AND  A.USER_ID = #userId#

				 UNION ALL

				 SELECT 0 AS APPV_DOC_ID
				 		,#orgId# AS ORG_ID
				 		,A.APPV_DOC_CLASS
				 		,A.APPV_DOC_TYPE_NAME AS APPV_DOC_TYPE
				 		,'' AS DOC_STATUS
				 		,Y.CREATE_DATE
				 		,'-' AS TITLE
				 		,'-' AS APPV_DOC_NUM
				 		,0 AS APPV_HEADER_ID
				 		,'N' AS INDIVIDUAL_YN
				 		,Y.BOOKMARK_TYPE
						,Y.APPV_DOC_CLASS AS BOOKMARK_APPV_DOC_CLASS
						,Y.APPV_COMPANY_ID AS BOOKMARK_APPV_COMPANY_ID
						,Y.APPV_DOC_ID AS BOOKMARK_APPV_DOC_ID

					    ,2 AS SORT

					    ,'COMPANY' AS TYPE

				   FROM BS_APPV_COMPANY_FORM A
				 INNER JOIN BS_APPV_BOOKMARK_FORM Y ON Y.APPV_COMPANY_ID = A.APPV_COMPANY_FORM_ID
				  WHERE  A.OPEN_YN = 'Y'
				   	AND  A.DELETE_FLAG = 'N'
				   	AND  Y.USER_ID = #userId#

				 UNION ALL
				   SELECT A.APPV_DOC_ID
				        ,A.ORG_ID
				        ,A.APPV_DOC_CLASS
				        ,A.APPV_DOC_TYPE
				        ,A.DOC_STATUS
				        ,Y.CREATE_DATE
				        ,A.DOC_TITLE AS TITLE
					    ,A.APPV_DOC_NUM
					    ,A.APPV_HEADER_ID
					    ,A.INDIVIDUAL_YN

					    ,Y.BOOKMARK_TYPE
						,Y.APPV_DOC_CLASS AS BOOKMARK_APPV_DOC_CLASS
						,Y.APPV_COMPANY_ID AS BOOKMARK_APPV_COMPANY_ID
						,Y.APPV_DOC_ID AS BOOKMARK_APPV_DOC_ID

					    ,1 AS SORT

					    ,'SUBMIT' AS TYPE

				  FROM BS_APPV_DOC A
				 INNER JOIN BS_APPV_BOOKMARK_FORM Y ON (A.WRITER_ID=Y.USER_ID OR A.USER_ID = Y.USER_ID) AND  Y.APPV_DOC_ID IS NOT NULL AND A.APPV_DOC_ID = Y.APPV_DOC_ID
				 WHERE  A.DOC_STATUS != 'WORKING'
				   AND Y.USER_ID = #userId#
				   AND (A.WRITER_ID=#userId# OR A.USER_ID = #userId#)
				   AND IF(A.APPV_COMPANY_FORM_ID IS NOT NULL,(SELECT COUNT(*)
				   												FROM BS_APPV_COMPANY_FORM X
				   											   WHERE X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_FORM_ID
				   											     AND OPEN_YN = 'Y'
				   											     AND DELETE_FLAG = 'N'
				   											  )>0
				   											 ,1=1
				   		  )
		  ) K
		  WHERE 1=1
	</select>
	<!--서식 즐겨찾기 리스트  -->
	<select id = "approve.getApproveBookmarkFormList" parameterClass="HashMap" resultClass="egovMap">
		SELECT /*approve.getApproveBookmarkFormList */
			   K.APPV_DOC_ID
			  ,K.ORG_ID
			  ,K.APPV_DOC_CLASS
			  ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'APPV_DOC_CLASS' AND X.CODE_VALUE = K.APPV_DOC_CLASS) AS APPV_DOC_CLASS_NM
			  ,K.APPV_DOC_TYPE
			  ,IF(K.APPV_DOC_CLASS = 'COMPANY',K.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
														            FROM BS_CODE_GV X
														           WHERE X.ORG_ID = #orgId#
														             AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = K.APPV_DOC_CLASS)
														             AND X.CODE_VALUE = K.APPV_DOC_TYPE)
					) AS APPV_DOC_TYPE_NM
			  ,(SELECT X.APPV_HEADER_NAME FROM BS_APPROVE_HEADER X WHERE X.APPV_HEADER_ID = K.APPV_HEADER_ID) AS APPV_HEADER_ID_NM
			  ,K.DOC_STATUS
			  ,(SELECT X.VALUE_MEAN_KOR FROM BS_CODE_GV X WHERE X.ORG_ID = #orgId# AND X.CODE_NAME = 'DOC_STATUS' AND X.CODE_VALUE = K.DOC_STATUS) AS DOC_STATUS_NM
			  ,K.TITLE
			  ,K.APPV_DOC_NUM
			  ,K.CREATE_DATE
			  ,K.BOOKMARK_TYPE
			  ,K.BOOKMARK_APPV_DOC_CLASS
			  ,K.BOOKMARK_APPV_COMPANY_ID
			  ,K.BOOKMARK_APPV_DOC_ID
			  ,K.TYPE
		  FROM (
				SELECT 	 0 AS APPV_DOC_ID
				 		,#orgId# AS ORG_ID
				 		,A.APPV_DOC_CLASS
				 		,CASE WHEN APPV_DOC_CLASS = 'BASIC' THEN 'BASIC'
				 			  WHEN APPV_DOC_CLASS = 'BUY' THEN 'BUY_IN'
				 			  WHEN APPV_DOC_CLASS = 'EDUCATION' THEN 'EDU_IN'
				 			  WHEN APPV_DOC_CLASS = 'EVENT' THEN 'EVENT'
				 			  WHEN APPV_DOC_CLASS = 'EXPENSE' THEN 'EXPENSE'
				 			  WHEN APPV_DOC_CLASS = 'REPORT' THEN 'REPORT'
				 			  WHEN APPV_DOC_CLASS = 'REST' THEN 'REST'
				 			  WHEN APPV_DOC_CLASS = 'TRIP' THEN 'TRIP_IN'
				 			  WHEN APPV_DOC_CLASS = 'VACATION' THEN 'ANNUAL'
				 		 END  AS APPV_DOC_TYPE
				 		,'' AS DOC_STATUS
				 		,A.CREATE_DATE
				 		,'-' AS TITLE
				 		,'-' AS APPV_DOC_NUM
				 		,0 AS APPV_HEADER_ID
				 		,'N' AS INDIVIDUAL_YN
				 		,A.BOOKMARK_TYPE
						,A.APPV_DOC_CLASS AS BOOKMARK_APPV_DOC_CLASS
						,A.APPV_COMPANY_ID AS BOOKMARK_APPV_COMPANY_ID
						,A.APPV_DOC_ID AS BOOKMARK_APPV_DOC_ID

					    ,2 AS SORT

					    ,'BASIC' AS TYPE
				   FROM BS_APPV_BOOKMARK_FORM A
				  WHERE A.BOOKMARK_TYPE = 'BASIC'
					AND  A.USER_ID = #userId#

				 UNION ALL

				 SELECT 0 AS APPV_DOC_ID
				 		,#orgId# AS ORG_ID
				 		,A.APPV_DOC_CLASS
				 		,A.APPV_DOC_TYPE_NAME AS APPV_DOC_TYPE
				 		,'' AS DOC_STATUS
				 		,Y.CREATE_DATE
				 		,'-' AS TITLE
				 		,'-' AS APPV_DOC_NUM
				 		,0 AS APPV_HEADER_ID
				 		,'N' AS INDIVIDUAL_YN
				 		,Y.BOOKMARK_TYPE
						,Y.APPV_DOC_CLASS AS BOOKMARK_APPV_DOC_CLASS
						,Y.APPV_COMPANY_ID AS BOOKMARK_APPV_COMPANY_ID
						,Y.APPV_DOC_ID AS BOOKMARK_APPV_DOC_ID

					    ,2 AS SORT

					    ,'COMPANY' AS TYPE

				   FROM BS_APPV_COMPANY_FORM A
				 INNER JOIN BS_APPV_BOOKMARK_FORM Y ON Y.APPV_COMPANY_ID = A.APPV_COMPANY_FORM_ID
				  WHERE  A.OPEN_YN = 'Y'
				   	AND  A.DELETE_FLAG = 'N'
				   	AND  Y.USER_ID = #userId#

				 UNION ALL
				   SELECT A.APPV_DOC_ID
				        ,A.ORG_ID
				        ,A.APPV_DOC_CLASS
				        ,A.APPV_DOC_TYPE
				        ,A.DOC_STATUS
				        ,Y.CREATE_DATE
				        ,A.DOC_TITLE AS TITLE
					    ,A.APPV_DOC_NUM
					    ,A.APPV_HEADER_ID
					    ,A.INDIVIDUAL_YN

					    ,Y.BOOKMARK_TYPE
						,Y.APPV_DOC_CLASS AS BOOKMARK_APPV_DOC_CLASS
						,Y.APPV_COMPANY_ID AS BOOKMARK_APPV_COMPANY_ID
						,Y.APPV_DOC_ID AS BOOKMARK_APPV_DOC_ID

					    ,1 AS SORT

					    ,'SUBMIT' AS TYPE

				  FROM BS_APPV_DOC A
				 INNER JOIN BS_APPV_BOOKMARK_FORM Y ON (A.WRITER_ID=Y.USER_ID OR A.USER_ID = Y.USER_ID) AND  Y.APPV_DOC_ID IS NOT NULL AND A.APPV_DOC_ID = Y.APPV_DOC_ID
				 WHERE  A.DOC_STATUS != 'WORKING'
				   AND Y.USER_ID = #userId#
				   AND (A.WRITER_ID=#userId# OR A.USER_ID = #userId#)
				   AND IF(A.APPV_COMPANY_FORM_ID IS NOT NULL,(SELECT COUNT(*)
				   												FROM BS_APPV_COMPANY_FORM X
				   											   WHERE X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_FORM_ID
				   											     AND X.OPEN_YN = 'Y'
				   											     AND X.DELETE_FLAG = 'N'
				   											  )>0
				   											 ,1=1
				   		  )
		  ) K
		  WHERE 1=1
		  ORDER BY K.CREATE_DATE DESC

		  <isNotEqual property="recordCountPerPage" compareValue="0">
            LIMIT #firstIndex#, #recordCountPerPage#
        </isNotEqual>
	</select>
	<!--My업무구분에서 전자결재 SELECT박스 즐겨찾기 조회  -->
	<select id = "approve.getApproveBookmarkFormListForMyWorkList" parameterClass="HashMap" resultClass="egovMap">
		/* approve.getApproveBookmarkFormListForMyWorkList */
		SELECT * FROM (
			SELECT 	 A.APPV_BOOKMARK_FORM_ID
				    ,A.USER_ID
					,A.BOOKMARK_TYPE
					,A.APPV_DOC_CLASS
					,A.APPV_COMPANY_ID
					,A.APPV_DOC_ID
					,CASE WHEN A.BOOKMARK_TYPE = 'BASIC'
						  THEN (SELECT X.VALUE_MEAN_KOR
					              FROM BS_CODE_GV X
					             WHERE X.ORG_ID = #applyOrgId#
					               AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID = #orgId# AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
					               AND X.CODE_VALUE = (
					               						CASE  WHEN A.APPV_DOC_CLASS = 'BASIC' THEN 'BASIC'
												 			  WHEN A.APPV_DOC_CLASS = 'BUY' THEN 'BUY_IN'
												 			  WHEN A.APPV_DOC_CLASS = 'EDUCATION' THEN 'EDU_IN'
												 			  WHEN A.APPV_DOC_CLASS = 'EVENT' THEN 'EVENT'
												 			  WHEN A.APPV_DOC_CLASS = 'EXPENSE' THEN 'EXPENSE'
												 			  WHEN A.APPV_DOC_CLASS = 'REPORT' THEN 'REPORT'
												 			  WHEN A.APPV_DOC_CLASS = 'REST' THEN 'REST'
												 			  WHEN A.APPV_DOC_CLASS = 'TRIP' THEN 'TRIP_IN'
												 			  WHEN A.APPV_DOC_CLASS = 'VACATION' THEN 'ANNUAL'
												 			  END
					               ))

						  WHEN A.BOOKMARK_TYPE = 'COMPANY'
						  THEN (SELECT X.APPV_DOC_TYPE_NAME
							      FROM BS_APPV_COMPANY_FORM X
							     WHERE X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_ID
							       AND X.OPEN_YN = 'Y'
						 		   AND X.DELETE_FLAG = 'N'
							   )

						  WHEN A.BOOKMARK_TYPE = 'APPROVE'
						  THEN (SELECT X.DOC_TITLE
						  		  FROM BS_APPV_DOC X
						  		 WHERE A.APPV_DOC_ID = X.APPV_DOC_ID
						  		   AND X.DOC_STATUS != 'WORKING'
						  		)
					END 																AS TITLE
				  ,IF(A.APPV_DOC_ID IS NOT NULL ,(SELECT X.APPV_DOC_CLASS
				  									FROM BS_APPV_DOC X
				  								   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID)
				  								, NULL
				  								    )									AS REAL_APPV_DOC_CLASS
				  ,CASE WHEN A.APPV_DOC_ID IS NOT NULL THEN (SELECT Y.PROJECT_TYPE
							  									FROM BS_APPV_DOC X , BS_APPV_COMPANY_FORM Y
							  								   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
							  								     AND Y.APPV_COMPANY_FORM_ID = X.APPV_COMPANY_FORM_ID)
						WHEN A.BOOKMARK_TYPE = 'COMPANY' THEN (SELECT X.PROJECT_TYPE
																  FROM BS_APPV_COMPANY_FORM X
																 WHERE X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_ID
																)
						ELSE NULL
				   END																	AS PROJECT_TYPE
			  FROM BS_APPV_BOOKMARK_FORM A
			 WHERE A.USER_ID = #userId#
			   AND IF(A.BOOKMARK_TYPE = 'COMPANY'
			   									,(SELECT COUNT(*)
			   									    FROM BS_APPV_COMPANY_FORM X
						  						   WHERE X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_ID
						  						     AND X.OPEN_YN = 'Y'
					   								 AND X.DELETE_FLAG = 'N'
			   									) >0 , 1=1)
			  ORDER BY A.APPV_BOOKMARK_FORM_ID DESC
			  ) X
		  WHERE IF(X.APPV_DOC_CLASS IS NULL,1=1,X.APPV_DOC_CLASS NOT IN ('VACATION','REST','EVENT'))
		  	AND IF(X.REAL_APPV_DOC_CLASS IS NULL,1=1,X.REAL_APPV_DOC_CLASS NOT IN ('VACATION','REST','EVENT'))
	</select>
	<!--결재품의서 내영 수정  -->
	<update  id = "approve.updateAppvMemoInfo" parameterClass="HashMap">
		UPDATE /*approve.updateAppvMemoInfo*/
			   BS_APPV_DOC
		   SET MEMO = #memo#
		   	  ,UPDATED_BY = #userId#
		   	  ,UPDATE_DATE = NOW()
		 WHERE APPV_DOC_ID = #appvDocId#
	</update>
	<!--결재품의서 내영 수정 코멘트등록 -->
	<insert id = "approve.insertUpdateAppvComment" parameterClass="HashMap">
		INSERT /*approve.insertUpdateAppvComment*/
		  INTO BS_APPV_EXPENSE_DOC_UPDATE
		      (  APPV_DOC_ID
				,UPDATE_TYPE
				,UPDATE_USER_ID
				,UPDATE_COMMENT
				,CREATED_BY
				,CREATE_DATE
				,UPDATED_BY
				,UPDATE_DATE
		      ) VALUES (
		      	 #appvDocId#
				,#updateType#
				,#userId#
				,#updateComment#
				,#userId#
				,NOW()
				,#userId#
				,NOW()
		      )
	</insert>
	<!-- 수신인 타입 수정 -->
	<update  id = "approve.updateApproveRcType" parameterClass="HashMap">
		UPDATE /*approve.updateApproveRcType*/
			   BS_APPV_DOC
		   SET APPROVE_RC_TYPE = #approveRcType#
		   	  ,UPDATED_BY = #userId#
		   	  ,UPDATE_DATE = NOW()
		 WHERE APPV_DOC_ID = #appvDocId#
	</update>
	<!--참조인 타입 수정  -->
	<update  id = "approve.updateApproveCcType" parameterClass="HashMap">
		UPDATE /*approve.updateApproveCcType*/
			   BS_APPV_DOC
		   SET APPROVE_CC_TYPE = #approveCcType#
		   	  ,UPDATED_BY = #userId#
		   	  ,UPDATE_DATE = NOW()
		 WHERE APPV_DOC_ID = #appvDocId#
	</update>

	<!--사내서식 구분 유효성 체크 -->
	<select id = "approve.getAppvDocTypeNameCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT COUNT(*)
		  FROM BS_APPV_COMPANY_FORM
		 WHERE ORG_ID = #applyOrgId#
		   AND APPV_DOC_TYPE_NAME = #appvDocTypeName#
	</select>
	<!-- 다음 결재도 같은사람인지 체크 -->
	<select id = "approve.getChkDupAppvReqUserCnt"  parameterClass="HashMap" resultClass="Integer">
		SELECT COUNT(*)
		  FROM BS_APPROVAL_LINE_FLOW_V
		 WHERE  APPV_STATUS = 'REQ'
		   AND  NOW_APPV_ASSIGN_ID = #userId#
	</select>








	<!--////////////////////////////////좌측메뉴 새글알림/////////////////////////////// -->
	<!-- 사내서식 조회 -->
	<select id = "approve.getMenuApproveCompanyCnt" parameterClass="HashMap" resultClass="Integer">
		SELECT /*approve.getMenuApproveCompanyCnt*/
				COUNT(*)
		 FROM    BS_APPV_COMPANY_FORM A

		WHERE   1=1
		  AND   A.ORG_ID = #applyOrgId#
		  AND	A.OPEN_YN = 'Y'
		  AND   A.DELETE_FLAG = 'N'
	    <isEqual property="ruleUseYn" compareValue="Y">
			AND CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_USER_ID IS NULL OR A.READ_USER_ID NOT LIKE CONCAT('%|',#userId#,'|%') , 1=1 , 1=2)
				  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.CREATE_DATE)<![CDATA[<=]]>#markDayCnt#,1=1,1=2)
			 END
		</isEqual>
		<isEqual property="ruleUseYn" compareValue="N">
			AND 1=2
		</isEqual>

	</select>
	<!-- 임시저장 new 조회 -->
	<select id = "approve.getMenuMenuApproveTemp" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* approve.getMenuMenuApproveTemp*/
	         COUNT(*)
		FROM  BS_APPV_DOC A
		WHERE   1=1
          AND IF(A.DOC_STATUS = 'WORKING' , A.CREATED_BY = #userId# , A.USER_ID = #userId# OR A.WRITER_ID = #userId#)
          AND   IF(A.APPV_DOC_CLASS = 'COMPANY',EXISTS (SELECT X.APPV_COMPANY_FORM_ID
		  												  FROM BS_APPV_COMPANY_FORM X
		  												 WHERE   X.APPV_COMPANY_FORM_ID = A.APPV_COMPANY_FORM_ID
		  												 AND X.OPEN_YN = 'Y'
						  								 AND X.DELETE_FLAG = 'N'),1=1)
		<isEqual property="approveDraftIngYn" compareValue="Y">
			AND A.DOC_STATUS !='WORKING'
			AND IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>3,1=1,1=2)
		</isEqual>
		<isEqual property="approveDraftIngYn" compareValue="N">
			AND A.DOC_STATUS ='WORKING'
		</isEqual>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.ORG_ID = #applyOrgId#
		</isEqual>
	</select>

	<!--결재문서 new 조회 -->
	<select id = "approve.getMenuApproveReqList" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* approve.getMenuApproveReqList*/
		        COUNT(*)
		FROM    (
		            SELECT  A.APPV_PROCESS_ID
		                   ,A.ORG_ID
		                   ,A.APPV_DOC_ID
		                   ,A.APPV_DOC_CLASS
		                   ,A.APPV_STATUS
		                   ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                   ,A.APPV_EMP_ID           /* 실졀재자 */
		                   ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                   ,A.CREATE_DATE
		                   ,B.SUBMIT_DATE
		                   ,B.APPV_DOC_TYPE
		                   ,B.USER_ID
		                   ,B.DOC_STATUS
		                   ,B.DOC_TITLE AS TITLE
		                   ,B.APPV_DOC_NUM
		                   ,B.DATE_TO
		            FROM    (
		                    SELECT  /* Approval Line Flow */
		                            A.APPV_PROCESS_ID
		                           ,A.ORG_ID
		                           ,A.APPV_DOC_ID
		                           ,A.APPV_DOC_CLASS
		                           ,IF(A.APPV_ASSIGN_ID = A.NOW_APPV_ASSIGN_ID, A.APPV_STATUS   /* 내결제건이면서 결재라인이 나로 되어 있는 경우 */
		                                                                      , IF(A.APPV_ASSIGN_ID = #userId#, 'ENTRUST'  /* 내 결재건인데 결재라인이 다른사람으로 되어 있는 경우 대행요청한건임 */
		                                                                                                      , IF(A.APPV_STATUS = 'REQ', 'REQ_ACENCY', A.APPV_STATUS) /* 내 결재건이 아닌데 나한테 오청이 와 있는 경우 대행, 나머지는 유지*/
		                                                                          )
		                              ) APPV_STATUS
		                           ,A.APPV_STATUS AS REAL_APPV_STATUS
		                           ,A.APPV_ASSIGN_ID        /* 원결재자 */
		                           ,A.APPV_EMP_ID           /* 실졀재자 */
		                           ,A.NOW_APPV_ASSIGN_ID    /* 현재결재자(대행), 원결재자와 다르면 대행임 */
		                           ,A.CREATE_DATE
		                           ,A.APPV_SEQ AS NOW_APPV_SEQ
		                           ,A.APPV_CLASS
		                    FROM    BS_APPROVAL_LINE_FLOW_V  A
		                    WHERE   1=1

	                          AND     (A.NOW_APPV_ASSIGN_ID = #userId# OR A.APPV_ASSIGN_ID = #userId#)
		                    ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID   = B.APPV_DOC_ID AND B.DOC_STATUS    != 'WORKING'
		                    WHERE 1=1
		                    <isEqual property="listType" compareValue="pendList">
			                     AND (   A.REAL_APPV_STATUS  = 'REQ'
			                     	  OR (
			                     	  		  (SELECT X.DOC_STATUS FROM BS_APPV_DOC X WHERE A.APPV_DOC_ID = X.APPV_DOC_ID) = 'CNL_SUBMIT'
			                     	  	  AND (
			                     	  	  		(SELECT COUNT(*)
      	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
      	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
      	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
      	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
      	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
         	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
         	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
         	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
         	  	  				  		     					)
         	  	  				  		   			AND Y.CANCEL_COMMENT IS NULL
      	  	  									 )>0

      	  	  									 OR (
      	  	  									 		(SELECT COUNT(*)
               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
               	  	  									   AND Y.APPV_CLASS = 'APPROVAL'
               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
                  	  	  				  		       					  AND K.APPV_CLASS = 'APPROVAL'
                  	  	  				  		     					)
                  	  	  				  		   			AND Y.CANCEL_COMMENT IS NOT NULL
               	  	  									 )>0
               	  	  									AND
               	  	  									(SELECT COUNT(*)
               	  	  									  FROM BS_APPROVAL_LINE_FLOW_V Y
               	  	  									 WHERE Y.APPV_DOC_ID = A.APPV_DOC_ID
               	  	  									   AND Y.APPV_CLASS = A.APPV_CLASS
               	  	  									   AND Y.APPV_EMP_ID = A.APPV_EMP_ID
               	  	  									   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
                  	  	  				  		       					 FROM BS_APPROVAL_LINE_FLOW_V K
                  	  	  				  		       					WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
                  	  	  				  		       					  AND K.APPV_CLASS = 'AGREE'
                  	  	  				  		     					)
                  	  	  				  		   AND Y.CANCEL_COMMENT IS NULL
               	  	  									 )>0
      	  	  									 	)
			                     	  	  		)
			                     	  	  )
			                     	  )
			                     <isEqual property="ruleUseYn" compareValue="Y">
			                     AND CASE WHEN #readTimeYn# = 'Y' THEN 1=1
			                     		  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),B.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,1=1,1=2)
			                     	  END
								 </isEqual>
								 <isEqual property="ruleUseYn" compareValue="N">
									AND 1=2
								</isEqual>
		                    </isEqual>
		                    <isEqual property="listType" compareValue="reqList">
			                     AND     A.APPV_EMP_ID = #userId# /* 승인이나 반려한것만 */
			                     AND	 IF(DATEDIFF(NOW(),B.SUBMIT_DATE)<![CDATA[<=]]>3,1=1,1=2)
		                    </isEqual>
		                    <isEqual property="listType" compareValue="proxyList">
		                    	 AND A.APPV_EMP_ID IS NOT NULL
		                    	 AND A.APPV_EMP_ID != A.APPV_ASSIGN_ID
		                    	 AND	 IF(DATEDIFF(NOW(),B.SUBMIT_DATE)<![CDATA[<=]]>3,1=1,1=2)
		                    </isEqual>
		                    <isEqual property="listType" compareValue="nextList">
		                    	 AND EXISTS ((SELECT X.APPV_ASSIGN_ID
		                    	 				FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 				WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 				  AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
		                    	 				  AND X.APPV_STATUS IN ('APPROVE','REJECT')
		                    	 				  AND (X.NOW_APPV_ASSIGN_ID != #userId# AND X.APPV_ASSIGN_ID != #userId#)
		                    	 			))
		                    	 AND APPV_EMP_ID IS NULL
		                    	 <isEqual property="ruleUseYn" compareValue="Y">
			                     AND CASE WHEN #readTimeYn# = 'Y' THEN IF(A.APPV_STATUS NOT IN ('APPROVE','REJECT') ,1=1 , 1=2)
			                     		  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),B.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,1=1,1=2)
			                     	  END
								 </isEqual>
								 <isEqual property="ruleUseYn" compareValue="N">
									AND 1=2
								</isEqual>
		                    </isEqual>
		                    <isEqual property="listType" compareValue="previous">
		                    	 AND B.APPV_BEFORE_APPROVE_READ_YN = 'Y'
		                    	 AND A.REAL_APPV_STATUS NOT IN ('REQ','APPROVE','REJECT') /*요청건제외*/
		                    	 AND B.DOC_STATUS NOT IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
		                    	 AND (SELECT X.APPV_STATUS
		                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 	     AND A.NOW_APPV_SEQ <![CDATA[>]]> X.APPV_SEQ
		                    	 	    ORDER BY APPV_SEQ DESC LIMIT 1
		                    	 	 ) NOT IN ('APPROVE','REJECT')
		                    	 AND NOT EXISTS (SELECT X.APPV_STATUS
				                    	 		FROM BS_APPROVAL_LINE_FLOW_V X
				                    	 	   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
				                    	 	     AND A.NOW_APPV_SEQ <![CDATA[<]]> X.APPV_SEQ
				                    	 	     AND X.APPV_STATUS IN ('APPROVE','REJECT')
				                    	 	 	)
		                    	 AND IF(A.APPV_CLASS = 'AGREE',(SELECT X.APPV_EMP_ID FROM BS_APPROVAL_LINE_FLOW_V X
		                    	 								  WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
		                    	 								   AND X.APPV_CLASS = 'APPROVAL'
		                    	 								   ORDER BY X.APPV_SEQ DESC LIMIT 1) IS NOT NULL
		                    	 								   ,1=1
		                    	 								)
		                    	  <isEqual property="ruleUseYn" compareValue="Y">
			                     AND CASE WHEN #readTimeYn# = 'Y' THEN IF(B.READ_USER_ID IS NULL OR B.READ_USER_ID NOT LIKE CONCAT('%|',#userId#,'|%') , 1=1 , 1=2)
			                     		  WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),B.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,1=1,1=2)
			                     	  END
								 </isEqual>
								 <isEqual property="ruleUseYn" compareValue="N">
									AND 1=2
								</isEqual>
		                    </isEqual>
		                    <isEqual property="searchApplyOrgId" compareValue="Y">
								AND A.ORG_ID = #applyOrgId#
							</isEqual>
		                    <isEqual property="listType" compareValue="reqList">
					         GROUP BY A.APPV_DOC_ID
					         </isEqual>
		        )  A

	</select>
	<!--참조문서 new 조회 -->
	<select id = "approve.getMenuApproveReference" parameterClass="HashMap" resultClass="Integer">
		SELECT   /* approve.getMenuApproveReference */
                 COUNT(*)
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,A.READ_DATE
                           ,B.APPV_DOC_TYPE
                           ,B.USER_ID
                           ,B.DOC_STATUS
                           ,(SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE A.ORG_ID = X.ORG_ID AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.APPV_DOC_CLASS = X.APPV_DOC_CLASS LIMIT 0, 1) AS CREATE_DATE
                           ,B.DOC_TITLE AS TITLE
                           ,B.SUBMIT_DATE
                           ,B.ORG_ID AS WRITE_ORG_ID
                    FROM    (
                            SELECT  /* Approval Line Flow */
                                    A.ORG_ID
                                   ,A.APPV_DOC_ID
                                   ,A.APPV_DOC_CLASS
                                   ,A.READ_DATE
                            FROM    BS_APPV_CC  A
                            WHERE   1=1
                              AND A.USER_ID = #userId#
                            ) A INNER JOIN BS_APPV_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID AND
                            							IF(B.APPV_BEFORE_CC_READ_YN = 'Y',B.DOC_STATUS NOT IN('WORKING'),B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
                )  A
        WHERE   1 = 1
        <isEqual property="ruleUseYn" compareValue="Y">
		AND CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_DATE IS NOT NULL , 1=2 , 1=1)
			 	 WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,1=1, 1=2)
		 END
		</isEqual>
		<isEqual property="ruleUseYn" compareValue="N">
			AND 1=2
		</isEqual>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.WRITE_ORG_ID = #applyOrgId#
		</isEqual>
	</select>
	<!--수신문서 new 조회 -->
	<select id = "approve.getMenuApproveReceived" parameterClass="HashMap" resultClass="Integer">
		SELECT   /*approve.getMenuApproveReceived*/
				COUNT(*)
        FROM    (
                    SELECT  A.ORG_ID
                           ,A.APPV_DOC_ID
                           ,A.APPV_DOC_CLASS
                           ,A.READ_DATE
                           ,A.RECEIPT_YN
                           ,B.APPV_DOC_TYPE
                           ,B.USER_ID
                           ,B.DOC_STATUS
                           ,(SELECT X.CREATE_DATE FROM BS_APPV_PROCESS X WHERE A.ORG_ID = X.ORG_ID AND A.APPV_DOC_ID = X.APPV_DOC_ID AND A.APPV_DOC_CLASS = X.APPV_DOC_CLASS LIMIT 0, 1) AS CREATE_DATE
                           ,B.DOC_TITLE AS TITLE
                           ,B.APPV_DOC_NUM
                           ,B.SUBMIT_DATE
                           ,B.ORG_ID AS WRITE_ORG_ID
                    FROM    (
                            SELECT  /* Approval Line Flow */
                                    A.ORG_ID
                                   ,A.APPV_DOC_ID
                                   ,A.APPV_DOC_CLASS
                                   ,A.READ_DATE
                                   ,A.RECEIPT_YN
                            FROM    BS_APPV_RECEIVER  A
                            WHERE     A.USER_ID = #userId#
                            ) A INNER JOIN BS_APPV_DOC B
	     								ON A.APPV_DOC_ID = B.APPV_DOC_ID
	     							   AND IF(B.APPV_BEFORE_RECEIVE_READ_YN = 'Y',B.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT'), B.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT'))
                )  A
        WHERE   1 = 1
       	<isEqual property="ruleUseYn" compareValue="Y">
		AND CASE WHEN #readTimeYn# = 'Y' THEN IF(A.READ_DATE IS NOT NULL , 1=2 , 1=1)
			WHEN #readTimeYn# = 'N' THEN IF(DATEDIFF(NOW(),A.SUBMIT_DATE)<![CDATA[<=]]>#markDayCnt#,1=1,1=2)
		    END
		</isEqual>
		<isEqual property="ruleUseYn" compareValue="N">
			AND 1=2 AS newYn
		</isEqual>
		<isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.WRITE_ORG_ID = #applyOrgId#
		</isEqual>
	</select>
	<!--지출문서 new 조회 -->
	<select id = "approve.getMenuApproveExpense" parameterClass="HashMap" resultClass="Integer">
		SELECT /*approve.getMenuApproveExpense*/
        	     COUNT(*)
          FROM BS_APPV_DOC A
        INNER JOIN BS_APPV_EXPENSE_DOC B ON A.APPV_DOC_ID = B.APPV_DOC_ID
        LEFT OUTER JOIN BS_APPV_RECEIVER RC ON  RC.APPV_DOC_ID=A.APPV_DOC_ID AND RC.RECEIPT_YN ='Y'
         WHERE A.APPV_DOC_CLASS = 'EXPENSE'
           AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT')
           AND EXISTS ( SELECT X.USER_ID FROM BS_APPV_EXPENSE_MANAGER_SETUP X WHERE X.USER_ID = #userId# )
           AND B.EXPENSE_YN IS NULL
        <isEqual property="searchApplyOrgId" compareValue="Y">
			AND A.ORG_ID = #applyOrgId#
		</isEqual>
	</select>
	<!-- 지출결의서 지급처리 -->
	<update id = "approve.processExpenseYn"  parameterClass="HashMap">
		UPDATE BS_APPV_EXPENSE_DOC
		   SET EXPENSE_YN = 'Y'
		   	  ,EXPENSE_PAY_COMMENT = #expensePayComment#
		   	  ,EXPENSE_PAY_USER_ID = #userId#
		   	  ,EXPENSE_PAY_DAY = NOW()
		   	  ,UPDATED_BY = #userId#
		   	  ,UPDATE_DATE = NOW()
		 WHERE APPV_DOC_ID = #appvDocId#
	</update>

	<!-- 전자결재 미결알람 보내기 대상 리스트 -->
	<select id="approve.getSendAppvAlarmList" parameterClass="HashMap" resultClass="egovMap">
		/* approve.getSendAppvAlarmList */
		SELECT 		A.TYPE						/* 타입 : 미결 */
				   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				   ,A.APPV_DOC_CLASS
				   ,A.APPV_DOC_TYPE
				   ,A.DOC_STATUS
			       ,A.SUBMIT_DATE				/* 상신일 */
			       ,DATE_FORMAT(A.SUBMIT_DATE , '%Y-%m-%d') AS SUBMIT_DATE_STR
			       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
			       ,A.NAME						/* 상신자 */
			       ,A.RANK_NM					/* 상신자 직책 */
			       ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                              FROM   BS_USER_DEPARTMENT Y
                                                                              WHERE  Y.USER_ID = A.WRITER_ID
                                                                              AND    Y.MAIN_YN = 'Y'
                                                                              AND    Y.ENABLE = 'Y'
                                                                              AND    Y.DELETE_FLAG = 'N'
                                                                              )
                	) AS USER_DEPT_NM
			       ,A.DOC_TITLE					/* 제목*/
			       ,A.USER_ID					/* 수신자 USER_ID */
			       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
			       ,A.TARGET_DATE				/* 기준 비교일*/
			       ,DATE_FORMAT(A.TARGET_DATE , '%Y-%m-%d') AS TARGET_DATE_STR
			       ,DATEDIFF(NOW(),A.TARGET_DATE) as DIFF_DAY /* 지연일수 */
			       <isEqual property="type" compareValue="pop">
			       ,(SELECT X.APPV_PROCESS_ID
			           FROM BS_APPROVAL_LINE_FLOW_V X
			          WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
			            AND X.NOW_APPV_ASSIGN_ID = #userId#) AS APPV_PROCESS_ID
			       </isEqual>
			       <isEqual property="type" compareValue="sms">
			       ,0 AS APPV_PROCESS_ID
			       </isEqual>
		FROM (
			/* 미결 문서 */
			SELECT  A.TYPE						/* 타입 : 미결 */
				   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				   ,A.APPV_DOC_CLASS
				   ,A.APPV_DOC_TYPE
				   ,A.DOC_STATUS
			       ,A.SUBMIT_DATE				/* 상신일 */
			       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
			       ,A.NAME						/* 상신자 */
			       ,A.WRITER_ID					/* 상신자 ID */
			       ,A.RANK_NM					/* 상신자 직책 */
			       ,A.DOC_TITLE					/* 제목*/
			       ,A.USER_ID					/* 수신자 USER_ID */
			       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
			       <isEqual property="type" compareValue="pop">
			       	  ,A.TARGET_DATE				/* 기준 비교일*/
			       </isEqual>
			       <isEqual property="type" compareValue="sms">
				       /* SMS 발송시 GROUP BY */
				       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
			       </isEqual>
			 FROM (
					/* 결재자 쿼리 */
					SELECT  A.TYPE						/* 타입 : 미결 */
						   ,A.APPV_DOC_ID				/* 전자결재 순번 */
						   ,A.APPV_DOC_CLASS
						   ,A.APPV_DOC_TYPE
					   	   ,A.DOC_STATUS
						   ,A.SUBMIT_DATE				/* 상신일 */
						   ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
						   ,A.NAME						/* 상신자 */
						   ,A.WRITER_ID					/* 상신자 ID */
						   ,A.RANK_NM					/* 상신자 직책 */
						   ,A.DOC_TITLE					/* 제목*/
						   ,A.USER_ID					/* 수신자 USER_ID */
						   ,A.BASE_SETUP_PERIOD			/* 기준일수 */
						   ,A.TARGET_DATE				/* 기준 비교일*/
					 FROM (
								SELECT 'APPROVE' AS TYPE						/* 타입 : 미결 */
										,A.APPV_DOC_ID							/* 전자결재 순번 */
										,A.APPV_DOC_CLASS
										,A.APPV_DOC_TYPE
					   					,A.DOC_STATUS
										,A.SUBMIT_DATE							/* 상신일 */
										,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																								FROM BS_CODE_GV X
																							   WHERE X.ORG_ID =  A.ORG_ID
																								 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																								 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
																						) AS APPV_DOC_TYPE_NM			/* 문서종류 */
										,C.NAME 																		/* 상신자 */
										,A.WRITER_ID																	/* 상신자 ID */
										,(SELECT G.VALUE_MEAN_KOR
												  FROM BS_CODE_GV G
												  WHERE G.ORG_ID =  A.ORG_ID
												   AND  G.CODE_NAME = 'RANK'
												   AND  G.CODE_VALUE =C.RANK)	AS RANK_NM								/* 상신자 직책 */
										,A.DOC_TITLE																	/* 제목 */
										,IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID)	AS USER_ID							/* 수신자 USER_ID */
										,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
										,B.BASE_SETUP_PERIOD															/* 기준일수 */
								FROM bs_appv_doc A
								INNER JOIN  BS_APPROVAL_LINE_FLOW_V V  on A.appv_doc_id = v.appv_doc_id
								INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'APPROV' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
								INNER JOIN BS_USER_MASTER C ON A.WRITER_ID = C.USER_ID
								WHERE B.BASE_SETUP_TYPE = 'PERIOD'
								  AND A.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT','REJECT','COMMIT')
								  AND V.APPV_CLASS = 'APPROVAL'
								  AND (V.APPV_STATUS = 'REQ'
										OR (A.DOC_STATUS = 'CNL_SUBMIT'
											AND (SELECT COUNT(*)
												  FROM BS_APPROVAL_LINE_FLOW_V Y
												 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
												   AND Y.APPV_CLASS = V.APPV_CLASS
												   AND Y.APPV_EMP_ID = V.APPV_EMP_ID
												   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																 FROM BS_APPROVAL_LINE_FLOW_V K
																WHERE K.APPV_DOC_ID = V.APPV_DOC_ID
																  AND K.APPV_CLASS = V.APPV_CLASS
																)
													AND Y.CANCEL_COMMENT IS NULL
												 )>0
											)
										)
								 <isEqual property="type" compareValue="pop">
								   /* 팝업호출시 */
								  AND IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID) = #userId#
								  </isEqual>

						  ) A
					  WHERE DATE(A.TARGET_DATE) <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))

			          UNION ALL

			          /* 합의자 쿼리 */
					  SELECT  A.TYPE						/* 타입 : 미결 */
						   ,A.APPV_DOC_ID				/* 전자결재 순번 */
						   ,A.APPV_DOC_CLASS
						   ,A.APPV_DOC_TYPE
					   	   ,A.DOC_STATUS
						   ,A.SUBMIT_DATE				/* 상신일 */
						   ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
						   ,A.NAME						/* 상신자 */
						   ,A.WRITER_ID					/* 상신자 ID */
						   ,A.RANK_NM					/* 상신자 직책 */
						   ,A.DOC_TITLE					/* 제목*/
						   ,A.USER_ID					/* 수신자 USER_ID */
						   ,A.BASE_SETUP_PERIOD			/* 기준일수 */
						   ,A.TARGET_DATE				/* 기준 비교일*/
					 FROM (
								SELECT 'AGREE' AS TYPE							/* 타입 : 미결 */
										,A.APPV_DOC_ID							/* 전자결재 순번 */
										,A.APPV_DOC_CLASS
										,A.APPV_DOC_TYPE
					   					,A.DOC_STATUS
										,A.SUBMIT_DATE							/* 상신일 */
										,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																								FROM BS_CODE_GV X
																							   WHERE X.ORG_ID =  A.ORG_ID
																								 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																								 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
												) AS APPV_DOC_TYPE_NM			/* 문서종류 */
										,C.NAME 								/* 상신자 */
										,A.WRITER_ID					/* 상신자 ID */
										,(SELECT G.VALUE_MEAN_KOR
												  FROM BS_CODE_GV G
												  WHERE G.ORG_ID =  A.ORG_ID
												   AND  G.CODE_NAME = 'RANK'
												   AND  G.CODE_VALUE =C.RANK)	AS RANK_NM	/* 상신자 직책 */
										,A.DOC_TITLE										/*제목*/
										,V.NOW_APPV_ASSIGN_ID	AS USER_ID					/* 수신자 USER_ID */
										,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
										,B.BASE_SETUP_PERIOD								/* 기준일수 */
								FROM bs_appv_doc A
								INNER JOIN  BS_APPROVAL_LINE_FLOW_V V  on A.appv_doc_id = v.appv_doc_id
								INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'AGREE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
								INNER JOIN BS_USER_MASTER C ON A.WRITER_ID = C.USER_ID
								WHERE B.BASE_SETUP_TYPE = 'PERIOD'
								  AND A.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT','REJECT','COMMIT','CNL_SUBMIT')
								  AND V.APPV_CLASS = 'AGREE'
								  AND (V.APPV_STATUS = 'REQ'
										OR (A.DOC_STATUS = 'CNL_SUBMIT'
											AND (
														(SELECT COUNT(*)
														  FROM BS_APPROVAL_LINE_FLOW_V Y
														 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
														   AND Y.APPV_CLASS = V.APPV_CLASS
														   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																		 FROM BS_APPROVAL_LINE_FLOW_V K
																		WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
																		  AND K.APPV_CLASS = 'APPROVAL'
																		)
															AND Y.CANCEL_COMMENT IS NOT NULL
														 )>0
														AND
														(SELECT COUNT(*)
														  FROM BS_APPROVAL_LINE_FLOW_V Y
														 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
														   AND Y.APPV_CLASS = V.APPV_CLASS
														   AND Y.APPV_EMP_ID = V.APPV_EMP_ID
														   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																		 FROM BS_APPROVAL_LINE_FLOW_V K
																		WHERE K.APPV_DOC_ID = V.APPV_DOC_ID
																		  AND K.APPV_CLASS = V.APPV_CLASS
																		)
												   		  AND Y.CANCEL_COMMENT IS NULL
														 )>0
													)
											)
										)
								  <isEqual property="type" compareValue="pop">
								   /* 팝업호출시  */
								  AND IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID) = #userId#
								  </isEqual>
						  ) A
					  WHERE DATE(A.TARGET_DATE)  <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))
				) A
			  <isEqual property="type" compareValue="sms">
	         	/* SMS 발송시 GROUP BY*/
			  	GROUP BY A.USER_ID
			  </isEqual>

			  UNION ALL

			  	/* 참조문서 */
				SELECT  A.TYPE						/* 타입 : 미결 */
					   ,A.APPV_DOC_ID				/* 전자결재 순번 */
					   ,A.APPV_DOC_CLASS
					   ,A.APPV_DOC_TYPE
		   			   ,A.DOC_STATUS
				       ,A.SUBMIT_DATE				/* 상신일 */
				       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
				       ,A.NAME						/* 상신자 */
				       ,A.WRITER_ID					/* 상신자 ID */
				       ,A.RANK_NM					/* 상신자 직책 */
				       ,A.DOC_TITLE					/* 제목*/
				       ,A.USER_ID					/* 수신자 USER_ID */
				       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
				       <isEqual property="type" compareValue="pop">
				       	  ,A.TARGET_DATE				/* 기준 비교일*/
				       </isEqual>
				       <isEqual property="type" compareValue="sms">
					       /* SMS 발송시 GROUP BY */
					       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
				       </isEqual>
				  FROM (
						SELECT 'RECEIVE' AS TYPE						/* 타입 : 미결 */
								,A.APPV_DOC_ID							/* 전자결재 순번 */
								,A.APPV_DOC_CLASS
								,A.APPV_DOC_TYPE
					   			,A.DOC_STATUS
								,A.SUBMIT_DATE							/* 상신일 */
								,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																						FROM BS_CODE_GV X
																					   WHERE X.ORG_ID =  A.ORG_ID
																						 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																						 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
										) AS APPV_DOC_TYPE_NM			/* 문서종류 */
								,D.NAME 								/* 상신자 */
								,A.WRITER_ID					/* 상신자 ID */
								,(SELECT G.VALUE_MEAN_KOR
										  FROM BS_CODE_GV G
										  WHERE G.ORG_ID =  A.ORG_ID
										   AND  G.CODE_NAME = 'RANK'
										   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM	/* 상신자 직책 */
								,A.DOC_TITLE										/*제목*/
								,C.USER_ID											/* 수신자 USER_ID */
								,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
								,B.BASE_SETUP_PERIOD								/* 기준일수 */
						  FROM bs_appv_doc A
						  INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'RECEIVE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
						  INNER JOIN BS_APPV_CC C ON A.APPV_DOC_ID = C.APPV_DOC_ID
						  INNER JOIN BS_USER_MASTER D ON A.WRITER_ID = D.USER_ID
						  WHERE B.BASE_SETUP_TYPE = 'PERIOD'
							AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
							AND C.READ_DATE IS NULL
							<isEqual property="type" compareValue="pop">
				              /* 팝업호출시 */
							  AND C.USER_ID = #userId#
							</isEqual>
				    ) A
				    WHERE DATE(A.TARGET_DATE) <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))
				    <isEqual property="type" compareValue="sms">
				      /* SMS 발송시 GROUP BY */
					  GROUP BY A.USER_ID
					</isEqual>

				UNION ALL

				/* 지출문서 */
				SELECT  A.TYPE						/* 타입 : 미결 */
					   ,A.APPV_DOC_ID				/* 전자결재 순번 */
					   ,A.APPV_DOC_CLASS
					   ,A.APPV_DOC_TYPE
					   ,A.DOC_STATUS
				       ,A.SUBMIT_DATE				/* 상신일 */
				       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
				       ,A.NAME						/* 상신자 */
				       ,A.WRITER_ID					/* 상신자 ID */
				       ,A.RANK_NM					/* 상신자 직책 */
				       ,A.DOC_TITLE					/* 제목*/
				       ,A.USER_ID					/* 수신자 USER_ID */
				       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
				       <isEqual property="type" compareValue="pop">
				       	  ,A.TARGET_DATE				/* 기준 비교일*/
				       </isEqual>
				       <isEqual property="type" compareValue="sms">
					       /* SMS 발송시 GROUP BY */
					       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
				       </isEqual>
				  FROM (
						SELECT 'FINANCE' AS TYPE						/* 타입 : 미결 */
								,A.APPV_DOC_ID							/* 전자결재 순번 */
								,A.APPV_DOC_CLASS
								,A.APPV_DOC_TYPE
					   			,A.DOC_STATUS
								,A.SUBMIT_DATE							/* 상신일 */
								,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																						FROM BS_CODE_GV X
																					   WHERE X.ORG_ID =  A.ORG_ID
																						 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																						 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
										) AS APPV_DOC_TYPE_NM			/* 문서종류 */
								,D.NAME 								/* 상신자 */
								,A.WRITER_ID					/* 상신자 ID */
								,(SELECT G.VALUE_MEAN_KOR
										  FROM BS_CODE_GV G
										  WHERE G.ORG_ID =  A.ORG_ID
										   AND  G.CODE_NAME = 'RANK'
										   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM	/* 상신자 직책 */
								,A.DOC_TITLE										/*제목*/
								,E.USER_ID											/* 수신자 USER_ID */
								,(SELECT MAX(X.UPDATE_DATE)
									FROM BS_APPV_PROCESS X
								   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
								 ) 				 AS TARGET_DATE						/* 기준 비교일 */
								,B.BASE_SETUP_PERIOD								/* 기준일수 */
						  FROM bs_appv_doc A
						  INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'FINANCE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
				          INNER JOIN BS_APPV_EXPENSE_DOC C ON A.APPV_DOC_ID = C.APPV_DOC_ID AND C.EXPENSE_PAY_DAY IS NULL
						  INNER JOIN BS_APPV_EXPENSE_MANAGER_SETUP E ON A.ORG_ID = E.ORG_ID
						  INNER JOIN BS_USER_MASTER D ON A.WRITER_ID = D.USER_ID
						  WHERE B.BASE_SETUP_TYPE = 'PERIOD'
							AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
				           <isEqual property="type" compareValue="pop">
							  AND E.USER_ID = #userId#
						   </isEqual>
				    ) A
				    WHERE DATE(A.TARGET_DATE) <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))
				    <isEqual property="type" compareValue="sms">
				    	/* SMS 발송시 GROUP BY */
					  	GROUP BY A.USER_ID
					</isEqual>
			) A
			<isEqual property="type" compareValue="sms">
				WHERE NOT EXISTS (
								SELECT X.CALENDAR_ID
								  FROM BS_CALENDAR X
								 WHERE X.ORG_ID = (SELECT Y.ORG_ID FROM BS_USER_MASTER Y WHERE Y.USER_ID = A.USER_ID)
								   AND DATE(X.SYS_DATE) = DATE(NOW())
								   AND X.HOLIDAY = 'Y'
								)
				ORDER BY A.USER_ID ,  IF(A.TYPE = 'APPROVE' OR A.TYPE = 'AGREE' , 1 , IF(A.TYPE = 'RECEIVE',2,3)) ASC
			</isEqual>
			<isEqual property="type" compareValue="pop">
				ORDER BY A.SUBMIT_DATE DESC
			</isEqual>
	</select>
	<!-- 전자결재 미결알람 보내기 개수 -->
	<select id="approve.getSendAppvAlarmListTotalCnt" parameterClass="HashMap" resultClass="Integer">
		/* approve.getSendAppvAlarmListTotalCnt */
		SELECT 		COUNT(*)
		FROM (
			/* 미결 문서 */
			SELECT  A.TYPE						/* 타입 : 미결 */
				   ,A.APPV_DOC_ID				/* 전자결재 순번 */
			       ,A.SUBMIT_DATE				/* 상신일 */
			       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
			       ,A.NAME						/* 상신자 */
			       ,A.RANK_NM					/* 상신자 직책 */
			       ,A.DOC_TITLE					/* 제목*/
			       ,A.USER_ID					/* 수신자 USER_ID */
			       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
			       <isEqual property="type" compareValue="pop">
			       	  ,A.TARGET_DATE				/* 기준 비교일*/
			       </isEqual>
			       <isEqual property="type" compareValue="sms">
				       /* SMS 발송시 GROUP BY */
				       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
			       </isEqual>
			 FROM (
					/* 결재자 쿼리 */
					SELECT  A.TYPE						/* 타입 : 미결 */
						   ,A.APPV_DOC_ID				/* 전자결재 순번 */
						   ,A.SUBMIT_DATE				/* 상신일 */
						   ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
						   ,A.NAME						/* 상신자 */
						   ,A.RANK_NM					/* 상신자 직책 */
						   ,A.DOC_TITLE					/* 제목*/
						   ,A.USER_ID					/* 수신자 USER_ID */
						   ,A.BASE_SETUP_PERIOD			/* 기준일수 */
						   ,A.TARGET_DATE				/* 기준 비교일*/
					 FROM (
								SELECT 'APPROVE' AS TYPE						/* 타입 : 미결 */
										,A.APPV_DOC_ID							/* 전자결재 순번 */
										,A.SUBMIT_DATE							/* 상신일 */
										,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																								FROM BS_CODE_GV X
																							   WHERE X.ORG_ID =  A.ORG_ID
																								 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																								 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
																						) AS APPV_DOC_TYPE_NM			/* 문서종류 */
										,C.NAME 																		/* 상신자 */
										,(SELECT G.VALUE_MEAN_KOR
												  FROM BS_CODE_GV G
												  WHERE G.ORG_ID =  A.ORG_ID
												   AND  G.CODE_NAME = 'RANK'
												   AND  G.CODE_VALUE =C.RANK)	AS RANK_NM								/* 상신자 직책 */
										,A.DOC_TITLE																	/* 제목 */
										,IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID)	AS USER_ID							/* 수신자 USER_ID */
										,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
										,B.BASE_SETUP_PERIOD															/* 기준일수 */
								FROM bs_appv_doc A
								INNER JOIN  BS_APPROVAL_LINE_FLOW_V V  on A.appv_doc_id = v.appv_doc_id
								INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'APPROV' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
								INNER JOIN BS_USER_MASTER C ON A.WRITER_ID = C.USER_ID
								WHERE B.BASE_SETUP_TYPE = 'PERIOD'
								  AND A.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT','REJECT','COMMIT')
								  AND V.APPV_CLASS = 'APPROVAL'
								  AND (V.APPV_STATUS = 'REQ'
										OR (A.DOC_STATUS = 'CNL_SUBMIT'
											AND (SELECT COUNT(*)
												  FROM BS_APPROVAL_LINE_FLOW_V Y
												 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
												   AND Y.APPV_CLASS = V.APPV_CLASS
												   AND Y.APPV_EMP_ID = V.APPV_EMP_ID
												   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																 FROM BS_APPROVAL_LINE_FLOW_V K
																WHERE K.APPV_DOC_ID = V.APPV_DOC_ID
																  AND K.APPV_CLASS = V.APPV_CLASS
																)
													AND Y.CANCEL_COMMENT IS NULL
												 )>0
											)
										)
								 <isEqual property="type" compareValue="pop">
								   /* 팝업호출시 */
								  AND IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID) = #userId#
								  </isEqual>

						  ) A
					  WHERE DATE(A.TARGET_DATE) <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))

			          UNION ALL

			          /* 합의자 쿼리 */
					  SELECT  A.TYPE						/* 타입 : 미결 */
						   ,A.APPV_DOC_ID				/* 전자결재 순번 */
						   ,A.SUBMIT_DATE				/* 상신일 */
						   ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
						   ,A.NAME						/* 상신자 */
						   ,A.RANK_NM					/* 상신자 직책 */
						   ,A.DOC_TITLE					/* 제목*/
						   ,A.USER_ID					/* 수신자 USER_ID */
						   ,A.BASE_SETUP_PERIOD			/* 기준일수 */
						   ,A.TARGET_DATE				/* 기준 비교일*/
					 FROM (
								SELECT 'AGREE' AS TYPE							/* 타입 : 미결 */
										,A.APPV_DOC_ID							/* 전자결재 순번 */
										,A.SUBMIT_DATE							/* 상신일 */
										,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																								FROM BS_CODE_GV X
																							   WHERE X.ORG_ID =  A.ORG_ID
																								 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																								 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
												) AS APPV_DOC_TYPE_NM			/* 문서종류 */
										,C.NAME 								/* 상신자 */
										,(SELECT G.VALUE_MEAN_KOR
												  FROM BS_CODE_GV G
												  WHERE G.ORG_ID =  A.ORG_ID
												   AND  G.CODE_NAME = 'RANK'
												   AND  G.CODE_VALUE =C.RANK)	AS RANK_NM	/* 상신자 직책 */
										,A.DOC_TITLE										/*제목*/
										,V.NOW_APPV_ASSIGN_ID	AS USER_ID					/* 수신자 USER_ID */
										,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
										,B.BASE_SETUP_PERIOD								/* 기준일수 */
								FROM bs_appv_doc A
								INNER JOIN  BS_APPROVAL_LINE_FLOW_V V  on A.appv_doc_id = v.appv_doc_id
								INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'AGREE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
								INNER JOIN BS_USER_MASTER C ON A.WRITER_ID = C.USER_ID
								WHERE B.BASE_SETUP_TYPE = 'PERIOD'
								  AND A.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT','REJECT','COMMIT','CNL_SUBMIT')
								  AND V.APPV_CLASS = 'AGREE'
								  AND (V.APPV_STATUS = 'REQ'
										OR (A.DOC_STATUS = 'CNL_SUBMIT'
											AND (
														(SELECT COUNT(*)
														  FROM BS_APPROVAL_LINE_FLOW_V Y
														 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
														   AND Y.APPV_CLASS = V.APPV_CLASS
														   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																		 FROM BS_APPROVAL_LINE_FLOW_V K
																		WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
																		  AND K.APPV_CLASS = 'APPROVAL'
																		)
															AND Y.CANCEL_COMMENT IS NOT NULL
														 )>0
														AND
														(SELECT COUNT(*)
														  FROM BS_APPROVAL_LINE_FLOW_V Y
														 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
														   AND Y.APPV_CLASS = V.APPV_CLASS
														   AND Y.APPV_EMP_ID = V.APPV_EMP_ID
														   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																		 FROM BS_APPROVAL_LINE_FLOW_V K
																		WHERE K.APPV_DOC_ID = V.APPV_DOC_ID
																		  AND K.APPV_CLASS = V.APPV_CLASS
																		)
												   		  AND Y.CANCEL_COMMENT IS NULL
														 )>0
													)
											)
										)
								  <isEqual property="type" compareValue="pop">
								   /* 팝업호출시  */
								  AND IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID) = #userId#
								  </isEqual>
						  ) A
					  WHERE DATE(A.TARGET_DATE)  <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))
				) A
			  <isEqual property="type" compareValue="sms">
	         	/* SMS 발송시 GROUP BY*/
			  	GROUP BY A.USER_ID
			  </isEqual>

			  UNION ALL

			  	/* 참조문서 */
				SELECT  A.TYPE						/* 타입 : 미결 */
					   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				       ,A.SUBMIT_DATE				/* 상신일 */
				       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
				       ,A.NAME						/* 상신자 */
				       ,A.RANK_NM					/* 상신자 직책 */
				       ,A.DOC_TITLE					/* 제목*/
				       ,A.USER_ID					/* 수신자 USER_ID */
				       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
				       <isEqual property="type" compareValue="pop">
				       	  ,A.TARGET_DATE				/* 기준 비교일*/
				       </isEqual>
				       <isEqual property="type" compareValue="sms">
					       /* SMS 발송시 GROUP BY */
					       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
				       </isEqual>
				  FROM (
						SELECT 'RECEIVE' AS TYPE						/* 타입 : 미결 */
								,A.APPV_DOC_ID							/* 전자결재 순번 */
								,A.SUBMIT_DATE							/* 상신일 */
								,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																						FROM BS_CODE_GV X
																					   WHERE X.ORG_ID =  A.ORG_ID
																						 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																						 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
										) AS APPV_DOC_TYPE_NM			/* 문서종류 */
								,D.NAME 								/* 상신자 */
								,(SELECT G.VALUE_MEAN_KOR
										  FROM BS_CODE_GV G
										  WHERE G.ORG_ID =  A.ORG_ID
										   AND  G.CODE_NAME = 'RANK'
										   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM	/* 상신자 직책 */
								,A.DOC_TITLE										/*제목*/
								,C.USER_ID											/* 수신자 USER_ID */
								,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
								,B.BASE_SETUP_PERIOD								/* 기준일수 */
						  FROM bs_appv_doc A
						  INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'RECEIVE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
						  INNER JOIN BS_APPV_CC C ON A.APPV_DOC_ID = C.APPV_DOC_ID
						  INNER JOIN BS_USER_MASTER D ON A.WRITER_ID = D.USER_ID
						  WHERE B.BASE_SETUP_TYPE = 'PERIOD'
							AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
							AND C.READ_DATE IS NULL
							<isEqual property="type" compareValue="pop">
				              /* 팝업호출시 */
							  AND C.USER_ID = #userId#
							</isEqual>
				    ) A
				    WHERE DATE(A.TARGET_DATE) <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))
				    <isEqual property="type" compareValue="sms">
				      /* SMS 발송시 GROUP BY */
					  GROUP BY A.USER_ID
					</isEqual>

				UNION ALL

				/* 지출문서 */
				SELECT  A.TYPE						/* 타입 : 미결 */
					   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				       ,A.SUBMIT_DATE				/* 상신일 */
				       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
				       ,A.NAME						/* 상신자 */
				       ,A.RANK_NM					/* 상신자 직책 */
				       ,A.DOC_TITLE					/* 제목*/
				       ,A.USER_ID					/* 수신자 USER_ID */
				       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
				       <isEqual property="type" compareValue="pop">
				       	  ,A.TARGET_DATE				/* 기준 비교일*/
				       </isEqual>
				       <isEqual property="type" compareValue="sms">
					       /* SMS 발송시 GROUP BY */
					       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
				       </isEqual>
				  FROM (
						SELECT 'FINANCE' AS TYPE						/* 타입 : 미결 */
								,A.APPV_DOC_ID							/* 전자결재 순번 */
								,A.SUBMIT_DATE							/* 상신일 */
								,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																						FROM BS_CODE_GV X
																					   WHERE X.ORG_ID =  A.ORG_ID
																						 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																						 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
										) AS APPV_DOC_TYPE_NM			/* 문서종류 */
								,D.NAME 								/* 상신자 */
								,(SELECT G.VALUE_MEAN_KOR
										  FROM BS_CODE_GV G
										  WHERE G.ORG_ID =  A.ORG_ID
										   AND  G.CODE_NAME = 'RANK'
										   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM	/* 상신자 직책 */
								,A.DOC_TITLE										/*제목*/
								,E.USER_ID											/* 수신자 USER_ID */
								,(SELECT MAX(X.UPDATE_DATE)
									FROM BS_APPV_PROCESS X
								   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
								 ) 				 AS TARGET_DATE						/* 기준 비교일 */
								,B.BASE_SETUP_PERIOD								/* 기준일수 */
						  FROM bs_appv_doc A
						  INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'FINANCE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
				          INNER JOIN BS_APPV_EXPENSE_DOC C ON A.APPV_DOC_ID = C.APPV_DOC_ID AND C.EXPENSE_PAY_DAY IS NULL
						  INNER JOIN BS_APPV_EXPENSE_MANAGER_SETUP E ON A.ORG_ID = E.ORG_ID
						  INNER JOIN BS_USER_MASTER D ON A.WRITER_ID = D.USER_ID
						  WHERE B.BASE_SETUP_TYPE = 'PERIOD'
							AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
				           <isEqual property="type" compareValue="pop">
							  AND E.USER_ID = #userId#
						   </isEqual>
				    ) A
				    WHERE DATE(A.TARGET_DATE) <![CDATA[<=]]> DATE(date_add(now(), interval -A.BASE_SETUP_PERIOD day))
				    <isEqual property="type" compareValue="sms">
				    	/* SMS 발송시 GROUP BY */
					  	GROUP BY A.USER_ID
					</isEqual>
			) A
			<isEqual property="type" compareValue="sms">
				ORDER BY A.USER_ID ,  IF(A.TYPE = 'APPROVE' OR A.TYPE = 'AGREE' , 1 , IF(A.TYPE = 'RECEIVE',2,3)) ASC
			</isEqual>
			<isEqual property="type" compareValue="pop">
				ORDER BY A.SUBMIT_DATE DESC
			</isEqual>
	</select>

	<!-- 전자결재 미결알람 보내기(즉시 :결재) -->
	<select id="approve.getApproveImApproveAlarmList" parameterClass="HashMap" resultClass="egovMap">
		/* approve.getApproveImApproveAlarmList */
		SELECT 		A.TYPE						/* 타입 : 미결 */
				   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				   ,A.APPV_DOC_CLASS
				   ,A.APPV_DOC_TYPE
				   ,A.DOC_STATUS
			       ,A.SUBMIT_DATE				/* 상신일 */
			       ,DATE_FORMAT(A.SUBMIT_DATE , '%Y-%m-%d') AS SUBMIT_DATE_STR
			       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
			       ,A.NAME						/* 상신자 */
			       ,A.RANK_NM					/* 상신자 직책 */
			       ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                              FROM   BS_USER_DEPARTMENT Y
                                                                              WHERE  Y.USER_ID = A.WRITER_ID
                                                                              AND    Y.MAIN_YN = 'Y'
                                                                              AND    Y.ENABLE = 'Y'
                                                                              AND    Y.DELETE_FLAG = 'N'
                                                                              )
                	) AS USER_DEPT_NM
			       ,A.DOC_TITLE					/* 제목*/
			       ,A.USER_ID					/* 수신자 USER_ID */
			       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
			       ,A.TARGET_DATE				/* 기준 비교일*/
			       ,DATE_FORMAT(A.TARGET_DATE , '%Y-%m-%d') AS TARGET_DATE_STR
		FROM (
			/* 미결 문서 */
			SELECT  A.TYPE						/* 타입 : 미결 */
				   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				   ,A.APPV_DOC_CLASS
				   ,A.APPV_DOC_TYPE
				   ,A.DOC_STATUS
			       ,A.SUBMIT_DATE				/* 상신일 */
			       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
			       ,A.NAME						/* 상신자 */
			       ,A.WRITER_ID					/* 상신자 ID */
			       ,A.RANK_NM					/* 상신자 직책 */
			       ,A.DOC_TITLE					/* 제목*/
			       ,A.USER_ID					/* 수신자 USER_ID */
			       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
			       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
			 FROM (
					/* 결재자 쿼리 */
					SELECT  A.TYPE						/* 타입 : 미결 */
						   ,A.APPV_DOC_ID				/* 전자결재 순번 */
						   ,A.APPV_DOC_CLASS
						   ,A.APPV_DOC_TYPE
					   	   ,A.DOC_STATUS
						   ,A.SUBMIT_DATE				/* 상신일 */
						   ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
						   ,A.NAME						/* 상신자 */
						   ,A.WRITER_ID					/* 상신자 ID */
						   ,A.RANK_NM					/* 상신자 직책 */
						   ,A.DOC_TITLE					/* 제목*/
						   ,A.USER_ID					/* 수신자 USER_ID */
						   ,A.BASE_SETUP_PERIOD			/* 기준일수 */
						   ,A.TARGET_DATE				/* 기준 비교일*/
					 FROM (
								SELECT 'APPROVE' AS TYPE						/* 타입 : 미결 */
										,A.APPV_DOC_ID							/* 전자결재 순번 */
										,A.APPV_DOC_CLASS
										,A.APPV_DOC_TYPE
					   					,A.DOC_STATUS
										,A.SUBMIT_DATE							/* 상신일 */
										,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																								FROM BS_CODE_GV X
																							   WHERE X.ORG_ID =  A.ORG_ID
																								 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																								 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
																						) AS APPV_DOC_TYPE_NM			/* 문서종류 */
										,C.NAME 																		/* 상신자 */
										,A.WRITER_ID																	/* 상신자 ID */
										,(SELECT G.VALUE_MEAN_KOR
												  FROM BS_CODE_GV G
												  WHERE G.ORG_ID =  A.ORG_ID
												   AND  G.CODE_NAME = 'RANK'
												   AND  G.CODE_VALUE =C.RANK)	AS RANK_NM								/* 상신자 직책 */
										,A.DOC_TITLE																	/* 제목 */
										,IFNULL(V.APPV_EMP_ID,V.NOW_APPV_ASSIGN_ID)	AS USER_ID							/* 수신자 USER_ID */
										,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
										,B.BASE_SETUP_PERIOD															/* 기준일수 */
								FROM bs_appv_doc A
								INNER JOIN  BS_APPROVAL_LINE_FLOW_V V  on A.appv_doc_id = v.appv_doc_id
								INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'APPROV' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
								INNER JOIN BS_USER_MASTER C ON A.WRITER_ID = C.USER_ID
								WHERE B.BASE_SETUP_TYPE = 'IMMEDIATELY'
								  AND A.APPV_DOC_ID = #appvDocId#
								  AND A.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT','REJECT','COMMIT')
								  AND V.APPV_CLASS = 'APPROVAL'
								  AND (V.APPV_STATUS = 'REQ'
										OR (A.DOC_STATUS = 'CNL_SUBMIT'
											AND (SELECT COUNT(*)
												  FROM BS_APPROVAL_LINE_FLOW_V Y
												 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
												   AND Y.APPV_CLASS = V.APPV_CLASS
												   AND Y.APPV_EMP_ID = V.APPV_EMP_ID
												   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																 FROM BS_APPROVAL_LINE_FLOW_V K
																WHERE K.APPV_DOC_ID = V.APPV_DOC_ID
																  AND K.APPV_CLASS = V.APPV_CLASS
																)
													AND Y.CANCEL_COMMENT IS NULL
												 )>0
											)
										)
						  ) A

			          UNION ALL

			          /* 합의자 쿼리 */
					  SELECT  A.TYPE						/* 타입 : 미결 */
						   ,A.APPV_DOC_ID				/* 전자결재 순번 */
						   ,A.APPV_DOC_CLASS
						   ,A.APPV_DOC_TYPE
					   	   ,A.DOC_STATUS
						   ,A.SUBMIT_DATE				/* 상신일 */
						   ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
						   ,A.NAME						/* 상신자 */
						   ,A.WRITER_ID					/* 상신자 ID */
						   ,A.RANK_NM					/* 상신자 직책 */
						   ,A.DOC_TITLE					/* 제목*/
						   ,A.USER_ID					/* 수신자 USER_ID */
						   ,A.BASE_SETUP_PERIOD			/* 기준일수 */
						   ,A.TARGET_DATE				/* 기준 비교일*/
					 FROM (
								SELECT 'AGREE' AS TYPE							/* 타입 : 미결 */
										,A.APPV_DOC_ID							/* 전자결재 순번 */
										,A.APPV_DOC_CLASS
										,A.APPV_DOC_TYPE
					   					,A.DOC_STATUS
										,A.SUBMIT_DATE							/* 상신일 */
										,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																								FROM BS_CODE_GV X
																							   WHERE X.ORG_ID =  A.ORG_ID
																								 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																								 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
												) AS APPV_DOC_TYPE_NM			/* 문서종류 */
										,C.NAME 								/* 상신자 */
										,A.WRITER_ID					/* 상신자 ID */
										,(SELECT G.VALUE_MEAN_KOR
												  FROM BS_CODE_GV G
												  WHERE G.ORG_ID =  A.ORG_ID
												   AND  G.CODE_NAME = 'RANK'
												   AND  G.CODE_VALUE =C.RANK)	AS RANK_NM	/* 상신자 직책 */
										,A.DOC_TITLE										/*제목*/
										,V.NOW_APPV_ASSIGN_ID	AS USER_ID					/* 수신자 USER_ID */
										,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
										,B.BASE_SETUP_PERIOD								/* 기준일수 */
								FROM bs_appv_doc A
								INNER JOIN  BS_APPROVAL_LINE_FLOW_V V  on A.appv_doc_id = v.appv_doc_id
								INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'AGREE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
								INNER JOIN BS_USER_MASTER C ON A.WRITER_ID = C.USER_ID
								WHERE B.BASE_SETUP_TYPE = 'IMMEDIATELY'
								  AND A.APPV_DOC_ID = #appvDocId#
								  AND A.DOC_STATUS NOT IN ('WORKING','CNL_COMMIT','REJECT','COMMIT','CNL_SUBMIT')
								  AND V.APPV_CLASS = 'AGREE'
								  AND (V.APPV_STATUS = 'REQ'
										OR (A.DOC_STATUS = 'CNL_SUBMIT'
											AND (
														(SELECT COUNT(*)
														  FROM BS_APPROVAL_LINE_FLOW_V Y
														 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
														   AND Y.APPV_CLASS = V.APPV_CLASS
														   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																		 FROM BS_APPROVAL_LINE_FLOW_V K
																		WHERE K.APPV_DOC_ID = A.APPV_DOC_ID
																		  AND K.APPV_CLASS = 'APPROVAL'
																		)
															AND Y.CANCEL_COMMENT IS NOT NULL
														 )>0
														AND
														(SELECT COUNT(*)
														  FROM BS_APPROVAL_LINE_FLOW_V Y
														 WHERE Y.APPV_DOC_ID = V.APPV_DOC_ID
														   AND Y.APPV_CLASS = V.APPV_CLASS
														   AND Y.APPV_EMP_ID = V.APPV_EMP_ID
														   AND Y.APPV_SEQ = (SELECT MAX(K.APPV_SEQ)
																		 FROM BS_APPROVAL_LINE_FLOW_V K
																		WHERE K.APPV_DOC_ID = V.APPV_DOC_ID
																		  AND K.APPV_CLASS = V.APPV_CLASS
																		)
												   		  AND Y.CANCEL_COMMENT IS NULL
														 )>0
													)
											)
										)
						  ) A
				) A
	         	/* SMS 발송시 GROUP BY*/
			  	GROUP BY A.USER_ID
		) A
	</select>

	<!-- 전자결재 미결알람 보내기(즉시 :수신,지출) -->
	<select id="approve.getApproveImCommitAlarmList" parameterClass="HashMap" resultClass="egovMap">
		/* approve.getApproveImCommitAlarmList */
		SELECT 		A.TYPE						/* 타입 : 미결 */
				   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				   ,A.APPV_DOC_CLASS
				   ,A.APPV_DOC_TYPE
				   ,A.DOC_STATUS
			       ,A.SUBMIT_DATE				/* 상신일 */
			       ,DATE_FORMAT(A.SUBMIT_DATE , '%Y-%m-%d') AS SUBMIT_DATE_STR
			       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
			       ,A.NAME						/* 상신자 */
			       ,A.RANK_NM					/* 상신자 직책 */
			       ,(SELECT X.KOR_NAME  FROM BS_DEPARTMENT  X WHERE X.DEPT_ID = (SELECT Y.DEPT_ID
                                                                              FROM   BS_USER_DEPARTMENT Y
                                                                              WHERE  Y.USER_ID = A.WRITER_ID
                                                                              AND    Y.MAIN_YN = 'Y'
                                                                              AND    Y.ENABLE = 'Y'
                                                                              AND    Y.DELETE_FLAG = 'N'
                                                                              )
                	) AS USER_DEPT_NM
			       ,A.DOC_TITLE					/* 제목*/
			       ,A.USER_ID					/* 수신자 USER_ID */
			       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
			       ,A.TARGET_DATE				/* 기준 비교일*/
			       ,DATE_FORMAT(A.TARGET_DATE , '%Y-%m-%d') AS TARGET_DATE_STR
		FROM (
				/* 참조문서 */
				SELECT  A.TYPE						/* 타입 : 미결 */
					   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				       ,A.SUBMIT_DATE				/* 상신일 */
				       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
				       ,A.NAME						/* 상신자 */
				       ,A.RANK_NM					/* 상신자 직책 */
				       ,A.DOC_TITLE					/* 제목*/
				       ,A.USER_ID					/* 수신자 USER_ID */
				       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
				       /* SMS 발송시 GROUP BY */
				       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
				  FROM (
						SELECT 'RECEIVE' AS TYPE						/* 타입 : 미결 */
								,A.APPV_DOC_ID							/* 전자결재 순번 */
								,A.SUBMIT_DATE							/* 상신일 */
								,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																						FROM BS_CODE_GV X
																					   WHERE X.ORG_ID =  A.ORG_ID
																						 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																						 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
										) AS APPV_DOC_TYPE_NM			/* 문서종류 */
								,D.NAME 								/* 상신자 */
								,(SELECT G.VALUE_MEAN_KOR
										  FROM BS_CODE_GV G
										  WHERE G.ORG_ID =  A.ORG_ID
										   AND  G.CODE_NAME = 'RANK'
										   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM	/* 상신자 직책 */
								,A.DOC_TITLE										/*제목*/
								,C.USER_ID											/* 수신자 USER_ID */
								,IFNULL((SELECT MAX(X.UPDATE_DATE)
											FROM BS_APPV_PROCESS X
										   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
											 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
										 ),A.SUBMIT_DATE) 				 AS TARGET_DATE						/* 기준 비교일 */
								,B.BASE_SETUP_PERIOD								/* 기준일수 */
						  FROM bs_appv_doc A
						  INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'RECEIVE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
						  INNER JOIN BS_APPV_CC C ON A.APPV_DOC_ID = C.APPV_DOC_ID
						  INNER JOIN BS_USER_MASTER D ON A.WRITER_ID = D.USER_ID
						  WHERE B.BASE_SETUP_TYPE = 'IMMEDIATELY'
						  	AND A.APPV_DOC_ID = #appvDocId#
							AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
							AND C.READ_DATE IS NULL
				    ) A
				    WHERE 1=1
				      /* SMS 발송시 GROUP BY */
					  GROUP BY A.USER_ID
				UNION ALL

				/* 지출문서 */
				SELECT  A.TYPE						/* 타입 : 미결 */
					   ,A.APPV_DOC_ID				/* 전자결재 순번 */
				       ,A.SUBMIT_DATE				/* 상신일 */
				       ,A.APPV_DOC_TYPE_NM			/* 문서종류 */
				       ,A.NAME						/* 상신자 */
				       ,A.RANK_NM					/* 상신자 직책 */
				       ,A.DOC_TITLE					/* 제목*/
				       ,A.USER_ID					/* 수신자 USER_ID */
				       ,A.BASE_SETUP_PERIOD			/* 기준일수 */
				       /* SMS 발송시 GROUP BY */
				       ,MAX(A.TARGET_DATE) AS TARGET_DATE /* 기준 비교일*/
				  FROM (
						SELECT 'FINANCE' AS TYPE						/* 타입 : 미결 */
								,A.APPV_DOC_ID							/* 전자결재 순번 */
								,A.SUBMIT_DATE							/* 상신일 */
								,IF(A.APPV_DOC_CLASS = 'COMPANY',A.APPV_DOC_TYPE,(SELECT X.VALUE_MEAN_KOR
																						FROM BS_CODE_GV X
																					   WHERE X.ORG_ID =  A.ORG_ID
																						 AND X.CODE_ID = (SELECT SON_CODE_ID FROM BS_CODE_GV Z WHERE Z.ORG_ID =  A.ORG_ID AND Z.CODE_NAME = 'APPV_DOC_CLASS' AND Z.CODE_VALUE = A.APPV_DOC_CLASS)
																						 AND X.CODE_VALUE = A.APPV_DOC_TYPE)
										) AS APPV_DOC_TYPE_NM			/* 문서종류 */
								,D.NAME 								/* 상신자 */
								,(SELECT G.VALUE_MEAN_KOR
										  FROM BS_CODE_GV G
										  WHERE G.ORG_ID =  A.ORG_ID
										   AND  G.CODE_NAME = 'RANK'
										   AND  G.CODE_VALUE =D.RANK)	AS RANK_NM	/* 상신자 직책 */
								,A.DOC_TITLE										/*제목*/
								,E.USER_ID											/* 수신자 USER_ID */
								,(SELECT MAX(X.UPDATE_DATE)
									FROM BS_APPV_PROCESS X
								   WHERE X.APPV_DOC_ID = A.APPV_DOC_ID
									 AND X.APPV_STATUS NOT IN ('WAIT','REQ')
								 ) 				 AS TARGET_DATE						/* 기준 비교일 */
								,B.BASE_SETUP_PERIOD								/* 기준일수 */
						  FROM bs_appv_doc A
						  INNER JOIN BS_APPV_ALARM_SETUP B ON B.APPV_ALARM_SETUP_TYPE = 'FINANCE' AND B.USE_YN = 'Y' AND A.ORG_ID = B.ORG_ID
				          INNER JOIN BS_APPV_EXPENSE_DOC C ON A.APPV_DOC_ID = C.APPV_DOC_ID AND C.EXPENSE_PAY_DAY IS NULL
						  INNER JOIN BS_APPV_EXPENSE_MANAGER_SETUP E ON A.ORG_ID = E.ORG_ID
						  INNER JOIN BS_USER_MASTER D ON A.WRITER_ID = D.USER_ID
						  WHERE B.BASE_SETUP_TYPE = 'IMMEDIATELY'
						  	AND A.APPV_DOC_ID = #appvDocId#
							AND A.DOC_STATUS IN('COMMIT','CNL_SUBMIT','CNL_REJECT','CNL_COMMIT')
				    ) A
				    WHERE 1=1
			    	/* SMS 발송시 GROUP BY */
				  	GROUP BY A.USER_ID
			 ) A
	</select>
</sqlMap>
