package ib.work.web;

import java.io.IOException;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springmodules.validation.commons.DefaultBeanValidator;

import egovframework.rte.fdl.idgnr.impl.Base64;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import ib.approve.service.ApproveService;
import ib.basic.service.CpnExcelVO;
import ib.basic.service.impl.CpnUploadExcelMapping;
import ib.basic.web.UtilReplaceTag;
import ib.business.service.BusinessService;
import ib.cmm.ComCodeVO;
import ib.cmm.FileUpDbVO;
import ib.cmm.IBsMessageSource;
import ib.cmm.service.CmmUseService;
import ib.cmm.service.CommonService;
import ib.cmm.util.sim.service.AjaxResponse;
import ib.cmm.util.sim.service.PagingAjax;
import ib.company.service.CompanyService;
import ib.company.service.CompanyVO;
import ib.login.service.StaffVO;
import ib.person.service.PersonMgmtService;
import ib.person.service.PersonVO;
import ib.project.service.ProjectMgmtService;
import ib.schedule.service.ScheduleService;
import ib.schedule.service.impl.ScheduleVO;
import ib.system.service.CalendarRegService;
import ib.work.service.WorkDailyService;
import ib.work.service.WorkMemoService;
import ib.work.service.WorkService;
import ib.work.service.WorkVO;

/**
 * <pre>
 * package  : ib.work.web
 * filename : WorkController.java
 * </pre>
 *
 * @author  : ChanWoo Lee
 * @since   : 2012. 8. 1.
 * @version : 1.0.0
 */
@Controller
public class WorkDailyController {


    @Resource(name = "workMemoService")
    WorkMemoService workMemoService;

    @Resource(name = "workDailyService")
    WorkDailyService workDailyService;

    @Resource(name = "calendarRegService")
	private CalendarRegService calendarRegService;

    @Resource(name="businessService")
    private BusinessService businessService;

    @Resource(name = "scheService")
	private ScheduleService scheService;

    @Resource(name = "projectMgmtService")
	private ProjectMgmtService projectMgmtService;

    @Resource(name="approveService")
	private ApproveService approveService;

	/** log */
    protected static final Log LOG = LogFactory.getLog(WorkDailyController.class);



	/**
	 * 개인별 업무일지 페이지
	 * @MethodName : viewPrivateWork
	 * @param request
	 * @param workVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="work/getDailyWork.do")
	public String workDairy(HttpServletRequest request,
			@RequestParam Map<String, Object> map,
			HttpSession session,
			ModelMap model) throws Exception{

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();

		//---------------------------- 프로젝트 종료예정팝업 2016.01.31 박성진 추가 ----------------------------------------
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		Map<String,Object> projectParamMap = new HashMap<String, Object>();
		projectParamMap.put("userId", baseUserLoginInfo.get("userId").toString());
		projectParamMap.put("orgId", baseUserLoginInfo.get("applyOrgId").toString());

		List<EgovMap> projectEndList = workDailyService.getProjectEndList(projectParamMap);

		//근태알립팝업 조건에 해당하는 사용자에게 팝업 보임
		if(projectEndList.size() > 0){
			model.addAttribute("projectEndPopupShow","Y");
		}else{
			model.addAttribute("projectEndPopupShow", "N");
		}

		model.addAllAttributes(map);

		return "work/workDaily";
	}

	/**
	 * 주간보고 페이지
	 * @MethodName : viewPrivateWork
	 * @param request
	 * @param workVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="work/getWeekWork.do")
	public String getWeekWork(HttpServletRequest request,
			@RequestParam Map<String, Object> map,
			HttpSession session,
			ModelMap model) throws Exception{

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();

		return "work/workWeek";
	}

	/**
	 * 메인 : 로그인 유저의 프로젝트 종료예정 팝업
	 *
	 */
	@RequestMapping(value = "/work/mainProjectEndAlarm.do")
	public String mainProjectEndAlarm(@RequestParam Map<String,Object> paramMap,
			HttpSession session, ModelMap model) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		paramMap.put("orgId", baseUserLoginInfo.get("applyOrgId").toString());
		paramMap.put("userId", baseUserLoginInfo.get("userId").toString());

		List<EgovMap> projectEndList = workDailyService.getProjectEndList(paramMap);

		model.addAttribute("projectEndList", projectEndList);

		return "work/popUp/mainProjectEndAlarm/pop";
	}


	/**
	 * 개인별 업무일지 페이지(IB to PASS)
	 * @MethodName : viewPrivateWork
	 * @param request
	 * @param workVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="work/getDailyWorkPass.do")
	public String getDailyWorkPass(HttpServletRequest request,
			@RequestParam Map<String, Object> map,
			HttpSession session,
			ModelMap model) throws Exception{


		model.addAllAttributes(map);

		return "work/workDaily/noTop";
	}


	/**
	 * 업무일지 데이터 조회

	 */
	@RequestMapping(value="/work/selectWorkDailyList.do")
	public void selectWorkDairyList(HttpServletRequest request,
			HttpSession session,HttpServletResponse response,
			@RequestParam Map<String, Object> map,
			ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("empNo", baseUserLoginInfo.get("empNo").toString());
		map.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		map.put("sessionDeptId", baseUserLoginInfo.get("deptId").toString());
		map.put("businessInfoLevel", baseUserLoginInfo.get("businessInfoLevel").toString());
		map.put("calendarType", "user");
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		HashMap<String, Object>resultMap = new HashMap<String, Object>();

		Map<String, String> newMap = new HashMap<String, String>((Map)map);		//컨버팅


		List<Map>holidayList =calendarRegService.getOnlyCalendarList(map);
		resultMap.put("holidayList", holidayList);

		List<Map>personalWorkDailyList = new ArrayList();
		List<Map>teamWorkDailyList = new ArrayList();
		List<Map>scheList = new ArrayList();
		if("WORK".equals(map.get("searchDailyTypeWork").toString()) || "MONTH".equals(map.get("searchActionType").toString())){
			//업무등록 - 개인
			personalWorkDailyList.addAll(workDailyService.getworkDailyList(map));						//업무일지 - 업무일지(당일) 개인

			//업무등록 - 팀
			map.put("team", "Y");
			teamWorkDailyList.addAll(workDailyService.getworkDailyList(map));						 	//업무일지 - 업무일지(당일) 팀

			if("MONTH".equals(map.get("searchActionType").toString())){
				teamWorkDailyList.addAll(workDailyService.getBeforeWorkDailyListByToday(map));				//미완료
			}

			//일정정보
			scheList = scheService.getScheduleWork(map);
		}
		resultMap.put("personalWorkDailyList", personalWorkDailyList);
		resultMap.put("teamWorkDailyList", teamWorkDailyList);
		resultMap.put("scheList", scheList);

		//정보공유
		Map businessOrgInfoYn = new HashMap();
		List<Map> businessDailyList = new ArrayList<Map>();
		if("SALES".equals(map.get("searchDailyTypeSales").toString()) || "MONTH".equals(map.get("searchActionType").toString())){
			businessOrgInfoYn = businessService.selectBusinessBsInfoSetupInfo(map);
			businessDailyList = businessService.selectBsInfoListForWork(map);
		}
		resultMap.put("businessOrgId", map.get("orgId"));
		resultMap.put("businessOrgInfoYn", businessOrgInfoYn);
		resultMap.put("businessDailyList", businessDailyList);

		//메모(업무보고)
		List<Map> memoListNoRead = new ArrayList();
		List<Map> memoLastUpdateList = new ArrayList();
		List<Map> memoList = new ArrayList();
		if("MEMO".equals(map.get("searchDailyTypeMemo").toString()) || "MONTH".equals(map.get("searchActionType").toString())){

			map.put("selectDate", "");

			//2017.03.16 전체메모 권한여부의 권한이 있는경우 메모 확인가능함
			String wholeMemoViewYn = "N";
			if(baseUserLoginInfo.get("wholeMemoViewYn") != null) wholeMemoViewYn = baseUserLoginInfo.get("wholeMemoViewYn").toString();

			if("Y".equals(wholeMemoViewYn)) {
				memoList = workMemoService.getRoomList(map);
			}else if(map.get("userId").toString().equals(baseUserLoginInfo.get("userId").toString())){
				memoList = workMemoService.getRoomList(map);
			}
			/*************************************************
			** 메모 마지막 생성한날도 화면에 보여줌 (2017.07.17. 이인희)
			**************************************************/
			map.put("commentType", "commentUpdateDate");
			//2017.03.16 전체메모 권한여부의 권한이 있는경우 메모 확인가능함
			if("Y".equals(wholeMemoViewYn)) {
				memoLastUpdateList = workMemoService.getRoomList(map);
			}else if(map.get("userId").toString().equals(baseUserLoginInfo.get("userId").toString())){
				memoLastUpdateList = workMemoService.getRoomList(map);
			}

			//메모(업무보고) - 미열람메모/고정메모
			if("MONTH".equals(map.get("searchActionType").toString())){
				if("Y".equals(wholeMemoViewYn) || map.get("userId").toString().equals(baseUserLoginInfo.get("userId").toString())) {
					map.put("commentType", "");
					map.put("main", "Y");  		//메인 화면 같은 데이터
					map.put("secretYn", "N");  	//조회자 본인
					map.put("selectMonth", "");	//전체 날짜 대상
					map.put("pastYn", "Y");		//이전 날짜중 읽지 않은
					memoListNoRead = workMemoService.getRoomList(map);
				}
			}

		}
		resultMap.put("memoList", memoList);
		resultMap.put("memoListNoRead", memoListNoRead);
		resultMap.put("memoLastUpdateList", memoLastUpdateList);

		//검색영역 검색인경우
		if("KEYWORD".equals(map.get("searchActionType").toString())){
			int searchStartDate = Integer.parseInt(map.get("searchStartDate").toString().substring(0,7).replace("-", ""));
			int searchEndDate = Integer.parseInt(map.get("searchEndDate").toString().substring(0,7).replace("-", ""));

			List searchMothList = new ArrayList();
			for(int i=searchStartDate;i<=searchEndDate;i++){
				String rtnMonth = i+"";
				rtnMonth = rtnMonth.substring(0,4) + "." +rtnMonth.substring(4,6);
				searchMothList.add(rtnMonth);
			}
			resultMap.put("searchMothList", searchMothList);

			resultMap.put("searchStartDate", map.get("searchStartDate").toString().replace("-", "."));
			resultMap.put("searchEndDate", map.get("searchEndDate").toString().replace("-", "."));

		}

		AjaxResponse.responseAjaxObject(response, resultMap);
	}


	/**
	 * 업무일지 등록화면
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="/work/workDailyRegPopup/pop.do")
	public String workDailyRegPopup(
			@RequestParam Map<String,Object> map,
			HttpSession session,ModelMap model) throws Exception{

		model.addAllAttributes(map);
		return "work/workDailyRegPopup/pop";
    }

	/**
	 * 업무일지 상세보기 화면(개인)
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="/work/workDailyViewPopup/pop.do")
	public String workDailyViewPopup(
			@RequestParam Map<String,Object> map,
			HttpSession session,ModelMap model) throws Exception{

		model.addAllAttributes(map);
		return "work/workDailyViewPopup/pop";
    }

	/**
	 * 업무일지 상세보기 화면(팀)
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="/work/workDailyTeamViewPopup/pop.do")
	public String workDailyTeamViewPopup(
			@RequestParam Map<String,Object> map,
			HttpSession session,ModelMap model) throws Exception{

		model.addAllAttributes(map);
		return "work/workDailyTeamViewPopup/pop";
    }

	/**
	 *
	 * dateFrom~dateTo 동안 참가자가 휴직상태라면 조회한다.
	 *
	 * @param : HttpSession
	 * @return :
	 * @exception : throws
	 * @author :  이인희
	 * @date : 2016. 11. 12.
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/work/getChkWorkPerson.do")
	public void getChkWorkPerson(
			@RequestParam Map<String,Object> map,
			HttpServletResponse response,
			HttpSession session,ModelMap model) throws Exception{

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId").toString());

		//return obj
		Map<String,Object> obj = new HashMap<String,Object>();
		obj.put("result", "SUCCESS");

		Map<String,Object> paramMap = new HashMap<String,Object>();
		Map<String,String> msgMap = new HashMap<String,String>();

		if(!map.get("teamList").toString().equals("")){  // 팀업무
			List<String> userList = new ArrayList<String>();
			String [] teamList =  (map.get("teamList").toString()).split(",");
			for(int i=0;i<teamList.length;i++){
				userList.add(teamList[i]);
			}
			paramMap.put("userList", userList);
			msgMap = null;
			paramMap.put("dateFrom", map.get("workDate"));
			paramMap.put("dateTo", map.get("workDate"));
		}else{  //개인업무
			paramMap.put("userId", map.get("userId"));
			msgMap.put(map.get("userId").toString(), "개인업무 진행자");
			msgMap.put("workDatePeriod", map.get("workDatePeriod").toString());

			paramMap.put("dateFrom", map.get("workDateStart"));
			paramMap.put("dateTo", map.get("workDateEnd"));
		}

		obj=approveService.getChkAppointedPerson(paramMap,msgMap);

		AjaxResponse.responseAjaxObject(response, obj);		//"SUCCESS" 전달
	}

	/**
	 * 업무일지 등록 및 수정
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/saveWorkDaily.do")
	public void saveWorkDaily(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());
		map.put("orgId", loginUser.get("applyOrgId").toString());

		int listId=workDailyService.saveWorkDaily(map);

		AjaxResponse.responseAjaxSave(response, listId);
    }

	/**
	 * 업무일지 완료처리
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/endWorkDaily.do")
	public void endWorkDaily(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());

		workDailyService.endWorkDaily(map);

		AjaxResponse.responseAjaxSave(response, 1);
    }

	/**
	 * 업무일지 삭제
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/deleteWorkDaily.do")
	public void deleteWorkDaily(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());

		workDailyService.deleteWorkDaily(map);

		AjaxResponse.responseAjaxSave(response, 1);
    }

	/**
	 * 업무일지 조회
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/getWorkDaily.do")
	public void getWorkDaily(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{


		List<Map> workList = workDailyService.getWorkDaily(map);
		List<Map> memoList = workDailyService.getWorkMemoList(map);
		List<Map> workReaderList = workDailyService.getWorkReaderList(map);

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("workList", workList);
		resultMap.put("memoList", memoList);
		resultMap.put("workReaderList", workReaderList);

		//AjaxResponse.responseAjaxSelect(response, workDailyService.getWorkDaily(map));
		AjaxResponse.responseAjaxObject(response, resultMap);
    }

	/**
	 * 업무일지 팀원 조희
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/getWorkDailyTeam.do")
	public void getWorkDailyTeam(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		List<Map> workList = workDailyService.getWorkDailyTeam(map);
		List<Map> memoList = workDailyService.getTeamWorkMemoList(map);

		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("workList", workList);
		resultMap.put("memoList", memoList);

		//AjaxResponse.responseAjaxSelect(response, resultMap);
		AjaxResponse.responseAjaxObject(response, resultMap);
    }

	/**
	 * 업무일지(팀 메모 추가 및 진행상태 변경)
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/updateTeamMemo.do")
	public void updateTeamMemo(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());
		int chk;
		if("MEMO".equals(map.get("type").toString())){
			chk=workDailyService.insertTeamWorkMemo(map);
		}else{
			chk=workDailyService.updateTeamMemo(map);
		}

		AjaxResponse.responseAjaxSave(response, chk);
    }

	/**
	 * 업무일지(리더 메모 추가 및 진행상태 변경)
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/updateLeaderMemo.do")
	public void updateLeaderMemo(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());
		//int chk=workDailyService.updateLeaderMemo(map);
		int chk=workDailyService.insertWorkMemo(map);

		AjaxResponse.responseAjaxSave(response, chk);
    }


	/**
	 * 일정 상태 변경 처리
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/updateScheduleStts.do")
	public void updateScheduleStts(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("empNo", loginUser.get("empNo").toString());

		workDailyService.updateScheduleStts(map);

		AjaxResponse.responseAjaxSave(response, 1);
    }


	/**
	 * 업무일지 메인 리스트
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/workDailyListByMain.do")
	public void workDailyListByMain(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map resultMap = new HashMap();

		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId").toString());
		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		map.put("empNo", baseUserLoginInfo.get("empNo").toString());

		map.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());
		map.put("searchActionType", "MONTH");
		map.put("secretYn", map.get("secretYn"));  //조회자 본인

		//개인
		List<Map>workDailyList = new ArrayList();
		map.put("teamYn", 'N');
		workDailyList.addAll(workDailyService.workDailyListByMain(map));
		resultMap.put("workDailyList", workDailyList);

		//팀 - 오늘 + 미완료
		List<Map>teamWorkDailyList = new ArrayList();
		map.put("teamYn", 'Y');
		teamWorkDailyList.addAll(workDailyService.workDailyListByMain(map));

		//개인조회인경우만 업무일지(미완료) 조회
		if("Y".equals(map.get("secretYn"))) {
			map.put("mainYn", "Y");
			map.put("team", "A");
			teamWorkDailyList.addAll(workDailyService.getBeforeWorkDailyListByToday(map));  //업무일지 - 업무일지(미완료)
		}

		resultMap.put("teamWorkDailyList", teamWorkDailyList);

		List<Map>scheDuleDailyList = new ArrayList();
		scheDuleDailyList = scheService.getScheduleWork(map);
		resultMap.put("scheDuleDailyList", scheDuleDailyList);
		AjaxResponse.responseAjaxObject(response, resultMap);
    }
/*
	*//**
	 * 업무일지 메인 리스트 (일정)
	 * @param
	 * @return
	 * @exception Exception
	 *//*
	@RequestMapping(value="work/scheduleListByMain.do")
	public void scheduleListByMain(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map loginUser = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());
		map.put("empNo", loginUser.get("empNo").toString());
		map.put("orgId", loginUser.get("orgId").toString());

		AjaxResponse.responseAjaxSelect(response, scheService.getScheduleWork(map));
    }*/

	/**
	 * 업무일지 메인 업무보고(메모) 리스트
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/memoListByMain.do")
	public void memoListByMain(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId").toString());
		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());
		map.put("searchActionType", "MONTH");
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		//업무일지 - 메모
		map.put("secretYn", map.get("secretYn"));  //조회자 본인
		List<Map> memoList = workMemoService.getRoomList(map);

		AjaxResponse.responseAjaxSelect(response, memoList);
    }


    /**
	 * 업무일지 참여자 선택 팝업
	 *
	* @param :
	 * @return :
	 * @exception :
	 * @author : 이인희
	 * @date : 2017. 01. 31.
	 */
	@RequestMapping(value = "/work/projectUserListPopup.do")
	public String activityUserListPopup(@RequestParam Map<String,Object> paramMap
			,Model model
			,HttpServletResponse response
			,HttpSession session) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		//activity
		List<Map> activityUserList = projectMgmtService.getProjectUserList(paramMap);
		model.addAttribute("activityUserList", activityUserList);
		model.addAttribute("userStr", paramMap.get("userStr").toString());
		model.addAttribute("disabledStr", paramMap.get("disabledStr").toString());

		return "work/projectUserListPopup/pop";
	}

	/**
	 * 업무일지 프로젝트 참여자 목록
	 *
	* @param :
	 * @return :
	 * @exception :
	 * @author : 이인희
	 * @date : 2017. 01. 31.
	 */
	@RequestMapping(value = "/work/getProjectUserList.do")
	public void getProjectUserList(@RequestParam Map<String,Object> paramMap
			,Model model
			,HttpServletResponse response
			,HttpSession session) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		//activity
		List<Map> projectUserList = projectMgmtService.getProjectUserList(paramMap);
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("projectUserList", projectUserList);

		AjaxResponse.responseAjaxObject(response, resultMap);

	}
	/**
	 * 개인업무 이동/복사
	 * @param
	 * @return
	 * @exception Exception
	 */
	@RequestMapping(value="work/processWorkDaily.do")
	public void processWorkDaily(
		@RequestParam Map<String,Object> map,
		HttpServletResponse response,
		HttpSession session,ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");

		map.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		map.put("userId", baseUserLoginInfo.get("userId").toString());

		Map result=workDailyService.processWorkDaily(map);

		AjaxResponse.responseAjaxObject(response, result);
    }

	//////////////////////////주간 보고 메뉴 추가(17.08.28)/////////////////////////////////////////////
	/**
	 * 업무일지 데이터 조회

	 */
	@RequestMapping(value="/work/selectWorkWeekList.do")
	public String selectWorkWeekList(HttpServletRequest request,
			HttpSession session,HttpServletResponse response,
			@RequestParam Map<String, Object> map,
			ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		//선택한 유저의 기본 정보를 조회한다
		List<EgovMap> workWeekSelectUserList = workDailyService.getWorkWeekSelectUserList(map);

		model.addAttribute("workWeekSelectUserList", workWeekSelectUserList);


		Calendar cal = Calendar.getInstance();

		if(cal.get(Calendar.MONTH)!= Integer.parseInt(map.get("mm").toString())-1){
			cal.set(Calendar.WEEK_OF_MONTH,2);
			if(cal.get(Calendar.MONTH)== Integer.parseInt(map.get("mm").toString())-1){
				cal.set(Calendar.WEEK_OF_MONTH,3);
			}
		}
		cal.set(Calendar.YEAR, Integer.parseInt(map.get("calYear").toString()));
		cal.set(Calendar.MONTH, Integer.parseInt(map.get("mm").toString())-1);

		cal.add(Calendar.DATE, -1);

		Integer weekNum = cal.get(Calendar.WEEK_OF_YEAR);

		Integer year = cal.get(Calendar.YEAR);

		map.put("weekNum", weekNum);
		map.put("year", year);

		// 조회한 주차의 시작일(월)~(금) 구하기
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		Calendar searchDateBuf = Calendar.getInstance();
		searchDateBuf.set(Calendar.YEAR, year);
		searchDateBuf.set(Calendar.WEEK_OF_YEAR, weekNum);


		// 월요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

		String startStr = sdf.format(searchDateBuf.getTime());

		map.put("startStr", startStr);

		// 화요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.TUESDAY);

		String tuesStr = sdf.format(searchDateBuf.getTime());

		model.addAttribute("tuesStr", tuesStr);
		// 수요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.WEDNESDAY);

		String wedneStr = sdf.format(searchDateBuf.getTime());

		model.addAttribute("wedneStr", wedneStr);

		// 목요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);

		String thursStr = sdf.format(searchDateBuf.getTime());

		model.addAttribute("thursStr", thursStr);

		// 금요일
		searchDateBuf.set(Calendar.WEEK_OF_YEAR, weekNum);
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);

		String endStr = sdf.format(searchDateBuf.getTime());
		map.put("endStr", endStr);


		model.addAttribute("startStr", startStr);
		model.addAttribute("endStr", endStr);
		model.addAttribute("weekNum", weekNum);

		return "work/include/workWeek_contents_INC/inc";
	}


	/**
	 * 업무일지 데이터 조회

	 */
	@RequestMapping(value="/work/selectWorkWeekListAjax.do")
	public String selectWorkWeekListAjax(HttpServletRequest request,
			HttpSession session,HttpServletResponse response,
			@RequestParam Map<String, Object> map,
			ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		//선택한 유저의 기본 정보를 조회한다
		List<EgovMap> workWeekSelectUserList = workDailyService.getWorkWeekSelectUserList(map);

		model.addAttribute("workWeekSelectUserList", workWeekSelectUserList);

		String weekType = map.get("type").toString();

		Integer weekNum = Integer.parseInt(map.get("weekNum").toString());
		Integer year = Integer.parseInt(map.get("year").toString());

		// 이전주차 조회
		if (weekType.equals("prev")) {

			weekNum--;

			// 첫번째주라면 작년 마지막 일의 주차를 조회한다
			if (weekNum < 1) {

				year = year - 1;

				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

				Calendar cal = Calendar.getInstance(Locale.KOREA);

				cal.set(Calendar.YEAR, year);

				weekNum = cal.getWeeksInWeekYear();

			}
			// 다음 주차조회
		} else if (weekType.equals("next")) {
			weekNum++;

			Calendar cal = Calendar.getInstance(Locale.KOREA);

			Integer lastWeekNum = cal.getWeeksInWeekYear();

			if (weekNum > lastWeekNum) {
				year = year + 1;
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date firstDay = sdf.parse(year + "-01-01");

				cal.setTime(firstDay);

				weekNum = cal.get(Calendar.WEEK_OF_YEAR);
			}
		}

		map.put("weekNum", weekNum);
		map.put("year", year);

		// 조회한 주차의 시작일(월)~(금) 구하기
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		Calendar searchDateBuf = Calendar.getInstance();
		searchDateBuf.set(Calendar.YEAR, year);
		searchDateBuf.set(Calendar.WEEK_OF_YEAR, weekNum);


		// 월요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);

		String startStr = sdf.format(searchDateBuf.getTime());

		map.put("startStr", startStr);

		// 화요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.TUESDAY);

		String tuesStr = sdf.format(searchDateBuf.getTime());

		model.addAttribute("tuesStr", tuesStr);
		// 수요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.WEDNESDAY);

		String wedneStr = sdf.format(searchDateBuf.getTime());

		model.addAttribute("wedneStr", wedneStr);

		// 목요일
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);

		String thursStr = sdf.format(searchDateBuf.getTime());

		model.addAttribute("thursStr", thursStr);

		// 금요일
		searchDateBuf.set(Calendar.WEEK_OF_YEAR, weekNum);
		searchDateBuf.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);

		String endStr = sdf.format(searchDateBuf.getTime());
		map.put("endStr", endStr);


		model.addAttribute("startStr", startStr);
		model.addAttribute("endStr", endStr);
		model.addAttribute("weekNum", weekNum);

		return "work/include/workWeek_contents_INC/inc";
	}

	/**
	 * 업무일지 데이터 조회

	 */
	@RequestMapping(value="/work/selectWorkWeekMainList.do")
	public void selectWorkWeekMainList(HttpServletRequest request,
			HttpSession session,HttpServletResponse response,
			@RequestParam Map<String, Object> map,
			ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("empNo", baseUserLoginInfo.get("empNo").toString());
		map.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		map.put("sessionDeptId", baseUserLoginInfo.get("deptId").toString());
		map.put("businessInfoLevel", baseUserLoginInfo.get("businessInfoLevel").toString());
		map.put("calendarType", "user");
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		String userIdStr = map.get("userIdStr").toString();

    	String[] userList = userIdStr.split(",");

    	map.put("userList", userList);

		HashMap<String, Object>resultMap = new HashMap<String, Object>();

		Map<String, String> newMap = new HashMap<String, String>((Map)map);		//컨버팅

		List<Map>personalWorkDailyList = new ArrayList();
		List<Map>teamWorkDailyList = new ArrayList();
		List<Map>scheList = new ArrayList();

		//업무등록 - 개인
		personalWorkDailyList.addAll(workDailyService.getworkDailyList(map));						//업무일지 - 업무일지(당일) 개인

		//업무등록 - 팀
		map.put("team", "Y");
		teamWorkDailyList.addAll(workDailyService.getworkDailyList(map));						 	//업무일지 - 업무일지(당일) 팀

		teamWorkDailyList.addAll(workDailyService.getBeforeWorkDailyListByToday(map));				//미완료

		//일정정보
		scheList = scheService.getScheduleWork(map);

		resultMap.put("personalWorkDailyList", personalWorkDailyList);
		resultMap.put("teamWorkDailyList", teamWorkDailyList);
		resultMap.put("scheList", scheList);

		//주차별 비고
		List<Map> workWeekNoteList = workDailyService.getWorkWeekNoteList(map);
		resultMap.put("workWeekNoteList", workWeekNoteList);

		//정보공유
		Map businessOrgInfoYn = new HashMap();

		Map<String,Object> businessSearchMap = new HashMap<String, Object>();

		businessSearchMap.put("treeOrg", map.get("orgId"));
		businessSearchMap.put("orgId", map.get("treeOrg"));

		List<Map> businessDailyList = new ArrayList<Map>();

		businessOrgInfoYn = businessService.selectBusinessBsInfoSetupInfo(businessSearchMap);

		map.put("weekWorkYn", "Y");
		//map.put("treeOrg", map.get("orgId"));
		businessDailyList = businessService.selectBsInfoListForWork(map);

		resultMap.put("businessOrgId", map.get("orgId"));
		resultMap.put("businessOrgInfoYn", businessOrgInfoYn);
		resultMap.put("businessDailyList", businessDailyList);

		AjaxResponse.responseAjaxObject(response, resultMap);
	}

	/**
	 * 주간보고 비고 등록/수정

	 */
	@RequestMapping(value="/work/processWorkWeekNoteAjax.do")
	public void processWorkWeekNoteAjax(HttpServletRequest request,
			HttpSession session,HttpServletResponse response,
			@RequestParam Map<String, Object> map,
			ModelMap model) throws Exception{

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("sessionUserId", baseUserLoginInfo.get("userId").toString());
		map.put("applyOrgId",baseUserLoginInfo.get("applyOrgId"));

		HashMap<String, Object>resultMap = new HashMap<String, Object>();

		Integer cnt = workDailyService.processWorkWeekNote(map);

		AjaxResponse.responseAjaxObject(response, resultMap);
	}
}