package ib.board.web;



import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springmodules.validation.commons.DefaultBeanValidator;

import egovframework.rte.psl.dataaccess.util.EgovMap;
import ib.board.service.BoardService;
import ib.cmm.util.sim.service.AjaxResponse;
import ib.personnel.service.ManagementService;
import ib.schedule.service.FormDocService;
import ib.schedule.service.ScheduleService;

@Controller
public class BoardController {

	@Resource(name = "boardService")
	private BoardService boardService;

	@Resource(name = "formService")
	private FormDocService formService;

	@Resource(name = "scheService")
	private ScheduleService scheService;

	@Resource(name = "beanValidator")
	protected DefaultBeanValidator beanValidator;

	 @Resource(name = "managementService")
    private ManagementService managementService;

	//protected static final Log LOG = LogFactory.getLog(BoardController.class);


	/*==============================게시판 신규 구현===========================*/

	// 게시판 메인
	@RequestMapping(value = "board/boardList/{groupUid}/{cboardUid}.do")
	public String boardMain(
			@PathVariable String groupUid,
			@PathVariable String cboardUid,
			Model model) throws Exception {

		model.addAttribute("groupUid", groupUid);
		model.addAttribute("cboardUid", cboardUid);
		return "board/boardList";
	}

	// 게시판 글 리스트
	@RequestMapping(value = "/board/getBoardContentList.do")
	public void getBoardContentList(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("boardInfoLevel", baseUserLoginInfo.get("boardInfoLevel"));
		map.put("userId", baseUserLoginInfo.get("userId"));
		map.put("orgId", baseUserLoginInfo.get("applyOrgId"));

		map.put("newContentMarkClass", "BOARD");
		map.put("useYn", "Y");

		if(baseUserLoginInfo.get("vipAuthYn").toString().equals("Y")) map.put("isAuth", "Y");

		//조회 후 사용하는 조건이 있을때 Y로 바꾼다.
		map.put("ruleUseYn", "N");

		List<EgovMap> markRuleList = managementService.markRuleListList(map);

		String readTimeYn = "N";

		if(markRuleList != null&&markRuleList.size()==1){

			EgovMap ruleMap = markRuleList.get(0);
			map.put("ruleUseYn", "Y");
			map.put("readTimeYn", ruleMap.get("readTimeYn"));
			map.put("markDayCnt", ruleMap.get("markDayCnt"));

			readTimeYn = ruleMap.get("readTimeYn").toString();
		}


		Map<String,Object> resultMap = boardService.getBoardContentList(map);

		resultMap.put("readTimeYn", readTimeYn);

		AjaxResponse.responseAjaxObject(response, resultMap);	//결과전송
	}

	// 게시판 조회수 올리기
	@RequestMapping(value = "/board/boardViewCount.do")
	public void boardViewCount(
			@RequestParam Map<String,Object>map,
			HttpServletResponse response,Model model) throws Exception {

		//조회수 올리기
		int chk =boardService.updateViewCount(map);
		AjaxResponse.responseAjaxSave(response, chk);

	}


	// 게시판 글 보기
	@RequestMapping(value = "board/boardContentView/{groupUid}/{cboardUid}.do")
	public String boardContentView(
			@PathVariable String groupUid,
			@PathVariable String cboardUid,
			@RequestParam Map<String,Object>map,
			Model model) throws Exception {

		if(map.get("cboardId") == null || map.get("contentId") == null){
			throw new Exception();
		}

		model.addAttribute("cboardId", map.get("cboardId"));
		model.addAttribute("contentId",map.get("contentId"));
		model.addAttribute("groupUid", groupUid);
		model.addAttribute("cboardUid",cboardUid);
		return "board/boardView";
	}

	// 게시판 글 정보
	@RequestMapping(value = "/board/getBoardContent.do")
	public void getBoardContent(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map resultMap = new HashMap();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("userId", baseUserLoginInfo.get("userId"));

		resultMap.put("boardInfo",boardService.getBoardContent(map));
		resultMap.put("boardOpenOrgInfo",boardService.getBoardContentOpenOrg(map));


		AjaxResponse.responseAjaxObject(response, resultMap);	//결과전송
	}

	 /**
	 * 게시판 공개 관계사
	 * @MethodName :
	 * @author		: sjy
	 * @throws Exception
	 * @date		: 2017. 11. 21.
	 */
	@RequestMapping(value = "/board/getBoardContentOpenOrg.do")
	public void getBoardContentOpenOrg(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		AjaxResponse.responseAjaxSelect(response, boardService.getBoardContentOpenOrg(map));	//결과전송
	}

	 /**
	 * 승인 반송
	 * @MethodName :
	 * @author		: sjy
	 * @throws Exception
	 * @date		: 2017. 11. 23.
	 */
	@RequestMapping(value = "/board/saveApprove.do")
	public void saveApprove(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId"));
		boardService.saveApprove(map);

		AjaxResponse.responseAjaxSave(response, 1);	//결과전송
	}

	 /**
	 * 공개기간수정
	 * @MethodName :
	 * @author		: sjy
	 * @throws Exception
	 * @date		: 2017. 11. 24.
	 */
	@RequestMapping(value = "/board/editOpenPeriodPop/pop.do")
	public String editOpenPeriod(
			@RequestParam Map<String,Object>map,
			Model model) throws Exception {


		model.addAllAttributes(map);
		return "board/pop/editOpenPeriodPop/pop";
	}

	 /**
	 * 공개기간 수정
	 * @MethodName :
	 * @author		: sjy
	 * @throws Exception
	 * @date		: 2017. 11. 24.
	 */
	@RequestMapping(value = "/board/editOpenPeriod.do")
	public void editOpenPeriod(
			HttpSession session,HttpServletResponse response,
			@RequestParam Map<String,Object>map,
			Model model) throws Exception {


		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId"));
		boardService.editOpenPeriod(map);

		AjaxResponse.responseAjaxSave(response, 1);	//결과전송
	}

	// 게시판 글 쓰기 팝업
	@RequestMapping(value = "board/boardContentWrite/{groupUid}/{cboardUid}.do")
	public String boardContentWrite(
			@PathVariable String groupUid,
			@PathVariable String cboardUid,
			@RequestParam Map<String,Object>map,
			Model model) throws Exception {

		model.addAttribute("cboardId", map.get("cboardId"));
		model.addAttribute("contentId",map.get("contentId"));
		model.addAttribute("groupUid", groupUid);
		model.addAttribute("cboardUid",cboardUid);
		return "board/boardWrite";
	}

	// 게시판 글 등록 및 수정
	@RequestMapping(value = "/board/saveBoardContent.do")
	public void saveBoardContent(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("usrSeq", baseUserLoginInfo.get("userId"));
		map.put("userId", baseUserLoginInfo.get("userId"));
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId"));

		if(map.get("infoLevel").toString().equals("")) map.put("infoLevel", null);

		int chk = boardService.saveBoardContent(map);
		AjaxResponse.responseAjaxSave(response, chk);
	}

	// 게시판 글 삭제
	@RequestMapping(value = "/board/deleteContent.do")
	public void deleteContent(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("usrSeq", baseUserLoginInfo.get("userId"));

		int chk = boardService.deleteContent(map);
		AjaxResponse.responseAjaxSave(response, chk);
	}

	// 게시판 댓글 등록 및 수정
	@RequestMapping(value = "/board/saveBoardComment.do")
	public void saveBoardComment(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("usrSeq", baseUserLoginInfo.get("userId"));

		int chk = boardService.saveBoardComment(map);
		AjaxResponse.responseAjaxSave(response, chk);
	}


	// 게시판 글 이전 및 다음글 정보
	@RequestMapping(value = "/board/getBoardContentPrevNext.do")
	public void getBoardContentPrevNext(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("orgId", baseUserLoginInfo.get("applyOrgId"));

		Map<String,Object> resultMap = boardService.getBoardContentPrevNext(map);
		AjaxResponse.responseAjaxObject(response, resultMap);	//결과전송
	}

	// 게시판의 댓글목록 가져오기
	@RequestMapping(value = "/board/getBoardCommentList.do")
	public void getCommentList(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model,
			@RequestParam Map<String,Object> map) throws Exception {

		List<Map> list = boardService.getBoardCommentList(map);
		AjaxResponse.responseAjaxSelect(response, list);
	}

	// 게시판 관리 그룹 리스트
	@RequestMapping(value = "/board/getBoardGroupList.do")
	public void getboardGroupList(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map<String,Object> resultMap = boardService.getBoardGroupList(map);
		AjaxResponse.responseAjaxObject(response, resultMap);	//결과전송
	}

	// 게시판 관리 메인
	@RequestMapping(value = "/board/boardMgmt.do")
	public String boardMgmt(Model model) throws Exception {

		return "board/boardMgmt";
	}

	/**
	 * 기본형 프로그램관리 (프로그램 관리)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: sjy
	 * @date		: 2017. 11. 21.
	 */
	@RequestMapping(value = "/board/boardMgmtAjax.do")
	public String boardMgmtAjax(Model model, HttpSession session) throws Exception {

		return "board/include/boardMgmt_INC/inc";
	}

	/**
	 * 승인자 설정
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: sjy
	 * @date		: 2017. 11. 21.
	 */

	@RequestMapping(value = "/board/boardOrgSetup.do")
	public String boardOrgSetup(Model model) throws Exception {

		return "board/boardOrgSetup";
	}

	/**
	 * 승인자 설정(ajax)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: sjy
	 * @date		: 2017. 11. 21.
	 */
	@RequestMapping(value = "/board/boardOrgSetupAjax.do")
	public String boardOrgSetupAjax(Model model, HttpSession session) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");

		Map map = new HashMap();
		map.put("approveYn", "Y");
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId"));

		model.addAttribute("cateList", boardService.getBoardCateList(map));

		return "board/include/boardOrgSetup_INC/inc";
	}


	/**
	 * 승인자 저장(ajax)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: sjy
	 * @date		: 2017. 11. 21.
	 */
	@RequestMapping(value = "/board/doSaveOrgSetup.do")
	public String doSaveOrgSetup(@RequestParam Map<String,Object>map,
			Model model, HttpSession session) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");


		map.put("userId", baseUserLoginInfo.get("userId"));
		map.put("orgId", baseUserLoginInfo.get("applyOrgId"));

		int cnt = boardService.doSaveOrgSetup(map);

		return "board/include/boardOrgSetup_INC/inc";
	}




	// 게시판 관리 그룹 안에 카테고리 리스트( 및 상세정보)
	@RequestMapping(value = "/board/getBoardCateList.do")
	public void getBoardCateList(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		List<Map> resultList = boardService.getBoardCateList(map);
		AjaxResponse.responseAjaxSelect(response, resultList);	//결과전송
	}

	// 게시판 관리 그룹  등록 팝업창
	@RequestMapping(value = "/board/boardGroupView/pop.do")
	public String boardGroupView(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		model.addAttribute("groupId", map.get("groupId"));			//그룹 아이디
		return "board/boardGroupPopup/pop";
	}

	// 게시판 관리 그룹 안에 카테고리 등록 팝업창
	@RequestMapping(value = "/board/boardCateView/pop.do")
	public String boardCateView(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		model.addAttribute("cboardId", map.get("cboardId"));		//수정일경우 아이디
		model.addAttribute("groupId", map.get("groupId"));			//그룹 아이디
		return "board/boardCatePopup/pop";
	}

	// 그룹 등록 및 수정
	@RequestMapping(value = "/board/saveBoardGroup.do")
	public void saveBoardGroup(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map<String,Object>result = new HashMap();
		int groupId = Integer.parseInt(map.get("groupId").toString());
		int chk =0;
		String saveChk="0";
		if(groupId == 0){		//신규 등록일때는 아이디 중복 체크
			chk = boardService.countChkGroupUid(map);
		}
		if(chk == 0){
			saveChk=boardService.saveBoardGroup(map);
		}
		result.put("chk", chk);
		result.put("saveChk", saveChk);
		AjaxResponse.responseAjaxObject(response, result);

	}

	// 게시판 카테고리 등록 및 수정
	@RequestMapping(value = "/board/saveBoardCate.do")
	public void saveBoardCate(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("usrId", baseUserLoginInfo.get("loginId"));

		Map<String,Object>result = new HashMap();
		int cboardId = Integer.parseInt(map.get("cboardId").toString());
		int chk =0;
		String saveChk="0";
		if(cboardId == 0){		//신규 등록일때는 아이디 중복 체크
			chk = boardService.countChkCboardUid(map);
		}
		if(chk == 0){
			saveChk=boardService.saveBoardCate(map);
		}
		result.put("chk", chk);
		result.put("saveChk", saveChk);
		AjaxResponse.responseAjaxObject(response, result);

	}

	// 게시판 댓글 삭제
	@RequestMapping(value = "/board/deleteBoardComment.do")
	public void deleteBoardComment(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("usrSeq", baseUserLoginInfo.get("userId"));

		int chk = boardService.deleteComment(map);
		AjaxResponse.responseAjaxSave(response, chk);
	}


	//메인 화면 - 공지게시판 반환
	@RequestMapping(value = "/basic/board/getBoard1List.do")
	public void getBoard1List(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel"));
		map.put("deptId", baseUserLoginInfo.get("deptId"));
		map.put("userId", baseUserLoginInfo.get("userId"));
		map.put("orgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("newContentMarkClass", "BOARD");
		map.put("useYn", "Y");
		map.put("vipAuthYn", baseUserLoginInfo.get("vipAuthYn").toString());

		//조회 후 사용하는 조건이 있을때 Y로 바꾼다.
		map.put("ruleUseYn", "N");

		List<EgovMap> markRuleList = managementService.markRuleListList(map);

		if(markRuleList != null&&markRuleList.size()==1){

			EgovMap ruleMap = markRuleList.get(0);
			map.put("ruleUseYn", "Y");
			map.put("readTimeYn", ruleMap.get("readTimeYn"));
			map.put("markDayCnt", ruleMap.get("markDayCnt"));
		}

		List<Map> list =  boardService.getBoard1List(map);
		AjaxResponse.responseAjaxSelect(response, list);
	}

	//메인 화면 - 업무게시판 반환
	@RequestMapping(value = "/basic/board/getBoard2List.do")
	public void getBoard2List(HttpSession session,
		@RequestParam Map<String,Object>map, Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("userId", baseUserLoginInfo.get("userId"));
		map.put("boardInfoLevel", baseUserLoginInfo.get("boardInfoLevel"));
		map.put("orgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("newContentMarkClass", "BOARD");
		map.put("useYn", "Y");

		//조회 후 사용하는 조건이 있을때 Y로 바꾼다.
		map.put("ruleUseYn", "N");

		List<EgovMap> markRuleList = managementService.markRuleListList(map);

		if(markRuleList != null&&markRuleList.size()==1){

			EgovMap ruleMap = markRuleList.get(0);
			map.put("ruleUseYn", "Y");
			map.put("readTimeYn", ruleMap.get("readTimeYn"));
			map.put("markDayCnt", ruleMap.get("markDayCnt"));
		}

		List<Map> list =  boardService.getBoard2List(map);
		AjaxResponse.responseAjaxSelect(response, list);
	}

	// 메인 화면 - 사내 게시판
	@RequestMapping(value = "/basic/board/getBoard3List.do")
	public void getBoard3List(HttpSession session,
			@RequestParam Map<String, Object> map, Model model,
			HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");
		map.put("applyOrgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("orgId", baseUserLoginInfo.get("applyOrgId"));
		map.put("newContentMarkClass", "BOARD");
		map.put("useYn", "Y");

		//조회 후 사용하는 조건이 있을때 Y로 바꾼다.
		map.put("ruleUseYn", "N");

		List<EgovMap> markRuleList = managementService.markRuleListList(map);

		if(markRuleList != null&&markRuleList.size()==1){

			EgovMap ruleMap = markRuleList.get(0);
			map.put("ruleUseYn", "Y");
			map.put("readTimeYn", ruleMap.get("readTimeYn"));
			map.put("markDayCnt", ruleMap.get("markDayCnt"));
		}

		List<Map> list = boardService.getBoard3List(map);
		AjaxResponse.responseAjaxSelect(response, list);
	}

	//게시글 읽음 처리(리스트)
	@RequestMapping(value = "/board/processReadContentList.do")
	public void processReadContentList(HttpSession session,
		@RequestParam Map<String,Object>map,
		Model model,HttpServletResponse response) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId").toString());
		map.put("orgId", baseUserLoginInfo.get("applyOrgId").toString());

		Map<String,Object> result = new HashMap();
		int upCnt=0;

		//System.out.println(map.get("chkContentId"));
		upCnt=boardService.updateReadUserIdList(map);

		result.put("upCnt", upCnt);
		AjaxResponse.responseAjaxObject(response, result);

	}



}