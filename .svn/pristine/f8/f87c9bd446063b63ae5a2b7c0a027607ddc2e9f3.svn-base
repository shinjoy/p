package ib.project.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;

import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import ib.approve.service.ApproveService;
import ib.cmm.util.sim.service.AjaxResponse;
import ib.cmm.util.sim.service.LogUtil;
import ib.project.service.ProjectMgmtService;


/**
 * <pre>
 * package	: ibiss.project.web
 * filename	: ProjectMgmtController.java
 * </pre>
 *
 *
 *
 * @author	: oys
 * @date	: 2015. 10. 16.
 * @version :
 *
 */
@Controller
public class ProjectMgmtController {

	@Resource(name = "projectMgmtService")
	private ProjectMgmtService projectMgmtService;

	@Resource(name="approveService")
	private ApproveService approveService;


	protected static final Log logger = LogFactory.getLog(ProjectMgmtController.class);


	/**
	 * 프로젝트 목록 페이지
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 20.
	 */
	@RequestMapping(value = "/project/projectMgmt.do")
	public String projectMgmt(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model, @RequestParam Map<String,Object> map) throws Exception {

		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.

		return "project/projectMgmt";
	}



	/**
	 * 템플릿 프로젝트 리스트 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 20.
	 */
	@RequestMapping(value = "/project/getProjectList.do")
	public void getProjectList(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,String> map) throws Exception {

		Map baseUserLoginInfo = (HashMap)session.getAttribute("baseUserLoginInfo");
		map.put("orgId", baseUserLoginInfo.get("applyOrgId").toString());				//ORG_ID
		map.put("userId", baseUserLoginInfo.get("userId").toString());				//userId
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		Map<String,Object> resultMap;

		resultMap = projectMgmtService.getProjectList((Map)map);

		AjaxResponse.responseAjaxSelectForPage(response, resultMap);	//결과전송

	}


	/**
	 * 프로젝트 등록 페이지
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 20.
	 */
	@RequestMapping(value = "/project/projectReg.do")
	public String projectReg(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.
		return "project/projectReg";
	}




	/**
	 * 프로젝트 등록 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 10. 22.
	 */
	@RequestMapping(value = "/project/doSaveProject.do")
	public void doSaveProject(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("userSeq", loginUser.get("userId").toString());		//user_id(sequence)

		LogUtil.printMap(map);	//map console log

		String jsonStr = (String)map.get("aList");
		Gson gson = new Gson();
		ArrayList<Map> actList = null;
		actList = gson.fromJson(jsonStr, java.util.ArrayList.class);

		//activity 들중 dummy 데이터 삭제
		for(int i=actList.size()-1; i>=0; i--){
			//logger.debug("###############" + actList.get(i).get("name") + ":::::" + actList.get(i).get("sort"));

			if(actList.get(i).get("activityId")!=null) {
				actList.get(i).put("activityId", (int)Double.parseDouble((actList.get(i).get("activityId").toString())));		//화면에서 넘어올때, 숫자가 gson에 의해 소숫점으로 변환되는것을 정수화
			}
			actList.get(i).put("level", (int)Double.parseDouble((actList.get(i).get("level").toString())));		//화면에서 넘어올때, 숫자가 gson에 의해 소숫점으로 변환되는것을 정수화

			if("".equals(actList.get(i).get("name").toString().trim())){
				actList.remove(i);
			}else {
				actList.get(i).put("projectId",	map.get("projectId"));		//프로젝트id	추가
				actList.get(i).put("userSeq", 	loginUser.get("userId").toString()); 	//수정자id	추가
			}
		}


		int upCnt = 1;								//성공 '1'(임시값)

		map.put("aList", actList);					//json string 을 ArrayList 로 바꿔 전달한다.

		String mode = map.get("mode").toString();	//'new' or 'update'

		if("update".equals(mode)){					//수정저장

			projectMgmtService.updateProject(map);

			upCnt = Integer.parseInt(map.get("projectId").toString());		//upCnt : 수정한 projectId

		}else{	//"new"								//신규등록
			map.put("projectClass", "GENERAL");  // 프로젝트 등록시 프로젝트유형 디폴트값으로 'GENERAL' 입력함
			upCnt = projectMgmtService.insertProject(map);					//upCnt : 실제 넘어오는 값은 아이디(projectId) 이다
		}


		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송
	}


	/**
	 * 프로젝트 복사 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 10. 22.
	 */
	@RequestMapping(value = "/project/doCopyProject.do")
	public void doCopyProject(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userSeq", loginUser.get("userId").toString());		//user_id(sequence)

		int newProjectId = projectMgmtService.copyProject(map);

		AjaxResponse.responseAjaxSave(response, newProjectId);	//결과전송
		//return "project/projectReg";
	}

	/**
	 * 프로젝트 보기 페이지
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/projectView.do")
	public String projectView(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model, @RequestParam Map<String,Object> map) throws Exception {


		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.

		return "project/projectView";
	}


	/**
	 * 프로젝트 보기 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/getProjectInfo.do")
	public void getProjectInfo(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {


		Map<String,Object> result = new HashMap<String,Object>();

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", baseUserLoginInfo.get("userId").toString());	//user_id(sequence)
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		//프로젝트
		List<Map> tList = projectMgmtService.getProjectInfo(map);
		result.put("pProject", (tList.size()>0)?tList.get(0):null);

		//activity
		List<Map> list = projectMgmtService.getActivityList((Map)map);
		result.put("pActivity", list);


		AjaxResponse.responseAjaxObject(response, result);	//결과전송
	}



	//--------------------------------------------------- 프로젝트 참여 관련 --------------------------------------------------------

	/**
	 * 프로젝트 참여 페이지
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 19.
	 */
	@RequestMapping(value = "/project/userActivityAllocMgmt.do")
	public String userActivityAllocMgmt(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model) throws Exception {


		//메뉴 권한체크
		if(session.getAttribute("menuFilterStr").toString().indexOf("project/userActivityAllocMgmt") == -1){
			return "redirect:/";
		}


		return "project/userActivityAllocMgmt";
	}


	/**
	 * 프로젝트, activity 별 배정직원 등록 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 10. 22.
	 */
	@RequestMapping(value = "/project/doSaveUserProjectAlloc.do")
	public void doSaveUserProjectAlloc(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {


		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");


		LogUtil.printMap(map);	//map console log

		map.put("userSeq", loginUser.get("userId").toString());	//user_id(sequence)

		String jsonStr = (String)map.get("aList");
		Gson gson = new Gson();
		ArrayList<Map> actList = null;
		actList = gson.fromJson(jsonStr, java.util.ArrayList.class);

		//activity 들중 dummy 데이터 삭제
		for(int i=actList.size()-1; i>=0; i--){
			//logger.debug("###############" + actList.get(i).get("name") + ":::::" + actList.get(i).get("sort"));

			actList.get(i).put("activityId", (int)Double.parseDouble((actList.get(i).get("activityId").toString())));	//화면에서 넘어올때, 숫자가 gson에 의해 소숫점으로 변환되는것을 정수화
			actList.get(i).put("level", (int)Double.parseDouble((actList.get(i).get("level").toString())));				//화면에서 넘어올때, 숫자가 gson에 의해 소숫점으로 변환되는것을 정수화

			actList.get(i).put("projectId",	map.get("projectId"));		//프로젝트id	추가
			actList.get(i).put("userSeq", 	loginUser.get("userId").toString()); 	//수정자id	추가

		}


		int upCnt = 1;								//성공 '1'(임시값)

		map.put("aList", actList);					//json string 을 ArrayList 로 바꿔 전달한다.

		LogUtil.printMap(map);	//map console log	///////////////////////////////////////////////////////!!!!!!!!!!! 삭제 하자 테스트!!!!!!!!!!!!!!!!!!!

		projectMgmtService.updateProjectUserAlloc(map);

		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송

	}

	//--------------------------------------------------- 개인별 조회 관련 --------------------------------------------------------

	/**
	 * 개인별 조회 페이지
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 19.
	 */
	@RequestMapping(value = "/project/userActivityMgmt.do")
	public String userActivityMgmt(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model) throws Exception {


		//메뉴 권한체크
		if(session.getAttribute("menuFilterStr").toString().indexOf("project/userActivityMgmt") == -1){
			return "redirect:/";
		}


		return "project/userActivityMgmt";
	}


	/**
	 * 개인별 프로젝트 리스트 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 24.
	 */
	@RequestMapping(value = "/project/getUserProjectList.do")
	public void getUserProjectList(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,String> map) throws Exception {

		Map userInfo = (HashMap)session.getAttribute("baseUserLoginInfo");
		map.put("applyOrgId", userInfo.get("applyOrgId").toString());				//ORG_ID

		Map<String,Object> resultMap;

		resultMap = projectMgmtService.getUserProjectList((Map)map);

		AjaxResponse.responseAjaxSelectForPage(response, resultMap);	//결과전송

	}


	/**
	 * 개인별 프로젝트 보기 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/getUserProjectInfo.do")
	public void getUserProjectInfo(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map userInfo = (HashMap)session.getAttribute("baseUserLoginInfo");
		map.put("applyOrgId", userInfo.get("applyOrgId").toString());				//ORG_ID

		Map<String,Object> result = new HashMap<String,Object>();

		//프로젝트
		List<Map> tList = projectMgmtService.getUserProjectInfo(map);
		result.put("pProject", (tList.size()>0)?tList.get(0):null);

		//activity
		List<Map> list = projectMgmtService.getUserActivityList((Map)map);
		result.put("pActivity", list);


		AjaxResponse.responseAjaxObject(response, result);	//결과전송
	}


	/**
	 * 개인별 기본 project 및 activity 등록
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 25.
	 */
	@RequestMapping(value = "/project/changeUserDefaultPjtAct.do")
	public void changeUserDefaultPjtAct(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {


		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");


		LogUtil.printMap(map);	//map console log

		map.put("userSeq", loginUser.get("userId").toString());	//user_id(sequence)

		int upCnt = projectMgmtService.changeUserDefaultPjtAct(map);

		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송
	}


	/**
	 * activity 별 직원배정 등록 및 삭제 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 11. 23.
	 */
	/*@RequestMapping(value = "/project/changeActivityUser.do")
	public void changeActivityUser(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		//SESSION check!
		String resStr = SessionUtil.getSessionCheckResult(request, response, SessionUtil.RES_TYPE_CLOSE);	//* RES_TYPE_CLOSE : 팝업로그인창 클로징
		if(!SessionUtil.SESSION_PASS.equals(resStr)){	//세션성공이 아닌경우(세션만료)
			return;
		}

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");


		LogUtil.printMap(map);	//map console log

		map.put("userSeq", loginUser.getUserId());	//user_id(sequence)

		int upCnt = projectMgmtService.changeActivityUser(map);

		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송
	}*/


	/**
	 * 프로젝트 삭제 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2016. 06. 07.
	 */
	@RequestMapping(value = "/project/doDeleteProject.do")
	public void doDeleteProject(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {


		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");


		LogUtil.printMap(map);	//map console log

		map.put("userSeq", loginUser.get("userId").toString());	//user_id(sequence)


		String mode = map.get("mode").toString();	//'new' or 'update'

		int upCnt = 0;
		if("update".equals(mode)){					//수정모드 이면서 삭제

			projectMgmtService.deleteProject(map);	//삭제

			upCnt = Integer.parseInt(map.get("projectId").toString());		//upCnt : 수정한 projectId

		}

		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송
	}


	/**
	 * 개인별 activity list (타임시트 사용) ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/getUserActivityListForTimesheet.do")
	public void getUserActivityListForTimesheet(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {


		List<Map> list = projectMgmtService.getUserActivityListForTimesheet(map);

		AjaxResponse.responseAjaxSelect(response, list);	//결과전송
	}

	/**
	 * 프로젝트/엑티비티 조회 (공통js)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 6. 24.
	 */
	@RequestMapping(value = "/project/getBaseCommonProject.do")
	public void getBaseCommonProject(HttpServletRequest request,
			HttpServletResponse response,
			HttpSession session, ModelMap model,
			@RequestParam Map<String,String> map) throws Exception {

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("roleId", loginUser.get("userRoleId").toString());		//user_id(sequence)

		List<Map> list = projectMgmtService.getBaseCommonProject(map);

		AjaxResponse.responseAjaxSelect(response, list);	//결과전송
	}


	/**
	 * 마감일 정보
	 *

	 */
	@RequestMapping(value = "/project/chkCloseDate.do")
	public void chkCloseDate(HttpServletRequest request,
			HttpServletResponse response,
			HttpSession session, ModelMap model,
			@RequestParam Map<String,Object> map) throws Exception {

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");

		Map resultMap = projectMgmtService.chkCloseDateInfo(map);

		AjaxResponse.responseAjaxObject(response, resultMap);	//결과전송
	}

	/**
	 * 마감일 경고창
	 *
	 */
	@RequestMapping(value = "/project/alertCloseDatePop/pop.do")
	public String alertCloseDatePop(HttpServletRequest request,
			HttpServletResponse response,
			HttpSession session, ModelMap model,
			@RequestParam Map<String,Object> map) throws Exception {

		model.addAllAttributes(map);

		return "/project/alertCloseDatePop/pop";
	}


	/**
	 * 출장비, 구매품의 ,교육품의,지출 프로젝트 금액 벨리데이션
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 6. 24.
	 */
	@RequestMapping(value = "/project/getProjectExpenseValid.do")
	public void getProjectExpenseValid(HttpServletRequest request,
			HttpServletResponse response,
			HttpSession session, ModelMap model,
			@RequestParam Map<String,String> map) throws Exception {
		if(session.getAttribute("baseUserLoginInfo")==null) throw new Exception();
		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("orgId", baseUserLoginInfo.get("orgId").toString());
		EgovMap expenseMap = projectMgmtService.getProjectExpenseValid(map);
		AjaxResponse.responseAjaxObject(response, expenseMap);	//결과전송
	}

	/**
	 * 프로젝트 지출 상세 팝업
	 *
	 */
	@RequestMapping(value = "/project/expenseListPop/pop.do")
	public String expenseListPop(@RequestParam Map<String,Object> map,
			HttpSession session, ModelMap model) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		model.addAllAttributes(map);

		return "project/pop/expenseListPop/pop";
	}

	/**
	 * 프로젝트 지출 리스트
	 *
	 */
	@RequestMapping(value = "/project/getExpenseList.do")
	public void getExpenseList(@RequestParam Map<String,Object> map,HttpServletResponse response,
			HttpSession session, ModelMap model) throws Exception {

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("orgId", baseUserLoginInfo.get("orgId").toString());

		Map resultMap = projectMgmtService.getExpenseList(map);

		AjaxResponse.responseAjaxSelectForPage(response, resultMap);	//결과전송

	}

	/************************************************************************************
	 * 기본 프로젝트
	 ************************************************************************************/

	/**
	 * 프로젝트 > 기본관리 > 휴가항목
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 20.
	 */
	@RequestMapping(value = "/project/projectVacationMgmt.do")
	public String projectVacationMgmt(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		map.put("projectClass", "VACATION");
		Map resultMap = projectMgmtService.getBaseProjectId(map);

		map.put("projectId", resultMap.get("projectId").toString());
		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.
		return "project/projectVacationMgmt";
	}

	/**
	 * 프로젝트 > 기본관리 > 기본업무
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 20.
	 */
	@RequestMapping(value = "/project/projectBaseMgmt.do")
	public String projectBaseMgmt(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		map.put("projectClass", "BASE");
		Map resultMap = projectMgmtService.getBaseProjectId(map);

		map.put("projectId", resultMap.get("projectId").toString());
		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.
		return "project/projectBaseMgmt";
	}

	/**
	 * 프로젝트 기본보기 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/getBaseProjectInfo.do")
	public void getBaseProjectInfo(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map<String,Object> result = new HashMap<String,Object>();

		//프로젝트
		EgovMap projectMap = projectMgmtService.getBaseProjectInfo(map);
		result.put("pProject", projectMap);

		//activity
		List<Map> list = projectMgmtService.getBaseActivityList((Map)map);
		result.put("pActivity", list);

		AjaxResponse.responseAjaxObject(response, result);	//결과전송
	}

	/**
	 * 프로젝트 등록 ajax
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 10. 22.
	 */
	@RequestMapping(value = "/project/doSaveBaseProject.do")
	public void doSaveBaseProject(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");

		map.put("userSeq", loginUser.get("userId").toString());		//user_id(sequence)

		LogUtil.printMap(map);	//map console log

		String jsonStr = (String)map.get("aList");
		Gson gson = new Gson();
		ArrayList<Map> actList = null;
		actList = gson.fromJson(jsonStr, java.util.ArrayList.class);

		//activity 들중 dummy 데이터 삭제
		for(int i=actList.size()-1; i>=0; i--){
			//logger.debug("###############" + actList.get(i).get("name") + ":::::" + actList.get(i).get("sort"));

			if(actList.get(i).get("activityId")!=null) {
				actList.get(i).put("activityId", (int)Double.parseDouble((actList.get(i).get("activityId").toString())));		//화면에서 넘어올때, 숫자가 gson에 의해 소숫점으로 변환되는것을 정수화
			}
			actList.get(i).put("level", (int)Double.parseDouble((actList.get(i).get("level").toString())));		//화면에서 넘어올때, 숫자가 gson에 의해 소숫점으로 변환되는것을 정수화

			if("".equals(actList.get(i).get("name").toString().trim())){
				actList.remove(i);
			}else {
				actList.get(i).put("projectId",	map.get("projectId"));		//프로젝트id	추가
				actList.get(i).put("userSeq", 	loginUser.get("userId").toString()); 	//수정자id	추가
			}
		}

		int upCnt = 1;								//성공 '1'(임시값)
		map.put("aList", actList);					//json string 을 ArrayList 로 바꿔 전달한다.

		projectMgmtService.updateBaseProject(map);
		upCnt = Integer.parseInt(map.get("projectId").toString());		//upCnt : 수정한 projectId

		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송
	}

	/**
	 * 프로젝트 상태변경(보류,중단,보류취소,중단취소)
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 10. 22.
	 */
	@RequestMapping(value = "/project/processStatus.do")
	public void processStatus(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userSeq", loginUser.get("userId").toString());		//user_id(sequence)

		int upCnt = projectMgmtService.processStatus(map);
		AjaxResponse.responseAjaxSave(response, upCnt);	//결과전송
		//return "project/projectReg";
	}

	//프로젝트 현황퍼블요청........................................
	@RequestMapping(value = "/project/projectStatusList.do")
	public String projectStatusList(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {
		return "project/projectStatusList";
	}
	@RequestMapping(value = "/project/projectStatusDetail.do")
	public String projectStatusDetail(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {
		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());		//user_id(sequence)

		map.put("chkSearchMore","N");
		map.put("maxPageRow", 5);
		List<Map> projectStatusList = projectMgmtService.searchProjectStatusList(map);

		model.addAttribute("projectStatusList", projectStatusList);
		model.addAttribute("maxPageRow", 5);

		return "project/projectStatusDetail";
	}

	/**
	 * 프로젝트 상세 조회
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/projectInfoViewPop.do")
	public String projectInfoViewPop(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model, @RequestParam Map<String,Object> map) throws Exception {


		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.

		return "project/pop/projectViewPop/inc";
	}

	/**
	 * 프로젝트 현황 리스트 > 첨부파일 목록 팝업
	 *
	 * @param		:
	 * @return		:
	 * @exception	:
	 * @author		: oys
	 * @date		: 2015. 7. 22.
	 */
	@RequestMapping(value = "/project/projectStatusDetailFileListPop.do")
	public String projectStatusDetailFileListPop(HttpServletRequest request,
			HttpSession session, HttpServletResponse response, ModelMap model, @RequestParam Map<String,Object> map) throws Exception {


		model.addAllAttributes(map);	//받은 파라미터 화면으로 그대로 전달.

		return "project/pop/projectStatusDetailFileListPop/pop";
	}

	/**
	 *
	 * 기안문서 //결재문서//참조문서 상세화면으로 이동한다.
	 *
	 * @param : HttpSession
	 * @return : String "approve/getApproveDetail"
	 * @exception : throws
	 * @author :  Park
	 * @date : 2016. 10. 20.
	 */
	@RequestMapping(value = "/project/projectStatusDetailApprovePop.do")
	public String getApproveDetail(HttpSession session,
								  @RequestParam Map<String,Object> paramMap,
								  Model model
			) throws Exception {

		if(session.getAttribute("baseUserLoginInfo")==null) return "redirect:/";

		Map baseUserLoginInfo = (Map)session.getAttribute("baseUserLoginInfo");
		paramMap.put("userId", baseUserLoginInfo.get("userId").toString());
		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
       paramMap.put("applyOrgId", baseUserLoginInfo.get("applyOrgId").toString());

		EgovMap detailMap = approveService.getApproveDetail(paramMap);
		model.addAttribute("detailMap", detailMap);

		model.addAttribute("approveLineMap", approveService.getApproveLine(paramMap));

		model.addAttribute("searchMap",paramMap);

		//의견
		if(!detailMap.get("docStatus").toString().equals("WORKING")){
			model.addAttribute("commentList", approveService.getApproveProcessComment(paramMap));
		}

		return "approve/approveDocDetail/pop";

	}

	@RequestMapping(value = "/project/projectStatusDetailAjax.do")
	public String projectStatusDetailAjax(HttpServletRequest request, HttpServletResponse response, ModelMap model,
								HttpSession session, @RequestParam Map<String,Object> map) throws Exception {
		Map loginUser = (Map)session.getAttribute("baseUserLoginInfo");
		map.put("userId", loginUser.get("userId").toString());		//user_id(sequence)

		List<Map> projectStatusList = projectMgmtService.searchProjectStatusList(map);

		model.addAttribute("projectStatusList", projectStatusList);
		model.addAttribute("maxPageRow", map.get("maxPageRow").toString());

		String returnString = "project/include/projectStatusDetail_list_INC/inc";
		String type = map.get("type").toString();
		if(type.equals("FILE")){
			returnString= "project/include/projectStatusDetail_file_INC/inc";
		}
		//String searchTreeYn = map.get("searchTreeYn").toString();

		//if(searchTreeYn.equals("Y")) returnString = "project/include/projectStatusDetail_contents_INC/inc";

		return returnString;
	}

	//지출 일괄 비차감 처리
	@RequestMapping(value = "/project/processNonExpenseAll.do")
	public void processNonExpenseAll(HttpSession session, @RequestParam Map<String, Object> paramMap,
			@RequestParam(value = "mCheck", required = false) String[] mCheck, HttpServletResponse response)
			throws Exception {

		if (session.getAttribute("baseUserLoginInfo") == null)
			throw new Exception();
		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("userId", baseUserLoginInfo.get("userId").toString());
		paramMap.put("userName", baseUserLoginInfo.get("userName").toString());

		paramMap.put("mCheck", mCheck);

		projectMgmtService.processNonExpenseAll(paramMap);
		// return obj
		Map<String, Object> obj = new HashMap<String, Object>();

		obj.put("result", "SUCCESS");

		AjaxResponse.responseAjaxObject(response, obj); // "SUCCESS" 전달
	}
	//지출 비용차감 처리
	@RequestMapping(value = "/project/processExpense.do")
	public void processExpense(HttpSession session, @RequestParam Map<String, Object> paramMap,
			HttpServletResponse response)
			throws Exception {

		if (session.getAttribute("baseUserLoginInfo") == null)
			throw new Exception();
		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("userId", baseUserLoginInfo.get("userId").toString());
		paramMap.put("userName", baseUserLoginInfo.get("userName").toString());

		projectMgmtService.processExpense(paramMap);
		// return obj
		Map<String, Object> obj = new HashMap<String, Object>();

		obj.put("result", "SUCCESS");

		AjaxResponse.responseAjaxObject(response, obj); // "SUCCESS" 전달
	}

	//지출 관련 상세 팝업 열람 권한 체크
	@RequestMapping(value = "/project/getValidProjectExpenseView.do")
	public void getValidProjectExpenseView(HttpSession session, @RequestParam Map<String, Object> paramMap,
			HttpServletResponse response)
			throws Exception {

		if (session.getAttribute("baseUserLoginInfo") == null)
			throw new Exception();
		Map baseUserLoginInfo = (Map) session.getAttribute("baseUserLoginInfo");

		paramMap.put("orgId", baseUserLoginInfo.get("orgId").toString());
		paramMap.put("userId", baseUserLoginInfo.get("userId").toString());

		String resultMsg =projectMgmtService.getValidProjectExpenseView(paramMap);
		// return obj
		Map<String, Object> obj = new HashMap<String, Object>();

		if(resultMsg.equals("SUCCESS")){
			obj.put("result", "SUCCESS");
		}else{
			obj.put("result", "FAIL");
			obj.put("msg",resultMsg);
		}

		AjaxResponse.responseAjaxObject(response, obj); // "SUCCESS" 전달
	}

	////프로젝트 공통 트리에서 조회
	@RequestMapping(value = "/project/getProjectTreeList.do")
	public String getProjectTreeList(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			HttpSession session, @RequestParam Map<String,Object> map) throws Exception {

		Map baseUserLoginInfo = (HashMap)session.getAttribute("baseUserLoginInfo");
		map.put("orgId", baseUserLoginInfo.get("applyOrgId").toString());				//ORG_ID
		map.put("userId", baseUserLoginInfo.get("userId").toString());				//userId
		map.put("deptLevel", baseUserLoginInfo.get("deptLevel").toString());
		map.put("deptBossLevelYn", baseUserLoginInfo.get("deptBossLevelYn").toString());

		PaginationInfo paginationInfo = new PaginationInfo();

		// 현재 페이지
		Integer pageIndex = 1;

		if (map.containsKey("treePageIndex") && !map.get("treePageIndex").toString().equals("")) {
			pageIndex = Integer.parseInt(map.get("treePageIndex").toString());
		}

		paginationInfo.setCurrentPageNo(pageIndex);// 현재 페이지 번호

		Integer recordCountPerPage = 10;

		/*if (map.containsKey("recordCountPerPage") && !map.get("recordCountPerPage").toString().equals("")) {
			recordCountPerPage = Integer.parseInt(map.get("recordCountPerPage").toString());
		}
*/
		paginationInfo.setRecordCountPerPage(recordCountPerPage);// 한 페이지에 게시되는
																	// 게시물 건수
		paginationInfo.setPageSize(3);// 페이징 리스트의 사이즈

		int firstRecordIndex = paginationInfo.getFirstRecordIndex();
		// int recordCountPerPage = paginationInfo.getRecordCountPerPage();

		map.put("offset", firstRecordIndex);
		map.put("limit", recordCountPerPage);

		List<Map> projectTreeList = projectMgmtService.getProjectTreeList(map);
		Integer totCnt = Integer.parseInt(map.get("totCnt").toString());

		paginationInfo.setTotalRecordCount(totCnt);
		model.addAttribute("paginationInfo", paginationInfo);
		model.addAttribute("projectTreeList",projectTreeList);

		return "common/include/projectDeptTree_projectTree_INC/inc";
	}
}
